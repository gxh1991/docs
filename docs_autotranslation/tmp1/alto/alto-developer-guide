ALTO Developer Guide
====================

Overview
--------

The topics of this guide are:

1. How to add alto projects as dependencies;

2. How to put/fetch data from ALTO;

3. How to use customized service implementations.

Adding ALTO Projects as Dependencies
------------------------------------

Most ALTO packages can be added as dependencies in Maven projects by
putting the following code in the *pom.xml* file.

::

    <dependency>
        <groupId>org.opendaylight.alto</groupId>
        <artifactId>${THE_NAME_OF_THE_PACKAGE_YOU_NEED}</artifactId>
        <version>${ALTO_VERSION}</version>
    </dependency>

The current stable version for ALTO is ``0.1.0-Lithium``.

Putting/Fetching data from ALTO
-------------------------------

Using RESTful API
~~~~~~~~~~~~~~~~~

There are two kinds of RESTful APIs for ALTO: the one provided by
``alto-northbound`` which follows the formats defined in `RFC
7285 <https://tools.ietf.org/html/rfc7285>`__, and the one provided by
RESTCONF whose format is defined by the YANG model proposed in `this
draft <https://tools.ietf.org/html/draft-shi-alto-yang-model-03>`__.

One way to get the URLs for the resources from ``alto-northbound`` is to
visit the IRD service first where there is a ``uri`` field for every
entry. However, the IRD service is not yet implemented so currently the
developers have to construct the URLs themselves. The base URL is
``/controller/nb/v2/alto`` and below is a list of the specific paths
defined in ``AltoNorthbound.java`` in ``alto-northbound`` using Jersey
``@Path`` annotation:

-  ``/ird/{rid}``: the path to access *IRD* services;

-  ``/networkmap/{rid}[/{tag}]``: the path to access *Network Map*
   services;

-  ``/costmap/{rid}[/{tag}[/{mode}/{metric}]]``: the path to access
   *Cost Map* services;

-  ``/filtered/networkmap/{rid}[/{tag}]``: the path to access *Filtered
   Network Map* services;

-  ``/filtered/costmap/{rid}[/{tag}]``: the path to access *Filtered
   Cost Map* services;

-  ``/endpointprop/lookup/{rid}[/{tag}]``: the path to access *Endpoint
   Property* services;

-  ``/endpointcost/lookup/{rid}[/{tag}]``: the path to access *Endpoint
   Cost* services.

    **Note**

    The segments in brackets are optional.

If you want to fetch the data using RESTCONF, it is highly recommended
to take a look at the ``apidoc`` page
(`http://{controller\_ip}:8181/apidoc/explorer/index.html <http://{controller_ip}:8181/apidoc/explorer/index.html>`__)
after installing the ``alto-model`` feature in karaf.

It is also worth pointing out that ``alto-northbound`` only supports
``GET`` and ``POST`` operations so it is impossible to manipulate the
data through its RESTful APIs. To modify the data, use ``PUT`` and
``DELETE`` methods with RESTCONF.

    **Note**

    The current implementation uses the ``configuration`` data store and
    that enables the developers to modify the data directly through
    RESTCONF. In the future this approach might be disabled in the core
    packages of ALTO but may still be available as an extension.

Using AD-SAL
~~~~~~~~~~~~

Five interfaces are defined in package ``service-api-rfc7285``. Follow
the steps below to use them:

1. Determine the required service interface: ``IRDService``,
   ``NetworkMapService``, ``CostMapService``,
   ``EndpointPropertyService`` or ``EndpointCostService``;

2. Use the ``ServiceHelper`` to get the instance;

3. Call the corresponding methods with appropriate parameters.

Using MD-SAL
~~~~~~~~~~~~

You can also fetch data from the data store directly.

First you must get the access to the data store by registering your
module with a data broker.

Then an ``InstanceIdentifier`` must be created. Here is an example of
how to build an ``InstanceIdentifier`` for a *network map*:

::

    import org.opendaylight...alto...Resources;
    import org.opendaylight...alto...resources.NetworkMaps;
    import org.opendaylight...alto...resources.network.maps.NetworkMap;
    import org.opendaylight...alto...resources.network.maps.NetworkMapKey;
    ...
    protected
    InstanceIdentifier<NetworkMap> getNetworkMapIID(String resource_id) {
      ResourceId rid = ResourceId.getDefaultInstance(resource_id);
      NetworkMapKey key = new NetworkMapKey(rid);
      InstanceIdentifier<NetworkMap> iid = null;
      iid = InstanceIdentifier.builder(Resources.class)
                              .child(NetworkMaps.class)
                              .child(NetworkMap.class, key)
                              .build();
      return iid;
    }
    ...

With the ``InstanceIdentifier`` you can use ``ReadOnlyTransaction``,
``WriteTransaction`` and ``ReadWriteTransaction`` to manipulate the data
accordingly. The ``simple-impl`` package, which provides some of the
AD-SAL APIs mentioned above, is using this method to get data from the
data store and then convert them into RFC7285-compatible objects.

Providing Customized Implementation
-----------------------------------

Currently it is very simple to provide a customized network map, the
only thing you have to do is to put the data into the data store. Cost
maps are more complex since there are no classes for the cost values by
default, you have to define it using ``augment`` in YANG. Here is an
example in ``alto-hosttracker``.

.. code:: yang

        augment "/alto-restconf:resources/alto-restconf:cost-maps/alto-restconf:cost-map/alto-restconf:map/alto-restconf:dst-costs"     {
            when "/alto-restconf:resources/alto-restconf:cost-maps/alto-restconf:cost-map/alto-restconf:meta/alto-restconf:cost-type/alto-restconf:cost-mode == 'numerical'";
            leaf cost-in-hosttracker {
                type int32;
            }
        }

