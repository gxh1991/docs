<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>OpenDaylight Getting Started Guide</title>
<date>2016-06-01</date>

    <author>
        <personname>
            <firstname>OpenDaylight</firstname>
            <surname>Community</surname>
        </personname>
        <email>documentation@opendaylight.org</email>
        <affiliation>
            <orgname>Linux Foundation</orgname>
        </affiliation>
    </author>
    <copyright>
        <year>2015</year>
        <holder>Linux Foundation</holder>
    </copyright>
    <releaseinfo>Beryllium</releaseinfo>
    <productname>OpenDaylight</productname>
    <pubdate></pubdate>
    <legalnotice role="license">
        <para> This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at <link xlink:href="http://www.eclipse.org/legal/epl-v10.html"/></para>
    </legalnotice>
    <abstract>
        <para>This guide describes how to get started with OpenDaylight.</para>
    </abstract>
    <revhistory>
        <revision>
            <date>2014-07-16</date>
            <revdescription>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>Initial Guide Creation</para>
                    </listitem>
                </itemizedlist>
            </revdescription>
        </revision>
    </revhistory>



</info>
<chapter xml:id="_opendaylight_release_notes">
<title>OpenDaylight Release Notes</title>
<section xml:id="_target_environment">
<title>Target Environment</title>
<section xml:id="_for_execution">
<title>For Execution</title>
<simpara>The OpenDaylight Karaf container, OSGi bundles, and Java class files
are portable and should run on any Java 7- or Java 8-compliant JVM to
run. Certain projects and certain features of some projects may have
additional requirements. Those are noted in the project-specific
release notes.</simpara>
<simpara>Projects and features which have known additional requirements are:
* TCP-MD5 requires 64-bit Linux
* TSDR has extended requirements for external databases
* Persistence has extended requirements for external databases
* SFC requires addition features for certain configurations
* SXP depends on TCP-MD5 on thus requires 64-bit Linux
* SNBI has requirements for Linux and Docker
* OpFlex requires Linux
* DLUX requires a modern web browser to view the UI
* AAA when using federation has additional requirements for external tools
* VTN has components which require Linux</simpara>
<note>
<simpara>If you are using the Oracle JDK, version 1.7.0_45 or later is required.</simpara>
</note>

</section>
<section xml:id="_for_development">
<title>For Development</title>
<simpara>OpenDaylight is written primarily in Java project and primarily uses
Maven as a build tool Consequently the two main requirements to develop
projects within OpenDaylight are:</simpara>
<itemizedlist>
<listitem>
<simpara>A Java 7- or Java 8-compliant JDK</simpara>
</listitem>
<listitem>
<simpara>Maven 3.1.1 or later</simpara>
</listitem>
</itemizedlist>

<simpara>Applications and tools built on top of OpenDaylight using it&#8217;s REST
APIs should have no special requirements beyond whatever is needed to
run the application or tool and make the REST calls.</simpara>
<simpara>In some places, OpenDaylight makes use of the Xtend language. While
Maven will download the appropriate tools to build this, additional
plugins may be required for IDE support.</simpara>
<simpara>The projects with additional requirements for execution typically have
similar or more extensive additional requirements for development. See
the project-specific release notes for details.</simpara>
</section>
</section>
<section xml:id="_known_issues_and_limitations">
<title>Known Issues and Limitations</title>
<simpara>Other than as noted in project-specific release notes, we know of the
following limitations:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Migration from Helium and Lithium to Beryllium has not been
extensively tested. The per-project release notes include migration and
compatibility information when it is known.</simpara>
</listitem>
<listitem>
<simpara>There are scales beyond which the controller has been unreliable when
collecting flow statistics from OpenFlow switches. In tests, these
issues became apparent when managing thousands of OpenFlow
switches, however this may vary depending on deployment and use cases.</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_project_specific_release_notes">
<title>Project-specific Release Notes</title>
<simpara>For the release notes of individual projects, please see the following pages on the OpenDaylight Wiki.</simpara>
<simpara>TBD: add Beryllium release notes</simpara>
<section xml:id="_projects_without_release_notes">
<title>Projects without Release Notes</title>
<simpara>The following projects participated in Beryllium, but intentionally do not have release notes.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Documentation Project</emphasis> produced this and the other downloadable documentation</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Integration Group</emphasis> hosted the OpenDaylight-wide tests and main release distribution</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Release Engineering - autorelease</emphasis> was used to build the Beryllium release artifacts and including the main release download.</simpara>
</listitem>
</itemizedlist>

</section>
</section>
</chapter>
<chapter xml:id="_getting_and_installing_opendaylight">
<title>Getting and Installing OpenDaylight</title>
<section xml:id="_downloading_and_installing_opendaylight">
<title>Downloading and installing OpenDaylight</title>
<simpara>The default distribution can be found on the OpenDaylight software
download page: <link xlink:href="http://www.opendaylight.org/software/downloads">http://www.opendaylight.org/software/downloads</link></simpara>
<simpara>The Karaf distribution has no features enabled by default. However, all
of the features are available to be installed.</simpara>
<note>
<simpara>For compatibility reasons, you cannot enable all the features
simultaneously. We try to document known incompatibilities
<link linkend="_installing_the_components">below</link>.</simpara>
</note>

<section xml:id="_running_the_karaf_distribution">
<title>Running the karaf distribution</title>
<simpara>To run the Karaf distribution:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Unzip the zip file.</simpara>
</listitem>
<listitem>
<simpara>Navigate to the directory.</simpara>
</listitem>
<listitem>
<simpara>run <literal>./bin/karaf</literal>.</simpara>
</listitem>
</orderedlist>

<simpara>For Example:</simpara>
<informaltable frame="none"
    rowsep="1" colsep="1">
  
  <tgroup cols="1">
    
    <colspec colname="col_1" colwidth="100*"/>
    
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><screen>$ ls distribution-karaf-0.4.0-Beryllium.zip
distribution-karaf-0.4.0-Beryllium.zip
$ unzip distribution-karaf-0.4.0-Beryllium.zip
Archive:  distribution-karaf-0.4.0-Beryllium.zip
   creating: distribution-karaf-0.4.0-Beryllium/
   creating: distribution-karaf-0.4.0-Beryllium/configuration/
   creating: distribution-karaf-0.4.0-Beryllium/data/
   creating: distribution-karaf-0.4.0-Beryllium/data/tmp/
   creating: distribution-karaf-0.4.0-Beryllium/deploy/
   creating: distribution-karaf-0.4.0-Beryllium/etc/
   creating: distribution-karaf-0.4.0-Beryllium/externalapps/
...
  inflating: distribution-karaf-0.4.0-Beryllium/bin/start.bat
  inflating: distribution-karaf-0.4.0-Beryllium/bin/status.bat
  inflating: distribution-karaf-0.4.0-Beryllium/bin/stop.bat
$ cd distribution-karaf-0.4.0-Beryllium
$ ./bin/karaf

    ________                       ________                .__  .__       .__     __
    \_____  \ ______   ____   ____ \______ \ _____  ___.__.|  | |__| ____ |  |___/  |_
     /   |   \\____ \_/ __ \ /    \ |    |  \\__  \&lt;   |  ||  | |  |/ ___\|  |  \   __\
    /    |    \  |_&gt; &gt;  ___/|   |  \|    `   \/ __ \\___  ||  |_|  / /_/  &gt;   Y  \  |
    \_______  /   __/ \___  &gt;___|  /_______  (____  / ____||____/__\___  /|___|  /__|
            \/|__|        \/     \/        \/     \/\/            /_____/      \/

</screen>

<itemizedlist>
<listitem>
<simpara>Press <emphasis role="strong">tab</emphasis> for a list of available commands</simpara>
</listitem>
<listitem>
<simpara>Typing <emphasis role="strong">[cmd] --help</emphasis> will show help for a specific command.</simpara>
</listitem>
<listitem>
<simpara>Press <emphasis role="strong">ctrl-d</emphasis> or type <emphasis role="strong">system:shutdown</emphasis> or <emphasis role="strong">logout</emphasis> to shutdown OpenDaylight.</simpara>
</listitem>
</itemizedlist>
</entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

</section>
</section>
<section xml:id="_installing_the_components">
<title>Installing the components</title>
<simpara>The section describes a list of components in OpenDaylight Beryllium and
the relevant Karaf feature to install in order to enable that component.</simpara>
<simpara>To install a feature use the following command:</simpara>
<screen>feature:install</screen>

<simpara>For Example:</simpara>
<screen>feature:install &lt;feature-name&gt;</screen>

<simpara>Multiple features can be installed using the following command:</simpara>
<screen>feature:install &lt;feature1-name&gt; &lt;feature2-name&gt; ... &lt;featureN-name&gt;</screen>

<table frame="all"
    rowsep="1" colsep="1">
<title>Beryllium Components</title>
  
  <tgroup cols="4">
    
    <colspec colname="col_1" colwidth="18*"/>
    
    <colspec colname="col_2" colwidth="50*"/>
    
    <colspec colname="col_3" colwidth="18*"/>
    
    <colspec colname="col_4" colwidth="14*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Component Name</entry>
        
        <entry align="left" valign="top">Component Description</entry>
        
        <entry align="left" valign="top">Karaf feature name</entry>
        
        <entry align="left" valign="top">Compatibility</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>ALTO</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enable support for Application-Layer Traffic Optimization</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-alto-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>BGP</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables support for BGP</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-bgpcep-bgp-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>CAPWAP</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables control of supported wireless APs</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-capwap-ac-rest</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>DIDM</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Device Identification and Driver Management</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-didm-identification-api, odl-didm-identification, and odl-didm-drivers-api</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Group Based Policy</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enable Endpoint Registry and Policy Repository REST APIs and associated functionality for Group Based Policy</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-groupbasedpolicy-ofoverlay</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Internet of Things Data Management</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables support for the oneM2M specification</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-iotdm-onem2m</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>L2 Switch</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Provides L2 (Ethernet) forwarding across connected OppenFlow switches and support for host tracking</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-l2switch-switch-ui</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>LACP</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enable support for the Link Aggregation Control Protocol</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-lacp-ui</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>LISP Flow Mapping</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enable LISP control plane services including the mapping system services REST API and LISP protocol SB plugin</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-lispflowmapping-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>MD-SAL Clustering</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Provides support for operating a cluster of OpenDaylight instances</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-mdsal-clustering</simpara></entry>
        
        <entry align="left" valign="top"><simpara>special</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>NETCONF over SSH</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Provides support to manage NETCONF-enabled devices over SSH</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-netconf-connector-ssh</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Network Intent Composition</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enable support for high-level network control via intents</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-nic-core</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>OVS Management</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables OVS management using OVSDB plugin and its associated OVSDB northbound APIs</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-ovsdb-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>OVSDB OpenStack Neutron</simpara></entry>
        
        <entry align="left" valign="top"><simpara>OpenStack Network Virtualization using OpenDaylight&#8217;s OVSDB support</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-ovsdb-openstack</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>OpFlex</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables support for the OpFlex protocol</simpara></entry>
        
        <entry align="left" valign="top"><simpara>special (see user/developer guide)</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>OpenFlow Flow Programming</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables discovery and control of OpenFlow switches and the topology between them</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-openflowplugin-flow-services-ui</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>OpenFlow Table Type Patterns</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Allows OpenFlow Table Type Patterns to be manually associated with network elements</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-ttp-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>PCEP</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables support for PCEP</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-bgpcep-pcep-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Packetcable PCMM</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables flow-based dynamic QoS management of CMTS using in the DOCSIS infrastructure</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-packetcable-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Packetcable Policy Server</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables support for the PacketCable policy server</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-packetcable-policy-server-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>RESTCONF API Support</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables REST API access to the MD-SAL including the data store</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-restconf</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>SDN Interface</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Provides support for interaction and sharing of state between (non-clustered) OpenDaylight instances</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-sdninterfaceapp-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>SFC over L2</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Supports implementing SFC using Layer 2 forwarding</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-sfcofl2</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>SFC over LISP</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Supports implementing SFC using LISP</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-sfclisp</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>SFC over REST</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Supports implementing SFC using REST CRUD operations on network elements</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-sfc-sb-rest</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>SFC over VXLAN</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Supports implementing SFC using VXLAN tunnels</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-sfc-ovs</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>SNMP Plugin</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables monitoring and control of network elements via SNMP</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-snmp-plugin</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>SNMP4SDN</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables OpenFlow-like control of network elements via SNMP</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-snmp4sdn-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>SSSD Federated Authentication</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enable support for federated authentication using SSSD</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-aaa-sssd-plugin</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Secure Networking Bootstrap</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Defines a SNBI domain and associated white lists of devices to be accommodated to the domain</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-snbi-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Secure tag eXchange Protocol (SXP)</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables distribution of shared tags to network devices</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-sxp-controller</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Service Flow Chaining (SFC)</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables support for applying chains of network services to certain traffic</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-sfc-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Time Series Data Repository (TSDR)</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables historical tracking of OpenFlow statistics</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-tsdr-all</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Topology Processing Framework</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables merged and filtered views of network topologies</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-topoprocessing-framework</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Unified Secure Channel (USC)</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables support for secure, remote connections to network devices</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-usc-channel-ui</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>VPN Service</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables support for OpenStack VPNaaS</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-vpnservice-core</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>VTN Manager</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables Virtual Tenant Network support</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-vtn-manager-rest</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>VTN Manager Neutron</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables OpenStack Neutron support of VTN Manager</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-vtn-manager-neutron</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

<simpara>In the table a compatibility value of <emphasis role="strong">all</emphasis> means that it can be run with other features. A value of <emphasis role="strong">self+all</emphasis> indicates that the feature can be installed with other features with a value of <emphasis role="strong">all</emphasis>, but may interact badly other features with a value of <emphasis role="strong">self+all</emphasis>.</simpara>
<table frame="all"
    rowsep="1" colsep="1">
<title>Experimental Beryllium Components</title>
  
  <tgroup cols="4">
    
    <colspec colname="col_1" colwidth="18*"/>
    
    <colspec colname="col_2" colwidth="50*"/>
    
    <colspec colname="col_3" colwidth="18*"/>
    
    <colspec colname="col_4" colwidth="14*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Component Name</entry>
        
        <entry align="left" valign="top">Component Description</entry>
        
        <entry align="left" valign="top">Karaf feature name</entry>
        
        <entry align="left" valign="top">Compatibility</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Persistence</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables saving of data to external databases</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-persistence-api</simpara></entry>
        
        <entry align="left" valign="top"><simpara>self+all</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Reservation</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables bandwidth calendaring using the TL1 protocol</simpara></entry>
        
        <entry align="left" valign="top"><simpara>odl-reservation-models</simpara></entry>
        
        <entry align="left" valign="top"><simpara>all</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

<section xml:id="_listing_available_features">
<title>Listing available features</title>
<simpara>To find the complete list of Karaf features, run the following command:</simpara>
<screen>feature:list</screen>

<simpara>To list the installed Karaf features, run the following command:</simpara>
<screen>feature:list -i</screen>

</section>
</section>
<section xml:id="_installing_support_for_rest_apis">
<title>Installing support for REST APIs</title>
<simpara>Most components that offer REST APIs will automatically load the RESTCONF API Support
component, but if for whatever reason they seem to be missing, you can activate this
support by installing the <literal>odl-restconf</literal> feature.</simpara>
</section>
<section xml:id="_installing_md_sal_clustering">
<title>Installing MD-SAL clustering</title>
<simpara>The MD-SAL clustering feature has "special" compatibility criteria. You <emphasis role="strong">must</emphasis>
install clustering, before other features are installed. To install clustering,
run the following command on the Karaf CLI console:</simpara>
<screen>feature:install odl-mdsal-clustering</screen>

</section>
</chapter>
<part xml:id="_getting_to_know_opendaylight">
<title>Getting to know OpenDaylight</title>
<preface xml:id="_opendaylight_overview">
<title>OpenDaylight Overview</title>
<simpara>The OpenDaylight project is a collaborative open source project that
aims to accelerate adoption of Software-Defined Networking (SDN) and
Network Functions Virtualization (NFV) with a transparent approach that
fosters new innovation.</simpara>
<simpara>OpenDaylight mainly consists of software designed to be run on top of a
Java Virtual Machine (JVM) and can be run on any operating system and
hardware as there is a Java Runtime Environment (JRE) available for it.</simpara>
<simpara>For a more detailed information about OpenDaylight, see the and <emphasis>OpenDaylight User Guie</emphasis>, <emphasis>OpenDaylight
Developer Guide</emphasis>.</simpara>
</preface>
<chapter xml:id="_using_the_opendaylight_user_interface_dlux">
<title>Using the OpenDaylight User Interface (DLUX)</title>
<simpara>This section introduces you to the OpenDaylight User Experience (DLUX) application.</simpara>
<section xml:id="_getting_started_with_dlux">
<title>Getting Started with DLUX</title>
<simpara>DLUX provides a number of different Karaf features, which you can enable and disable separately. In Beryllum they are:
. odl-dlux-core
. odl-dlux-node
. odl-dlux-yangui
. odl-dlux-yangvisualizer</simpara>
</section>
<section xml:id="_logging_in">
<title>Logging In</title>
<simpara>To log in to DLUX, after installing the application:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Open a browser and enter the login URL <link xlink:href="http://&lt;your-karaf-ip&gt;:8181/index.html">http://&lt;your-karaf-ip&gt;:8181/index.html</link> in your browser (Chrome is recommended).</simpara>
</listitem>
<listitem>
<simpara>Login to the application with your username and password credentials.</simpara>
</listitem>
</orderedlist>

<note>
<simpara>OpenDaylight&#8217;s default credentials are <emphasis>admin</emphasis> for both the username and password.</simpara>
</note>

</section>
<section xml:id="_working_with_dlux">
<title>Working with DLUX</title>
<simpara>After you login to DLUX, if you enable only odl-dlux-core feature, you will see only topology application available in the left pane.</simpara>
<note>
<simpara>To make sure topology displays all the details, enable the odl-l2switch-switch feature in Karaf.</simpara>
</note>

<simpara>DLUX has other applications such as node, yang UI and those apps won&#8217;t show up, until you enable their features odl-dlux-node and odl-dlux-yangui respectively in the Karaf distribution.</simpara>
<figure>
<title>DLUX Modules</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-login.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Page</phrase></textobject>
  </mediaobject>
</figure>

<note>
<simpara>If you install your application in dlux, they will also show up on the left hand navigation after browser page refresh.</simpara>
</note>

</section>
<section xml:id="_viewing_network_statistics">
<title>Viewing Network Statistics</title>
<simpara>The <emphasis role="strong">Nodes</emphasis> module on the left pane enables you to view the network statistics and port information for the switches in the network.</simpara>
<simpara>To use the <emphasis role="strong">Nodes</emphasis> module:</simpara>
<simpara><?asciidoc-hr?></simpara>

<orderedlist numeration="arabic">
<listitem>
<simpara>Select <emphasis role="strong">Nodes</emphasis> on the left pane.
The right pane displays atable that lists all the nodes, node connectors and the statistics.</simpara>
</listitem>
<listitem>
<simpara>Enter a node ID in the <emphasis role="strong">Search Nodes</emphasis> tab to search by node connectors.</simpara>
</listitem>
<listitem>
<simpara>Click on the <emphasis role="strong">Node Connector</emphasis> number to view details such as port ID, port name, number of ports per switch, MAC Address, and so on.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Flows</emphasis> in the Statistics column to view Flow Table Statistics for the particular node like table ID, packet match, active flows and so on.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Node Connectors</emphasis> to view Node Connector Statistics for the particular node ID.</simpara>
</listitem>
</orderedlist>

<simpara><?asciidoc-hr?></simpara>

</section>
<section xml:id="_viewing_network_topology">
<title>Viewing Network Topology</title>
<simpara>The Topology tab displays a graphical representation of network topology created.</simpara>
<note>
<simpara>DLUX does not allow for editing or adding topology information. The topology is generated and edited in other modules, e.g., the OpenFlow plugin. OpenDaylight stores this information in the MD-SAL datastore where DLUX can read and display it.</simpara>
</note>

<simpara>To view network topology:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Select <emphasis role="strong">Topology</emphasis> on the left pane. You will view the graphical representation on the right pane.
In the diagram blue boxes represent the switches, the black represents the hosts available, and lines represents how the switches and hosts are connected.</simpara>
</listitem>
<listitem>
<simpara>Hover your mouse on hosts, links, or switches to view source and destination ports.</simpara>
</listitem>
<listitem>
<simpara>Zoom in and zoom out using mouse scroll to verify topology for larger topologies.</simpara>
</listitem>
</orderedlist>

<figure>
<title>Topology Module</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-topology.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Topology Page</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_interacting_with_the_yang_based_md_sal_datastore">
<title>Interacting with the YANG-based MD-SAL datastore</title>
<simpara>The <emphasis role="strong">Yang UI</emphasis> module enables you to interact with the YANG-based MD-SAL datastore. For more information about YANG and how it interacts with the MD-SAL datastore, see the <emphasis>Controller</emphasis> and <emphasis>YANG Tools</emphasis> section of the <emphasis>OpenDaylight Developer Guide</emphasis>.</simpara>
<figure>
<title>Yang UI</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-ui-screen.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Yang UI Page</phrase></textobject>
  </mediaobject>
</figure>

<simpara>To use Yang UI:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Select <emphasis role="strong">Yang UI</emphasis> on the left pane. The right pane is divided in two parts.</simpara>
</listitem>
<listitem>
<simpara>The top part displays a tree of APIs, subAPIs, and buttons to call possible functions (GET, POST, PUT, and DELETE).</simpara>
<note>
<simpara>Not every subAPI can call every function. For example, subAPIs in the <emphasis>operational</emphasis> store have GET functionality only.</simpara>
</note>

<simpara>Inputs can be filled from OpenDaylight when existing data from OpenDaylight is displayed or can be filled by user on the page and sent to OpenDaylight.</simpara>
<simpara>Buttons under the API tree are variable. It depends on subAPI specifications. Common buttons are:</simpara>
<itemizedlist>
<listitem>
<simpara>GET to get data from OpenDaylight,</simpara>
</listitem>
<listitem>
<simpara>PUT and POST for sending data to OpenDaylight for saving</simpara>
</listitem>
<listitem>
<simpara>DELETE for sending data to OpenDaylight for deleting.</simpara>
<simpara>You must specify the xpath for all these operations. This path is displayed in the same row before buttons and it may include text inputs for specific path element identifiers.</simpara>
<figure>
<title>Yang API Specification</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-api-specification.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Yang UI API Specification Page</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>The bottom part of the right pane displays inputs according to the chosen subAPI.</simpara>
<itemizedlist>
<listitem>
<simpara>Lists are handled as a special case. For example, a device can store multiple flows. In this case "flow" is name of the list and every list element is identified by a unique key value. Elements of a list can, in turn, contain other lists.</simpara>
</listitem>
<listitem>
<simpara>In Yang UI, each list element is rendered with the name of the list it belongs to, its key, its value, and a button for removing it from the list.</simpara>
<figure>
<title>Yang UI API Specification</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-sub-api-screen.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Yang UI Sub API Specification Page</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>After filling in the relevant inputs, click the <emphasis role="strong">Show Preview</emphasis> button under the API tree to display request that will be sent to OpenDaylight.
A pane is displayed on the right side with text of request when some input is filled.</simpara>
</listitem>
</orderedlist>

<section xml:id="_displaying_topology_on_the_emphasis_role_strong_yang_ui_emphasis">
<title>Displaying Topology on the <emphasis role="strong">Yang UI</emphasis></title>
<simpara>To display topology:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Select subAPI network-topology &lt;topology revision number&gt; == &gt; operational == &gt; network-topology.</simpara>
</listitem>
<listitem>
<simpara>Get data from OpenDaylight by clicking on the "GET" button.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Display Topology</emphasis>.</simpara>
</listitem>
</orderedlist>

<figure>
<title>DLUX Yang Topology</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-topology.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Yang Topology Page</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_configuring_list_elements_on_the_emphasis_role_strong_yang_ui_emphasis">
<title>Configuring List Elements on the <emphasis role="strong">Yang UI</emphasis></title>
<simpara>Lists in Yang UI are displayed as trees. To expand or collapse a list, click the arrow before name of the list. To configure list elements in Yang UI:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>To add a new list element with empty inputs use the plus icon-button <emphasis role="strong">+</emphasis> that is provided after list name.</simpara>
</listitem>
<listitem>
<simpara>To remove several list elements, use the <emphasis role="strong">X</emphasis> button that is provided after every list element.</simpara>
<figure>
<title>DLUX List Elements</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-list-elements.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX list elements</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the YANG-based data store all elements of a list must have a unique key. If you try to assign two or more elements the same key, a warning icon <emphasis role="strong">!</emphasis> is displayed near their name buttons.</simpara>
<figure>
<title>DLUX List Warnings</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-list-warning.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX list warnings</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>When the list contains at least one list element, after the <emphasis role="strong">+</emphasis> icon, there are buttons to select each individual list element. You can choose one of them by clicking on it. In addition, to the right of the list name, there is a button which will display a vertically scrollable pane with all the list elements.</simpara>
<figure>
<title>DLUX List Button1</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-list-button1.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX list button1</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
</orderedlist>

</section>
</section>
</chapter>
<chapter xml:id="_running_xsql_console_commands_and_queries">
<title>Running XSQL Console Commands and Queries</title>
<section xml:id="_xsql_overview">
<title>XSQL Overview</title>
<simpara>XSQL is an XML-based query language that describes simple stored procedures
which parse XML data, query or update database tables, and compose XML output.
XSQL allows you to query tree models like a sequential database. For example,
you could run a query that lists all of the ports configured on a particular
module and their attributes.</simpara>
<simpara>The following sections cover the XSQL installation process, supported XSQL
commands, and the way to structure queries.</simpara>
</section>
<section xml:id="_installing_xsql">
<title>Installing XSQL</title>
<simpara>To run commands from the XSQL console, you must first install XSQL on your
system:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Navigate to the directory in which you unzipped OpenDaylight</simpara>
</listitem>
<listitem>
<simpara>Start Karaf:</simpara>

<literallayout class="monospaced">./bin/karaf</literallayout>


</listitem>
<listitem>
<simpara>Install XSQL:</simpara>

<literallayout class="monospaced">feature:install odl-mdsal-xsql</literallayout>


</listitem>
</orderedlist>

</section>
<section xml:id="_xsql_console_commands">
<title>XSQL Console Commands</title>
<simpara>To enter a command in the XSQL console, structure the command as follows:
<emphasis role="strong">odl:xsql</emphasis> <emphasis>&lt;XSQL command&gt;</emphasis></simpara>
<simpara>The following table describes the commands supported in this OpenDaylight
release.</simpara>
<table frame="all"
    rowsep="1" colsep="1">
<title>Supported XSQL Console Commands</title>
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="30*"/>
    
    <colspec colname="col_2" colwidth="70*"/>
    
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Command</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Description</emphasis></simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">r</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Repeats the last command you executed.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">list vtables</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists the schema node containers that are currently installed. Whenever an
OpenDaylight module is installed, its YANG model is placed in the schema
context. At that point, the  XSQL receives a notification, confirms that the
module&#8217;s YANG model resides in the schema context and then maps the model to
XSQL by setting up the necessary vtables and vfields. This command is useful
when you need to determine vtable information for a query.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">list vfields</emphasis> <emphasis>&lt;vtable name&gt;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists the vfields present in a specific vtable. This command is useful when
you need to determine vfields information for a query.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">jdbc</emphasis> <emphasis>&lt;ip address&gt;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>When the ODL server is behind a firewall, and the JDBC client cannot connect
to the JDBC server, run this command to start the client as a server and
establish a connection.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">exit</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Closes the console.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">tocsv</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables or disables the forwarding of query output as a .csv file.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">filename</emphasis> <emphasis>&lt;filename&gt;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specifies the .tocsv file to which the query data is exported. If you do not
specify a value for this option when the toccsv option is enabled, the filename
for the query data file is generated automatically.</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

</section>
<section xml:id="_xsql_queries">
<title>XSQL Queries</title>
<simpara>You can run a query to extract information that meets the criteria you specify
using the information provided by the <emphasis role="strong">list vtables</emphasis> and <emphasis role="strong">list vfields</emphasis>
<emphasis>&lt;vtable name&gt;</emphasis> commands.  Any query you run should be structured as follows:</simpara>
<simpara><emphasis role="strong">select</emphasis> <emphasis>&lt;vfields you want to search for, separated by a comma and a space&gt;</emphasis>
<emphasis role="strong">from</emphasis> <emphasis>&lt;vtables you want to search in, separated by a comma and a space&gt;</emphasis>
<emphasis role="strong">where</emphasis> <emphasis>&lt;criteria&gt;</emphasis> <emphasis role="strong"><emphasis>*<emphasis>&lt;criteria operator&gt;</emphasis></emphasis></emphasis>;*</simpara>
<simpara>For example, if you want to search the nodes/node ID field in the
nodes/node-connector table and find every instance of the Hardware-Address
object that contains <emphasis>BA</emphasis> in its text string, enter the following query:</simpara>

<literallayout class="monospaced">select nodes/node.ID from nodes/node-connector where Hardware-Address like '%BA%';</literallayout>


<simpara>The following criteria operators are supported:</simpara>
<table frame="all"
    rowsep="1" colsep="1">
<title>Supported XSQL Query Criteria Operators</title>
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="20*"/>
    
    <colspec colname="col_2" colwidth="80*"/>
    
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Criteria Operators</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Description</emphasis></simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">=</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that equal the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">!=</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that do not equal the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">like</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that contain the substring you specify. For
               example, if you specify <emphasis role="strong">like %BC%</emphasis>, every string that contains
               that particular substring is displayed.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">&lt;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that are less than the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">&gt;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that are more than the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">and</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that match both values you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">or</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that match either of the two values you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">&gt;=</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that are more than or equal to the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">&#8656;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that are less than or equal to the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">is null</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results for which no value is assigned.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">not null</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results for which any value is assigned.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">skip</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Use this operator to list matching results from a child node,
               even if its parent node does not meet the specified criteria.
               See the following example for more information.</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

<section xml:id="_example_skip_criteria_operator">
<title>Example: Skip Criteria Operator</title>
<simpara>If you are looking at the following structure and want to determine all of the
ports that belong to a YY type module:</simpara>
<itemizedlist>
<listitem>
<simpara>Network Element 1</simpara>
<itemizedlist>
<listitem>
<simpara>Module 1, Type XX</simpara>
<itemizedlist>
<listitem>
<simpara>Module 1.1, Type YY</simpara>
<itemizedlist>
<listitem>
<simpara>Port 1</simpara>
</listitem>
<listitem>
<simpara>Port 2</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Module 2, Type YY</simpara>
<itemizedlist>
<listitem>
<simpara>Port 1</simpara>
</listitem>
<listitem>
<simpara>Port 2</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<simpara>If you specify <emphasis role="strong">Module.Type=<emphasis>YY</emphasis></emphasis> in your query criteria, the ports associated
with module 1.1 will not be returned since its parent module is type XX.
Instead, enter <emphasis role="strong">Module.Type=<emphasis>YY</emphasis> or skip Module!=<emphasis>YY</emphasis></emphasis>. This tells XSQL to
disregard any parent module data that does not meet the type YY criteria and
collect results for any matching child modules. In this example, you are
instructing the query to skip module 1 and collect the relevant data from
module 1.1.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_setting_up_clustering">
<title>Setting Up Clustering</title>
<section xml:id="_clustering_overview">
<title>Clustering Overview</title>
<simpara>Clustering is a mechanism that enables multiple processes and programs to work
together as one entity.  For example, when you search for something on
google.com, it may seem like your search request is processed by only one web
server. In reality, your search request is processed by may web servers
connected in a cluster. Similarly, you can have multiple instances of
OpenDaylight working together as one entity.</simpara>
<simpara>Advantages of clustering are:</simpara>
<itemizedlist>
<listitem>
<simpara>Scaling: If you have multiple instances of OpenDaylight running, you can
potentially do more work and store more data than you could with only one
instance. You can also break up your data into smaller chunks (shards) and
either distribute that data across the cluster or perform certain operations
on certain members of the cluster.</simpara>
</listitem>
<listitem>
<simpara>High Availability: If you have multiple instances of OpenDaylight running and
one of them crashes, you will still have the other instances working and
available.</simpara>
</listitem>
<listitem>
<simpara>Data Persistence: You will not lose any data stored in OpenDaylight after a
manual restart or a crash.</simpara>
</listitem>
</itemizedlist>

<simpara>The following sections describe how to set up clustering on both individual and
multiple OpenDaylight instances.</simpara>
</section>
<section xml:id="_single_node_clustering">
<title>Single Node Clustering</title>
<simpara>To enable clustering on a single instance of OpenDaylight, perform the
following steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Download, unzip, and run the OpenDaylight distribution</simpara>
</listitem>
<listitem>
<simpara>Install the clustering feature:</simpara>

<literallayout class="monospaced">feature:install odl-mdsal-clustering</literallayout>


</listitem>
</orderedlist>

<note>
<simpara>This will enabled the cluster-ready version of the MD-SAL data store, but
      will not actually create a cluster of multiple instances. The result is
      that you will get data persistence, but not the scaling or high
      availability advantages.</simpara>
</note>

</section>
<section xml:id="_multiple_node_clustering">
<title>Multiple Node Clustering</title>
<simpara>The following sections describe how to set up multiple node clusters in OpenDaylight.</simpara>
<section xml:id="_deployment_considerations">
<title>Deployment Considerations</title>
<simpara>To implement clustering, the deployment considerations are as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>To set up a cluster with multiple nodes, we recommend that you use a minimum
of three machines. You can set up a cluster with just two nodes. However, if
one of the two nodes fail, the cluster will not be operational.</simpara>
<note>
<simpara>This is because clustering in OpenDaylight requires a majority of the
      nodes to be up and one node cannot be a majority of two nodes.</simpara>
</note>

</listitem>
<listitem>
<simpara>Every device that belongs to a cluster needs to have an identifier.
OpenDaylight uses the node&#8217;s <literal>role</literal> for this purpose. After you define the
first node&#8217;s role as <emphasis>member-1</emphasis> in the <literal>akka.conf</literal> file, OpenDaylight uses
<emphasis>member-1</emphasis> to identify that node.</simpara>
</listitem>
<listitem>
<simpara>Data shards are used to contain all or a certain segment of a OpenDaylight&#8217;s
MD-SAL datastore. For example, one shard can contain all the inventory data
while another shard contains all of the topology data.</simpara>
<simpara>If you do not specify a module in the <literal>modules.conf</literal> file and do not specify
a shard in <literal>module-shards.conf</literal>, then (by default) all the data is placed in
the default shard (which must also be defined in <literal>module-shards.conf</literal> file).
Each shard has replicas configured. You can specify the details of where the
replicas reside in <literal>module-shards.conf</literal> file.</simpara>
</listitem>
<listitem>
<simpara>If you have a three node cluster and would like to be able to tolerate any
single node crashing, a replica of every defined data shard must be running
on all three cluster nodes.</simpara>
<note>
<simpara>This is because OpenDaylight&#8217;s clustering implementation requires a
      majority of the defined shard replicas to be running in order to
      function. If you define data shard replicas on two of the cluster nodes
      and one of those nodes goes down, the corresponding data shards will not
      function.</simpara>
</note>

</listitem>
<listitem>
<simpara>If you have a three node cluster and have defined replicas for a data shard
on each of those nodes, that shard will still function even if only two of
the cluster nodes are running. Note that if one of those remaining two nodes
goes down, the shard will not be operational.</simpara>
</listitem>
<listitem>
<simpara>It is  recommended that you have multiple seed nodes configured. After a
cluster member is started, it sends a message to all of its seed nodes.
The cluster member then sends a join command to the first seed node that
responds. If none of its seed nodes reply, the cluster member repeats this
process until it successfully establishes a connection or it is shut down.</simpara>
</listitem>
<listitem>
<simpara>After a node is unreachable, it remains down for configurable period of time
(10 seconds, by default). Once a node goes down, you need to restart it so
that it can rejoin the cluster. Once a restarted node joins a cluster, it
will synchronize with the lead node automatically.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_setting_up_a_multiple_node_cluster">
<title>Setting Up a Multiple Node Cluster</title>
<simpara>To run OpenDaylight in a three node cluster, perform the following:</simpara>
<simpara>First, determine the three machines that will make up the cluster. After that,
do the following on each machine:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Copy the OpenDaylight distribution zip file to the machine.</simpara>
</listitem>
<listitem>
<simpara>Unzip the distribution.</simpara>
</listitem>
<listitem>
<simpara>Open the following .conf files:</simpara>
<itemizedlist>
<listitem>
<simpara>configuration/initial/akka.conf</simpara>
</listitem>
<listitem>
<simpara>configuration/initial/module-shards.conf</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>In each configuration file, make the following changes:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Find every instance of the following lines and replace <emphasis>127.0.0.1</emphasis> with the
hostname or IP address of the machine on which this file resides and
OpenDaylight will run:</simpara>

<literallayout class="monospaced">netty.tcp {
  hostname = "127.0.0.1"</literallayout>


<note>
<simpara>The value you need to specify will be different for each node in the
      cluster.</simpara>
</note>

</listitem>
<listitem>
<simpara>Find the following lines and replace <emphasis>127.0.0.1</emphasis> with the hostname or IP
address of any of the machines that will be part of the cluster:</simpara>

<literallayout class="monospaced">cluster {
  seed-nodes = ["akka.tcp://opendaylight-cluster-data@127.0.0.1:2550"]</literallayout>


</listitem>
<listitem>
<simpara>Find the following section and specify the role for each member node. Here
we assign the first node with the <emphasis>member-1</emphasis> role, the second node with the
<emphasis>member-2</emphasis> role, and the third node with the <emphasis>member-3</emphasis> role:</simpara>

<literallayout class="monospaced">roles = [
  "member-1"
]</literallayout>


<note>
<simpara>This step should use a different role on each node.</simpara>
</note>

</listitem>
<listitem>
<simpara>Open the configuration/initial/module-shards.conf file and update the
replicas so that each shard is replicated to all three nodes:</simpara>

<literallayout class="monospaced">replicas = [
    "member-1",
    "member-2",
    "member-3"
]</literallayout>


<simpara>For reference, view a sample config files <link linkend="_sample_config_files">below</link>.</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Move into the <literal>&lt;karaf-distribution-directory&gt;/bin</literal> directory.</simpara>
</listitem>
<listitem>
<simpara>Run the following command:</simpara>

<literallayout class="monospaced">JAVA_MAX_MEM=4G JAVA_MAX_PERM_MEM=512m ./karaf</literallayout>


</listitem>
<listitem>
<simpara>Enable clustering by running the following command at the Karaf command line:</simpara>

<literallayout class="monospaced">feature:install odl-mdsal-clustering</literallayout>


</listitem>
</orderedlist>

<simpara>OpenDaylight should now be running in a three node cluster. You can use any of
the three member nodes to access the data residing in the datastore.</simpara>
<section xml:id="_sample_config_files">
<title>Sample Config Files</title>
<formalpara>
<title>Sample <literal>akka.conf</literal> file</title>
<para>
<screen>odl-cluster-data {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  metric-capture-enabled = true

  akka {
    loglevel = "DEBUG"
    loggers = ["akka.event.slf4j.Slf4jLogger"]

    actor {

      provider = "akka.cluster.ClusterActorRefProvider"
      serializers {
                java = "akka.serialization.JavaSerializer"
                proto = "akka.remote.serialization.ProtobufSerializer"
              }

              serialization-bindings {
                  "com.google.protobuf.Message" = proto

              }
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "10.194.189.96"
        port = 2550
        maximum-frame-size = 419430400
        send-buffer-size = 52428800
        receive-buffer-size = 52428800
      }
    }

    cluster {
      seed-nodes = ["akka.tcp://opendaylight-cluster-data@10.194.189.96:2550"]

      auto-down-unreachable-after = 10s

      roles = [
        "member-1"
      ]

    }
  }
}

odl-cluster-rpc {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  metric-capture-enabled = true

  akka {
    loglevel = "INFO"
    loggers = ["akka.event.slf4j.Slf4jLogger"]

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "10.194.189.96"
        port = 2551
      }
    }

    cluster {
      seed-nodes = ["akka.tcp://opendaylight-cluster-rpc@10.194.189.96:2551"]

      auto-down-unreachable-after = 10s
    }
  }
}</screen>
</para>
</formalpara>

<formalpara>
<title>Sample <literal>module-shards.conf</literal> file</title>
<para>
<screen>module-shards = [
    {
        name = "default"
        shards = [
            {
                name="default"
                replicas = [
                    "member-1",
                    "member-2",
                    "member-3"
                ]
            }
        ]
    },
    {
        name = "topology"
        shards = [
            {
                name="topology"
                replicas = [
                    "member-1",
                    "member-2",
                    "member-3"
                ]
            }
        ]
    },
    {
        name = "inventory"
        shards = [
            {
                name="inventory"
                replicas = [
                    "member-1",
                    "member-2",
                    "member-3"
                ]
            }
        ]
    },
    {
         name = "toaster"
         shards = [
             {
                 name="toaster"
                 replicas = [
                    "member-1",
                    "member-2",
                    "member-3"
                 ]
             }
         ]
    }
]</screen>
</para>
</formalpara>

</section>
</section>
</section>
</chapter>
<chapter xml:id="_security_considerations">
<title>Security Considerations</title>
<simpara>This document discusses the various security issues that might affect
OpenDaylight. The document also lists specific recommendations to
mitigate security risks.</simpara>
<simpara>This document also contains information about the corrective steps
you can take if you discover a security issue with
OpenDaylight, and if necessary, contact the Security Response Team,
which is tasked with identifying and resolving security threats.</simpara>
<section xml:id="_overview_of_opendaylight_security">
<title>Overview of OpenDaylight Security</title>
<simpara>There are many different kinds of security vulnerabilities that could affect
an OpenDaylight deployment, but this guide focuses on those where (a) the
servers, virtual machines or other devices running OpenDaylight have been
properly physically (or virtually in the case of VMs) secured against untrusted
individuals and (b) individuals who have access, either via remote logins or
physically, will not attempt to attack or subvert the deployment intentionally
or otherwise.</simpara>
<simpara>While those attack vectors are real, they are out of the scope of this
document.</simpara>
<simpara>What remains in scope is attacks launched from a server, virtual machine, or
device other than the one running OpenDaylight where the attack does not have
valid credentials to access the OpenDaylight deployment.</simpara>
<simpara>The rest of this document gives specific recommendations for deploying
OpenDaylight in a secure manner, but first we highlight some high-level
security advantages of OpenDaylight.</simpara>
<itemizedlist>
<listitem>
<simpara>Separating the control and management planes from the data plane (both
logically and, in many cases, physically) allows possible security threats to
be forced into a smaller attack surface.</simpara>
</listitem>
<listitem>
<simpara>Having centralized information and network control gives network
administrators more visibility and control over the entire network, enabling
them to make better decisions faster. At the same time,
centralization of network control can be an advantage only if access to that
control is secure.</simpara>
<note>
<simpara>While both previous advantages improve security, they also make
      an OpenDaylight deployment an attractive target for attack making
      understanding these security considerations even more important.</simpara>
</note>

</listitem>
<listitem>
<simpara>The ability to more rapidly evolve southbound protocols and how they are used
provides more and faster mechanisms to enact appropriate security mitigations
and remediations.</simpara>
</listitem>
<listitem>
<simpara>OpenDaylight is built from OSGi bundles and the Karaf Java container. Both
Karaf and OSGi provide some level of isolation with explicit code boundaries,
package imports, package exports, and other security-related features.</simpara>
</listitem>
<listitem>
<simpara>OpenDaylight has a history of rapidly addressing known vulnerabilities and
a well-defined process for reporting and dealing with them.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_opendaylight_security_resources">
<title>OpenDaylight Security Resources</title>
<itemizedlist>
<listitem>
<simpara>If you have any security issues, you can send a mail to
<emphasis role="strong">security@lists.opendaylight.org</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>For the list of current OpenDaylight security issues that are either being
fixed or resolved, refer to
<link xlink:href="https://wiki.opendaylight.org/view/Security_Advisories">https://wiki.opendaylight.org/view/Security_Advisories</link>.</simpara>
</listitem>
<listitem>
<simpara>To learn more about the OpenDaylight security issues policies and procedure,
refer to
<link xlink:href="https://wiki.opendaylight.org/view/Security:Main">https://wiki.opendaylight.org/view/Security:Main</link></simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_deployment_recommendations">
<title>Deployment Recommendations</title>
<simpara>We recommend that you follow the deployment guidelines in setting up
OpenDaylight to minimize security threats.</simpara>
<itemizedlist>
<listitem>
<simpara>The default credentials should be changed before deploying OpenDaylight.</simpara>
</listitem>
<listitem>
<simpara>OpenDaylight should be deployed in a private network that cannot be accessed
from the internet.</simpara>
</listitem>
<listitem>
<simpara>Separate the data network (that connects devices using the network) from the
management network (that connects the network devices to OpenDaylight).</simpara>
<note>
<simpara>Deploying OpenDaylight on a separate, private management network does not
      eliminate threats, but only mitigates them. By construction, some
      messages must flow from the data network to the management network, e.g.,
      OpenFlow <literal>packet_in</literal> messages, and these create an attack surface even if
      it is a small one.</simpara>
</note>

</listitem>
<listitem>
<simpara>Implement an authentication policy for devices that connect to both the data
and management network. These are the devices which bridge, likely untrusted,
traffic from the data network to the management network.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_securing_osgi_bundles">
<title>Securing OSGi bundles</title>
<simpara>OSGi is a Java-specific framework that improves the way that Java classes
interact within a single JVM. It provides an enhanced version of the
<emphasis role="strong">java.lang.SecurityManager</emphasis> (ConditionalPermissionAdmin) in terms of security.</simpara>
<simpara>Java provides a security framework that allows a security policy to grant
permissions, such as reading a file or opening a network connection, to
specific code. The code maybe classes from the jarfile loaded from a specific
URL, or a class signed by a specific key. OSGi builds on the standard Java
security model to add the following features:</simpara>
<itemizedlist>
<listitem>
<simpara>A set of OSGi-specific permission types, such as one that grants the right
to register an OSGi service or get an OSGi service from the service registry.</simpara>
</listitem>
<listitem>
<simpara>The ability to dynamically modify permissions at runtime. This includes the
ability to specify permissions by using code rather than a text configuration
file.</simpara>
</listitem>
<listitem>
<simpara>A flexible predicate-based approach to determining which rules are
applicable to which <emphasis role="strong">ProtectionDomain</emphasis>. This approach is much more powerful
than the standard Java security policy which can only grant rights based on a
jarfile URL or class signature. A few standard predicates are provided,
including selecting rules based upon bundle symbolic-name.</simpara>
</listitem>
<listitem>
<simpara>Support for bundle <emphasis role="strong">local permissions</emphasis> policies with optional further
constraints such as <emphasis role="strong">DENY</emphasis> operations. Most of this functionality is accessed
by using the <emphasis role="strong">OSGi ConditionalPermissionAdmin</emphasis> service which is part of the
OSGi core and can be obtained from the OSGi service registry. The
<literal>ConditionalPermissionAdmin</literal> API replaces the earlier <emphasis role="strong">PermissionAdmin</emphasis> API.</simpara>
</listitem>
</itemizedlist>

<simpara>For more information, refer to <link xlink:href="http://www.osgi.org/Main/HomePage">http://www.osgi.org/Main/HomePage</link>.</simpara>
</section>
<section xml:id="_securing_the_karaf_container">
<title>Securing the Karaf container</title>
<simpara>Apache Karaf is a OSGi-based runtime platform which provides a lightweight
container for OpenDaylight and applications. Apache Karaf uses
either Apache Felix Framework or Eclipse Equinox OSGi frameworks, and provide
additional features on top of the framework.</simpara>
<simpara>Apache Karaf provides a security framework based on Java Authentication and
Authorization Service (JAAS) in compliance with OSGi recommendations,
while providing RBAC (Role-Based Access Control) mechanism for the console and
Java Management Extensions (JMX).</simpara>
<simpara>The Apache Karaf security framework is used internally to control the access
to the following components:</simpara>
<itemizedlist>
<listitem>
<simpara>OSGi services</simpara>
</listitem>
<listitem>
<simpara>console commands</simpara>
</listitem>
<listitem>
<simpara>JMX layer</simpara>
</listitem>
<listitem>
<simpara>WebConsole</simpara>
</listitem>
</itemizedlist>

<simpara>The remote management capabilities are present in Apache Karaf by default,
however they can be disabled by using various configuration alterations. These
configuration options may be applied to the OpenDaylight Karaf distribution.</simpara>
<note>
<simpara>Refer to the following list of publications for more information on
implementing security for the Karaf container.</simpara>
</note>

<itemizedlist>
<listitem>
<simpara>For role-based JMX administration, refer to
<link xlink:href="http://karaf.apache.org/manual/latest/users-guide/monitoring.html">http://karaf.apache.org/manual/latest/users-guide/monitoring.html</link>.</simpara>
</listitem>
<listitem>
<simpara>For remote SSH access configuration, refer to
<link xlink:href="http://karaf.apache.org/manual/latest/users-guide/remote.html">http://karaf.apache.org/manual/latest/users-guide/remote.html</link>.</simpara>
</listitem>
<listitem>
<simpara>For WebConsole access, refer to
<link xlink:href="http://karaf.apache.org/manual/latest/users-guide/webconsole.html">http://karaf.apache.org/manual/latest/users-guide/webconsole.html</link>.</simpara>
</listitem>
<listitem>
<simpara>For Karaf security features, refer to
<link xlink:href="http://karaf.apache.org/manual/latest/developers-guide/security-framework.html">http://karaf.apache.org/manual/latest/developers-guide/security-framework.html</link>.</simpara>
</listitem>
</itemizedlist>

<section xml:id="_disabling_the_remote_shutdown_port">
<title>Disabling the remote shutdown port</title>
<simpara>You can lock down your deployment post installation. Set
karaf.shutdown.port=-1 in <literal>etc/custom.properties or etc/config.properties</literal> to
disable the remote shutdown port.</simpara>
</section>
</section>
<section xml:id="_securing_southbound_plugins">
<title>Securing Southbound Plugins</title>
<simpara>Many individual southbound plugins provide mechanisms to secure their
communication with network devices. For example, the OpenFlow plugin supports
TLS connections with bi-directional authentication and the NETCONF plugin
supports connecting over SSH. Meanwhile, the Unified Secure Channel plugin
provides a way to form secure, remote connections for supported devices.</simpara>
<simpara>When deploying OpenDaylight, you should carefully investigate the secure
mechanisms to connect to devices using the relevant plugins.</simpara>
</section>
<section xml:id="_securing_opendaylight_using_aaa">
<title>Securing OpenDaylight using AAA</title>
<simpara>AAA stands for Authentication, Authorization, and Accounting. All three of
can help improve the security posture of and OpenDaylight deployment. In this
release, only authentication is fully supported, while authorization is an
experimental feature and accounting remains a work in progress.</simpara>
<simpara>The vast majority of OpenDaylight&#8217;s northbound APIs (and all RESTCONF APIs) are
protected by AAA by default when installing the <literal>odl-restconf</literal> feature. In the
cases that APIs are <emphasis role="strong">not</emphasis> protected by AAA, this will be noted in the
per-project release notes.</simpara>
<simpara>By default, OpenDaylight has only one user account with the username and
password <emphasis>admin</emphasis>. This should be changed before deploying OpenDaylight.</simpara>
</section>
<section xml:id="_security_considerations_for_clustering">
<title>Security Considerations for Clustering</title>
<simpara>While OpenDaylight clustering provides many benefits including high
availability, scale-out performance, and data durability, it also opens a new
attack surface in the form of the messages exchanged between the various
instances of OpenDaylight in the cluster. In the current OpenDaylight release,
these messages are neither encrypted nor authenticated meaning that anyone with
access to the management network where OpenDaylight exchanges these clustering
messages can forge and/or read the messages. This means that if clustering is
enabled, it is even more important that the management network be kept secure
from any untrusted entities.</simpara>
</section>
</chapter>
</part>
<part xml:id="_project_specific_installation_guides">
<title>Project-specific Installation Guides</title>
<chapter xml:id="_opflex_agent_ovs_install_guide">
<title>OpFlex agent-ovs Install Guide</title>
<section xml:id="_required_packages">
<title>Required Packages</title>
<simpara>You&#8217;ll need to install the following packages and their dependencies:</simpara>
<itemizedlist>
<listitem>
<simpara>libuv</simpara>
</listitem>
<listitem>
<simpara>openvswitch-gbp</simpara>
</listitem>
<listitem>
<simpara>openvswitch-gbp-lib</simpara>
</listitem>
<listitem>
<simpara>openvswitch-gbp-kmod</simpara>
</listitem>
<listitem>
<simpara>libopflex</simpara>
</listitem>
<listitem>
<simpara>libmodelgbp</simpara>
</listitem>
<listitem>
<simpara>agent-ovs</simpara>
</listitem>
</itemizedlist>

<simpara>Packages are available for Red Hat Enterprise Linux 7 and Ubuntu 14.04
LTS.  Some of the examples below are specific to RHEL7 but you can run
the equivalent commands for upstart instead of systemd.</simpara>
<simpara>Note that many of these steps may be performed automatically if you&#8217;re
deploying this along with a larger orchestration system.</simpara>
</section>
<section xml:id="_host_networking_configuration">
<title>Host Networking Configuration</title>
<simpara>You&#8217;ll need to set up your VM host uplink interface.  You should
ensure that the MTU of the underlying network is sufficient to handle
tunneled traffic.  We will use an example of setting up <emphasis role="strong">eth0</emphasis> as your
uplink interface with a vlan of 4093 used for the networking control
infrastructure and tunnel data plane.</simpara>
<simpara>We just need to set the MTU and disable IPv4 and IPv6
autoconfiguration. The MTU needs to be large enough to allow both the
VXLAN header and VLAN tags to pass through without fragmenting for
best performance. We&#8217;ll use 1600 bytes which should be sufficient
assuming you are using a default 1500 byte MTU on your virtual machine
traffic. If you already have any NetworkManager connections configured
for your uplink interface find the connection name and proceed to the
next step. Otherwise, create a connection with (be sure to update the
variable UPLINK_IFACE as needed):</simpara>
<screen>UPLINK_IFACE=eth0
nmcli c add type ethernet ifname $UPLINK_IFACE</screen>

<simpara>Now, configure your interface as follows:</simpara>
<screen>CONNECTION_NAME="ethernet-$UPLINK_IFACE"
nmcli connection mod "$CONNECTION_NAME" connection.autoconnect yes \
    ipv4.method link-local \
    ipv6.method ignore \
    802-3-ethernet.mtu 9000 \
    ipv4.routes '224.0.0.0/4 0.0.0.0 2000'</screen>

<simpara>Then bring up the interface with</simpara>
<screen>nmcli connection up "$CONNECTION_NAME"</screen>

<simpara>Next, create the infrastructure interface using the infrastructure
VLAN (4093 by default). We&#8217;ll need to create a vlan subinterface of
your uplink interface, the configure DHCP on that interface. Run the
following commands. Be sure to replace the variable values if needed. If
you&#8217;re not using NIC teaming, replace the variable team0 below</simpara>
<screen>UPLINK_IFACE=team0
INFRA_VLAN=4093
nmcli connection add type vlan ifname $UPLINK_IFACE.$INFRA_VLAN dev $UPLINK_IFACE id $INFRA_VLAN
nmcli connection mod vlan-$UPLINK_IFACE.$INFRA_VLAN \
    ethernet.mtu 1600 ipv4.routes '224.0.0.0/4 0.0.0.0 1000'
sed "s/CLIENT_ID/01:$(ip link show $UPLINK_IFACE | awk '/ether/ {print $2}')/" \
    &gt; /etc/dhcp/dhclient-$UPLINK_IFACE.$INFRA_VLAN.conf &lt;&lt;EOF
send dhcp-client-identifier CLIENT_ID;
request subnet-mask, domain-name, domain-name-servers, host-name;
EOF</screen>

<simpara>Now bring up the new interface with:</simpara>
<screen>nmcli connection up vlan-$UPLINK_IFACE.$INFRA_VLAN</screen>

<simpara>If you were successful, you should be able to see an IP address when you run:</simpara>
<screen>ip addr show dev $UPLINK_IFACE.$INFRA_VLAN</screen>

</section>
<section xml:id="_ovs_bridge_configuration">
<title>OVS Bridge Configuration</title>
<simpara>We&#8217;ll need to configure an OVS bridge which will handle the traffic
for any virtual machines or containers that are hosted on the VM
host. First, enable the openvswitch service and start it:</simpara>
<screen># systemctl enable openvswitch
ln -s '/usr/lib/systemd/system/openvswitch.service' '/etc/systemd/system/multi-user.target.wants/openvswitch.service'
# systemctl start openvswitch
# systemctl status openvswitch
openvswitch.service - Open vSwitch
   Loaded: loaded (/usr/lib/systemd/system/openvswitch.service; enabled)
   Active: active (exited) since Fri 2014-12-12 17:20:13 PST; 3s ago
  Process: 3053 ExecStart=/bin/true (code=exited, status=0/SUCCESS)
 Main PID: 3053 (code=exited, status=0/SUCCESS)
Dec 12 17:20:13 ovs-server.cisco.com systemd[1]: Started Open vSwitch.</screen>

<simpara>Next, we can create an OVS bridge (you may wish to use a different
bridge name):</simpara>
<screen># ovs-vsctl add-br br0
# ovs-vsctl show
34aa83d7-b918-4e49-bcec-1b521acd1962
    Bridge "br0"
        Port "br0"
            Interface "br0"
                type: internal
    ovs_version: "2.3.90"</screen>

<simpara>Next, we configure a tunnel interface on our new bridge as follows:</simpara>
<screen># ovs-vsctl add-port br0 br0_vxlan0 -- \
    set Interface br0_vxlan0 type=vxlan \
    options:remote_ip=flow options:key=flow options:dst_port=8472
# ovs-vsctl show
34aa83d7-b918-4e49-bcec-1b521acd1962
    Bridge "br0"
        Port "br0_vxlan0"
            Interface "br0_vxlan0"
                type: vxlan
                options: {dst_port="8472", key=flow, remote_ip=flow}
        Port "br0"
            Interface "br0"
                type: internal
    ovs_version: "2.3.90"</screen>

<simpara>Open vSwitch is now configured and ready.</simpara>
</section>
<section xml:id="_agent_configuration">
<title>Agent Configuration</title>
<simpara>Before enabling the agent, we&#8217;ll need to edit its configuration file,
which is located at "/etc/opflex-agent-ovs/opflex-agent-ovs.conf".</simpara>
<simpara>First, we&#8217;ll configure the Opflex protocol parameters. If you&#8217;re using
an ACI fabric, you&#8217;ll need the OpFlex domain from the ACI
configuration, which is the name of the VMM domain you mapped to the
interface for this hypervisor. Set the "domain" field to this
value. Next, set the "name" field to a hostname or other unique
identifier for the VM host. Finally, set the "peers" list to contain
the fixed static anycast peer address of 10.0.0.30 and port 8009. Here
is an example of a completed section (bold text shows areas you&#8217;ll
need to modify):</simpara>
<screen>"opflex": {
    // The globally unique policy domain for this agent.
    "domain": "[CHANGE ME]",

    // The unique name in the policy domain for this agent.
    "name": "[CHANGE ME]",

    // a list of peers to connect to, by hostname and port.  One
    // peer, or an anycast pseudo-peer, is sufficient to bootstrap
    // the connection without needing an exhaustive list of all
    // peers.
    "peers": [
        {"hostname": "10.0.0.30", "port": 8009}
    ],

    "ssl": {
        // SSL mode.  Possible values:
        // disabled: communicate without encryption
        // encrypted: encrypt but do not verify peers
        // secure: encrypt and verify peer certificates
        "mode": "encrypted",

        // The path to a directory containing trusted certificate
        // authority public certificates, or a file containing a
        // specific CA certificate.
        "ca-store": "/etc/ssl/certs/"
    }
},</screen>

<simpara>Next, configure the appropriate policy renderer for the ACI
fabric. You&#8217;ll want to use a stitched-mode renderer. You&#8217;ll need to
configure the bridge name and the uplink interface name. The remote
anycast IP address will need to be obtained from the ACI configuration
console, but unless the configuration is unusual, it will be
10.0.0.32.</simpara>
<screen>// Renderers enforce policy obtained via OpFlex.
"renderers": {
    // Stitched-mode renderer for interoperating with a
    // hardware fabric such as ACI
    "stitched-mode": {
        "ovs-bridge-name": "br0",

        // Set encapsulation type.  Must set either vxlan or vlan.
        "encap": {
            // Encapsulate traffic with VXLAN.
            "vxlan" : {
                // The name of the tunnel interface in OVS
                "encap-iface": "br0_vxlan0",

                // The name of the interface whose IP should be used
                // as the source IP in encapsulated traffic.
                "uplink-iface": "eth0.4093",

                // The vlan tag, if any, used on the uplink interface.
                // Set to zero or omit if the uplink is untagged.
                "uplink-vlan": 4093,

                // The IP address used for the destination IP in
                // the encapsulated traffic.  This should be an
                // anycast IP address understood by the upstream
                // stitched-mode fabric.
                "remote-ip": "10.0.0.32"
            }
        },
        // Configure forwarding policy
        "forwarding": {
            // Configure the virtual distributed router
            "virtual-router": {
                // Enable virtual distributed router.  Set to true
                // to enable or false to disable.  Default true.
                "enabled": true,

                // Override MAC address for virtual router.
                // Default is "00:22:bd:f8:19:ff"
                "mac": "00:22:bd:f8:19:ff",

                // Configure IPv6-related settings for the virtual
                // router
                "ipv6" : {
                    // Send router advertisement messages in
                    // response to router solicitation requests as
                    // well as unsolicited advertisements.
                    "router-advertisement": true
                }
            },

            // Configure virtual distributed DHCP server
            "virtual-dhcp": {
                // Enable virtual distributed DHCP server.  Set to
                // true to enable or false to disable.  Default
                // true.
                "enabled": true,

                // Override MAC address for virtual dhcp server.
                // Default is "00:22:bd:f8:19:ff"
                "mac": "00:22:bd:f8:19:ff"
            }
        },

        // Location to store cached IDs for managing flow state
        "flowid-cache-dir": "DEFAULT_FLOWID_CACHE_DIR"
    }
}</screen>

<simpara>Finally, enable the agent service:</simpara>
<screen># systemctl enable agent-ovs
ln -s '/usr/lib/systemd/system/agent-ovs.service' '/etc/systemd/system/multi-user.target.wants/agent-ovs.service'
# systemctl start agent-ovs
# systemctl status agent-ovs
agent-ovs.service - Opflex OVS Agent
   Loaded: loaded (/usr/lib/systemd/system/agent-ovs.service; enabled)
   Active: active (running) since Mon 2014-12-15 10:03:42 PST; 5min ago
 Main PID: 6062 (agent_ovs)
   CGroup: /system.slice/agent-ovs.service
           └─6062 /usr/bin/agent_ovs</screen>

<simpara>The agent is now running and ready to enforce policy. You can add
endpoints to the local VM hosts using the OpFlex Group-based policy
plugin from OpenStack, or manually.</simpara>
</section>
</chapter>
<chapter xml:id="_ovsdb_openstack_installation_guide">
<title>OVSDB OpenStack Installation Guide</title>
<section xml:id="_overview">
<title>Overview</title>
<simpara>This guide is geared towards installing OpenDaylight to use the OVSDB project to provide Neutron support for OpenStack.</simpara>
<simpara>Open vSwitch (OVS) is generally accepted as the unofficial standard for Virtual Switching in the Open hypervisor based solutions.
For information on OVS, see <link xlink:href="http://openvswitch.org/">Open vSwitch</link>.</simpara>
<simpara>With OpenStack within the SDN context, controllers and applications interact using two channels: OpenFlow and OVSDB. OpenFlow addresses the forwarding-side of the OVS functionality. OVSDB, on the other hand, addresses the management-plane.
A simple and concise overview of Open Virtual Switch Database (OVSDB) is available at: <link xlink:href="http://networkstatic.net/getting-started-ovsdb/">http://networkstatic.net/getting-started-ovsdb/</link></simpara>
</section>
<section xml:id="_preparing_for_installation">
<title>Preparing for Installation</title>
<simpara>Follow the instructions in <link linkend="_getting_and_installing_opendaylight">Getting and Installing OpenDaylight</link>.</simpara>
</section>
<section xml:id="_installing_ovsdb_openstack">
<title>Installing OVSDB OpenStack</title>
<simpara>Install the required features with the following command:</simpara>
<screen>feature:install odl-ovsdb-openstack</screen>

<section xml:id="_sample_output_from_the_karaf_console">
<title>Sample output from the Karaf console</title>
<screen>opendaylight-user@root&gt;feature:list -i | grep ovsdb
odl-ovsdb-southbound-api             | 1.1.0-SNAPSHOT   | x         | odl-ovsdb-southbound-1.1.0-SNAPSHOT
OpenDaylight :: southbound :: api
odl-ovsdb-southbound-impl            | 1.1.0-SNAPSHOT   | x         | odl-ovsdb-southbound-1.1.0-SNAPSHOT
OpenDaylight :: southbound :: impl
odl-ovsdb-southbound-impl-rest       | 1.1.0-SNAPSHOT   | x         | odl-ovsdb-southbound-1.1.0-SNAPSHOT
OpenDaylight :: southbound :: impl :: REST
odl-ovsdb-southbound-impl-ui         | 1.1.0-SNAPSHOT   | x         | odl-ovsdb-southbound-1.1.0-SNAPSHOT
OpenDaylight :: southbound :: impl :: UI
odl-ovsdb-openstack                  | 1.1.0-SNAPSHOT   | x         | ovsdb-1.1.0-SNAPSHOT
OpenDaylight :: OVSDB :: OpenStack Network Virtual</screen>

</section>
</section>
<section xml:id="_verifying_your_installation">
<title>Verifying your Installation</title>
<simpara>To verify that the installation was successful, use the following command in karaf and check that there are no errors
logs relating to odl-ovsdb-openstack.</simpara>
<screen>log:display</screen>

<section xml:id="_troubleshooting">
<title>Troubleshooting</title>
<simpara>There is no easy way to troubleshoot an installation of odl-ovsdb-openstack. Perhaps a combination of
log:display | grep -i ovsdb in karaf, Open vSwitch commands (ovs-vsctl) and OpenStack logs will be useful but will not
explain everything.</simpara>
</section>
</section>
<section xml:id="_uninstalling_ovsdb_openstack">
<title>Uninstalling OVSDB OpenStack</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Shutdown the karaf instance:</simpara>
<screen>system:shutdown</screen>

</listitem>
<listitem>
<simpara>Remove what is in the /data folder of the OpenDaylight Distribution.</simpara>
</listitem>
</orderedlist>

</section>
</chapter>
<chapter xml:id="_ovsdb_service_function_chaining_installation_guide">
<title>OVSDB Service Function Chaining Installation Guide</title>
<section xml:id="_overview_2">
<title>Overview</title>
<simpara>TBD</simpara>
</section>
<section xml:id="_preparing_for_installation_2">
<title>Preparing for Installation</title>
<simpara>Follow the instructions in <link linkend="_getting_and_installing_opendaylight">Getting and Installing OpenDaylight</link>.</simpara>
</section>
<section xml:id="_installing_ovsdb_service_function_chaining">
<title>Installing OVSDB Service Function Chaining</title>
<simpara>Install the required features with the following command:</simpara>
<screen>feature:install odl-ovsdb-sfc-ui</screen>

<section xml:id="_sample_output_from_the_karaf_console_2">
<title>Sample output from the Karaf console</title>
<screen>TBD</screen>

</section>
</section>
<section xml:id="_verifying_your_installation_2">
<title>Verifying your Installation</title>
<simpara>To verify that the installation was successful, use the following command in karaf and check that there are
no error logs relating to odl-ovsdb-sfc</simpara>
<screen>log:display</screen>

<section xml:id="_troubleshooting_2">
<title>Troubleshooting</title>
<simpara>TBD</simpara>
</section>
</section>
<section xml:id="_uninstalling_ovsdb_service_function_chaining">
<title>Uninstalling OVSDB Service Function Chaining</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Shutdown the karaf instance:</simpara>
<screen>system:shutdown</screen>

</listitem>
<listitem>
<simpara>Remove what is in the /data folder of the OpenDaylight Distribution.</simpara>
</listitem>
</orderedlist>

</section>
</chapter>
<chapter xml:id="_ovsdb_netvirt_hardware_vtep_installation_guide">
<title>OVSDB NetVirt Hardware VTEP Installation Guide</title>
<section xml:id="_overview_3">
<title>Overview</title>
<simpara>TBD</simpara>
</section>
<section xml:id="_preparing_for_installation_3">
<title>Preparing for Installation</title>
<simpara>Follow the instructions in <link linkend="_getting_and_installing_opendaylight">Getting and Installing OpenDaylight</link>.</simpara>
</section>
<section xml:id="_installing_ovsdb_netvirt_hardware_vtep">
<title>Installing OVSDB NetVirt Hardware VTEP</title>
<simpara>Install the required features with the following command:</simpara>
<screen>feature:install odl-ovsdb-netvirt-hwvtep</screen>

<section xml:id="_sample_output_from_the_karaf_console_3">
<title>Sample output from the Karaf console</title>
<screen>TBD</screen>

</section>
</section>
<section xml:id="_verifying_your_installation_3">
<title>Verifying your Installation</title>
<simpara>To verify that the installation was successful, use the following command in karaf and check that there
are no error logs relating to odl-ovsdb-netvirt-hwvtep</simpara>
<screen>log:display</screen>

<section xml:id="_troubleshooting_3">
<title>Troubleshooting</title>
<simpara>TBD</simpara>
</section>
</section>
<section xml:id="_uninstalling_ovsdb_netvirt_hardware_vtep">
<title>Uninstalling OVSDB NetVirt Hardware VTEP</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Shutdown the karaf instance:</simpara>
<screen>system:shutdown</screen>

</listitem>
<listitem>
<simpara>Remove what is in the /data folder of the OpenDaylight Distribution.</simpara>
</listitem>
</orderedlist>

</section>
</chapter>
<chapter xml:id="_tsdr_installation_guide">
<title>TSDR Installation Guide</title>
<simpara>This document is for the user to install the artifacts that are needed
for using Time Series Data Repository (TSDR) functionality in the ODL
Controller by enabling either an HSQLDB, HBase, or Cassandra Data Store.</simpara>
<section xml:id="_overview_4">
<title>Overview</title>
<simpara>The Time Series Data Repository (TSDR) project in OpenDaylight (ODL) creates a framework for collecting, storing, querying, and maintaining time series data in the OpenDaylight SDN controller. Please refer to the User Guide for the detailed description of the functionality of the project and how to use the corresponding features provided in TSDR.</simpara>
</section>
<section xml:id="_pre_requisites_for_installing_tsdr">
<title>Pre Requisites for Installing TSDR</title>
<simpara>The software requirements for TSDR HBase Data Store are as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>In the case when the user chooses HBase or Cassandra data store, besides the software that ODL requires, we also require HBase and Cassandra database running in single node deployment scenario.</simpara>
</listitem>
</itemizedlist>

<simpara>No additional software is required for the HSQLDB Data Stores.</simpara>
</section>
<section xml:id="_preparing_for_installation_4">
<title>Preparing for Installation</title>
<itemizedlist>
<listitem>
<simpara>When using HBase data store,  download HBase from the following website:</simpara>

<literallayout class="monospaced">http://archive.apache.org/dist/hbase/hbase-0.94.15/</literallayout>


</listitem>
<listitem>
<simpara>When using Cassandra data store, download Cassandra from the following website:</simpara>

<literallayout class="monospaced">http://www.eu.apache.org/dist/cassandra/2.1.10/</literallayout>


</listitem>
<listitem>
<simpara>No additional steps are required to install the TSDR HSQL Data Store.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_installing_tsdr_data_stores">
<title>Installing TSDR Data Stores</title>
<section xml:id="_installing_hsqldb_data_store">
<title>Installing HSQLDB Data Store</title>
<simpara>Once OpenDaylight distribution is up, from karaf console install the HSQLDB data store using the following command:</simpara>

<literallayout class="monospaced">feature:install odl-tsdr-hsqldb-all</literallayout>


<simpara>This will install hsqldb related dependency features (and can take sometime) as well as openflow statistics collector before returning control to the console.
e</simpara>
</section>
<section xml:id="_installing_hbase_data_store">
<title>Installing HBase Data Store</title>
<simpara>Installing TSDR HBase Data Store contains two steps:</simpara>
<itemizedlist>
<listitem>
<simpara>Installing HBase server, and</simpara>
</listitem>
<listitem>
<simpara>Installing TSDR HBase Data Store features from ODL Karaf console.</simpara>
</listitem>
</itemizedlist>

<simpara>In Beryllium, we only support HBase single node running together on the same machine as OpenDaylight. Therefore, follow the steps to download and install HBase server onto the same machine as where OpenDaylight is running:</simpara>
<itemizedlist>
<listitem>
<simpara>Create a folder in Linux operating system for the HBase server.</simpara>
</listitem>
</itemizedlist>

<simpara>For example, create an hbase directory under /usr/lib:</simpara>

<literallayout class="monospaced">mkdir /usr/lib/hbase</literallayout>


<itemizedlist>
<listitem>
<simpara>Unzip the downloaded HBase server tar file.</simpara>
</listitem>
</itemizedlist>

<simpara>Run the following command to unzip the installation package:</simpara>

<literallayout class="monospaced">tar xvf &lt;hbase-installer-name&gt;  /usr/lib/hbase</literallayout>


<itemizedlist>
<listitem>
<simpara>Make proper changes in hbase-site.xml</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Under &lt;hbase-install-directory&gt;/conf/, there is a hbase-site.xml. Although it is not recommended, an experienced user with HBase can modify the data directory for hbase server to store the data.</simpara>
</listitem>
<listitem>
<simpara>Modify the value of the property with name "hbase.rootdir" in the file to reflect the desired file directory for storing hbase data.</simpara>
</listitem>
</orderedlist>

</listitem>
</itemizedlist>

<simpara>The following is an example of the file:</simpara>

<literallayout class="monospaced">&lt;configuration&gt;
  &lt;property&gt;
    &lt;name&gt;hbase.rootdir&lt;/name&gt;
    &lt;value&gt;file:///usr/lib/hbase/data&lt;/value&gt;
  &lt;/property&gt;
  &lt;property&gt;
    &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;
    &lt;value&gt;/usr/lib/hbase/zookeeper&lt;/value&gt;
  &lt;/property&gt;
&lt;/configuration&gt;</literallayout>


<itemizedlist>
<listitem>
<simpara>start hbase server</simpara>

<literallayout class="monospaced">cd &lt;hbase-installation-directory&gt;
./start-hbase.sh</literallayout>


</listitem>
<listitem>
<simpara>start hbase shell</simpara>

<literallayout class="monospaced">cd &lt;hbase-insatllation-directory&gt;
./hbase shell</literallayout>


</listitem>
<listitem>
<simpara>start Karaf console</simpara>
</listitem>
<listitem>
<simpara>install hbase data store feature from Karaf console</simpara>

<literallayout class="monospaced">feature:install odl-tsdr-hbase</literallayout>


</listitem>
</itemizedlist>

</section>
<section xml:id="_installing_cassandra_data_store">
<title>Installing Cassandra Data Store</title>
<simpara>Installing TSDR Cassandra Data Store contains two steps:</simpara>
<itemizedlist>
<listitem>
<simpara>Installing Cassandra server, and</simpara>
</listitem>
<listitem>
<simpara>Installing TSDR Cassandra Data Store features from ODL Karaf console.</simpara>
</listitem>
</itemizedlist>

<simpara>In Beryllium, we only support Cassadra single node running together on the same machine as OpenDaylight. Therefore, follow these steps to download and install Cassandra server onto the same machine as where OpenDaylight is running:</simpara>
<simpara>Install Cassandra (latest stable version) by downloading the zip file and untar the tar ball to cassandra/ directory on the testing machine.</simpara>

<literallayout class="monospaced">mkdir cassandra
wget http://www.eu.apache.org/dist/cassandra/2.1.10/apache-cassandra-2.1.10-bin.tar.gz[2.1.10 is current stable version, it can vary]
mv apache-cassandra-2.1.10-bin.tar.gz cassandra/
cd cassandra
tar -xvzf apache-cassandra-2.1.10-bin.tar.gz</literallayout>


<simpara>Start Cassandra from cassandra directory by running:</simpara>

<literallayout class="monospaced">./apache-cassandra-2.1.10/bin/cassandra</literallayout>


<simpara>Start cassandra shell by running:</simpara>

<literallayout class="monospaced">./apache-cassandra-2.1.10/bin/cqlsh</literallayout>


<simpara>Start Karaf according to the instructions above.</simpara>
<simpara>Install Cassandra data store feature from Karaf console:</simpara>

<literallayout class="monospaced">feature:install odl-tsdr-cassandra</literallayout>


</section>
</section>
<section xml:id="_verifying_your_installation_4">
<title>Verifying your Installation</title>
<simpara>After the TSDR data store is installed, no matter whether it is HBase data store, Cassandra data store, or HSQLDB data store, the user can verify the installation with the following steps.</simpara>
<itemizedlist>
<listitem>
<simpara>Verify if the following two tsdr commands are available from Karaf console:</simpara>
<itemizedlist>
<listitem>
<simpara>tsdr:list</simpara>
</listitem>
<listitem>
<simpara>tsdr:purgeAll</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Verify if openflow statisitcs data can be received successfully:</simpara>
<itemizedlist>
<listitem>
<simpara>Run "feature:install odl-tsdr-openflow-statistics-collector" from Karaf.</simpara>
</listitem>
<listitem>
<simpara>Run mininet to connect to ODL controller. For example, use the following command to start a three node topology:</simpara>

<literallayout class="monospaced">"mn --topo single,3  --controller 'remote,ip=172.17.252.210,port=6653' --switch ovsk,protocols=OpenFlow13"</literallayout>


</listitem>
<listitem>
<simpara>From Karaf console, the user should be able to retrieve the statistics data of OpenFlow statistics data from the console:</simpara>

<literallayout class="monospaced">tsdr:list FLOWSTATS</literallayout>


</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<section xml:id="_troubleshooting_4">
<title>Troubleshooting</title>
<simpara>Check the ../data/log/karaf.log for any exception related to TSDR features.</simpara>
</section>
<section xml:id="_post_installation_configuration">
<title>Post Installation Configuration</title>
<section xml:id="_post_installation_configuration_for_hsqldb_data_store">
<title>Post Installation Configuration for HSQLDB Data Store</title>
<simpara>The feature installation takes care of automated configuration of the datasource by installing a file in &lt;install folder&gt;/etc named org.ops4j.datasource-metric.cfg. This contains the default location of &lt;install folder&gt;/tsdr where the HSQLDB datastore files are stored. If you want to change the default location of the datastore files to some other location update the last portion of the url property in the org.ops4j.datasource-metric.cfg and then restart the Karaf container.</simpara>
</section>
<section xml:id="_post_installation_configuration_for_hbase_data_store">
<title>Post Installation Configuration for HBase Data Store</title>
<simpara>Please refer to HBase Data Store User Guide.</simpara>
</section>
<section xml:id="_post_installation_configuration_for_cassandra_data_store">
<title>Post Installation Configuration for Cassandra Data Store</title>
<simpara>There is no post configuration for TSDR Cassandra data store.</simpara>
</section>
</section>
</section>
<section xml:id="_upgrading_from_a_previous_release">
<title>Upgrading From a Previous Release</title>
<simpara>The HBase data store was supported in the previous release as well as in this release. However, we do not support data store upgrade for HBase data store.
The user needs to reinstall TSDR and start to collect data in TSDR HBase datastore after the installation.</simpara>
<simpara>HSQLDB and Cassandra are new data stores introduced in this release. Therefore, upgrading from previous release does not apply in these two data store scenarios.</simpara>
</section>
<section xml:id="_uninstalling_tsdr_data_stores">
<title>Uninstalling TSDR Data Stores</title>
<section xml:id="_to_uninstall_tsdr_hsqldb_data_store">
<title>To uninstall TSDR HSQLDB data store</title>
<simpara>To uninstall the TSDR functionality with the default store, you need to do the following from karaf console</simpara>

<literallayout class="monospaced">feature:uninstall odl-tsdr-hsqldb-all
feature:uninstall odl-tsdr-core
feature:uninstall odl-tsdr-hsqldb
feature:uninstall odl-tsdr-openflow-statistics-collector</literallayout>


<simpara>It is recommended to restart the Karaf container after the uninstallation of the TSDR functionality with the default store.</simpara>
</section>
<section xml:id="_to_uninstall_tsdr_hbase_data_store">
<title>To uninstall TSDR HBase Data Store</title>
<simpara>To uninstall the TSDR functionality with the HBase data store,</simpara>
<itemizedlist>
<listitem>
<simpara>Uninstall HBase data store related features from karaf console</simpara>

<literallayout class="monospaced">feature:uninstall odl-tsdr-hbase
feature:uninstall odl-tsdr-core</literallayout>


</listitem>
<listitem>
<simpara>stop hbase server</simpara>

<literallayout class="monospaced">cd &lt;hbase-installation-directory&gt;
./stop-hbase.sh</literallayout>


</listitem>
<listitem>
<simpara>remove the file directory that contains the HBase server installation</simpara>

<literallayout class="monospaced">rm -r &lt;hbase-installation-directory&gt;</literallayout>


</listitem>
</itemizedlist>

<simpara>It is recommended to restart the Karaf container after the uninstallation of the TSDR data store.
==== To uninstall TSDR Cassandra Data Store
To uninstall the TSDR functionality with the Cassandra store,</simpara>
<itemizedlist>
<listitem>
<simpara>uninstall cassandra data store related features following from karaf console</simpara>

<literallayout class="monospaced">feature:uninstall odl-tsdr-cassandra
feature:uninstall odl-tsdr-core</literallayout>


</listitem>
<listitem>
<simpara>stop cassandra database</simpara>

<literallayout class="monospaced">ps auwx | grep cassandra
sudo kill pid</literallayout>


</listitem>
<listitem>
<simpara>remove the cassandra installation files</simpara>

<literallayout class="monospaced">rm &lt;cassandra-installation-directory&gt;</literallayout>


</listitem>
</itemizedlist>

<simpara>It is recommended to restart the Karaf container after uninstallation of the TSDR data store.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_vtn_installation_guide">
<title>VTN Installation Guide</title>
<section xml:id="_overview_5">
<title>Overview</title>
<simpara>OpenDaylight Virtual Tenant Network (VTN) is an application that provides multi-tenant virtual network on an SDN controller.</simpara>
<simpara>Conventionally, huge investment in the network systems and operating expenses are needed because the network is configured as a silo for each department and system. Therefore various network appliances must be installed for each tenant and those boxes cannot be shared with others. It is a heavy work to design, implement and operate the entire complex network.</simpara>
<simpara>The uniqueness of VTN is a logical abstraction plane. This enables the complete separation of logical plane from physical plane. Users can design and deploy any desired network without knowing the physical network topology or bandwidth restrictions.</simpara>
<simpara>VTN allows the users to define the network with a look and feel of conventional L2/L3 network. Once the network is designed on VTN, it will automatically be mapped into underlying physical network, and then configured on the individual switch leverage SDN control protocol. The definition of logical plane makes it possible not only to hide the complexity of the underlying network but also to better manage network resources. It achieves reducing reconfiguration time of network services and minimizing network configuration errors. OpenDaylight Virtual Tenant Network (VTN) is an application that provides multi-tenant virtual network on an SDN controller. It provides API for creating a common virtual network irrespective of the physical network.</simpara>
<simpara>It is implemented as two major components</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="_vtn_manager">VTN Manager</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="_vtn_coordinator">VTN Coordinator</link></simpara>
</listitem>
</itemizedlist>

<section xml:id="_vtn_manager">
<title>VTN Manager</title>
<simpara>An OpenDaylight Controller Plugin that interacts with other modules to implement the components of the VTN model. It also provides a REST interface to configure VTN components in ODL controller. VTN Manager is implemented as one plugin to the OpenDaylight controller. This provides a REST interface to create/update/delete VTN components. The user command in VTN Coordinator is translated as REST API to VTN Manager by the ODC Driver component. In addition to the above mentioned role, it also provides an implementation to the OpenStack L2 Network Functions API.</simpara>
</section>
<section xml:id="_vtn_coordinator">
<title>VTN Coordinator</title>
<simpara>The VTN Coordinator is an external application that provides a REST interface for a user to use the VTN Virtualization. It interacts with VTN Manager plugin to implement the user configuration. It is also capable of multiple controller orchestration. It realizes Virtual Tenant Network (VTN) provisioning in OpenDaylight Controllers (ODC). In the OpenDaylight architecture VTN Coordinator is part of the network application, orchestration and services layer. VTN Coordinator has been implemented as an external application to the OpenDaylight controller. This component is responsible for the VTN virtualization. VTN Coordinator will use the REST interface exposed by the VTN Manger to realize the virtual network using the OpenDaylight controller. It uses OpenDaylight APIs (REST) to construct the virtual network in ODCs. It provides REST APIs for northbound VTN applications and supports virtual networks spanning across multiple ODCs by coordinating across ODCs.</simpara>
</section>
</section>
<section xml:id="_preparing_for_installation_5">
<title>Preparing for Installation</title>
<section xml:id="_vtn_manager_2">
<title>VTN Manager</title>
<section xml:id="_running_the_karaf_distribution_2">
<title>Running the Karaf distribution</title>
<simpara>Follow the instructions in <link linkend="_getting_and_installing_opendaylight">Getting and Installing OpenDaylight</link>.</simpara>
</section>
</section>
<section xml:id="_vtn_coordinator_2">
<title>VTN Coordinator</title>
<itemizedlist>
<listitem>
<simpara>Arrange a physical/virtual server with any one of the supported 64-bit OS environment.</simpara>
<itemizedlist>
<listitem>
<simpara>RHEL 6 / 7</simpara>
</listitem>
<listitem>
<simpara>CentOS 6 / 7</simpara>
</listitem>
<listitem>
<simpara>Fedora 20 / 21 / 22</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Install these packages</simpara>

<literallayout class="monospaced">yum install perl-Digest-SHA uuid libxslt libcurl unixODBC json-c</literallayout>



<literallayout class="monospaced">rpm -ivh http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-redhat93-9.3-1.noarch.rpm</literallayout>



<literallayout class="monospaced">yum install postgresql93-libs postgresql93 postgresql93-server postgresql93-contrib postgresql93-odbc</literallayout>


</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_installing_vtn">
<title>Installing VTN</title>
<section xml:id="_vtn_manager_3">
<title>VTN Manager</title>
<simpara>Install Feature</simpara>

<literallayout class="monospaced">feature:install odl-vtn-manager-rest odl-vtn-manager-neutron</literallayout>


<note>
<simpara>The above command will install all features of VTN Manager.
      You can install only REST or Neutron also.</simpara>
</note>

</section>
<section xml:id="_vtn_coordinator_3">
<title>VTN Coordinator</title>
<itemizedlist>
<listitem>
<simpara>Enter into the externalapps directory in the top directory of Lithium</simpara>

<literallayout class="monospaced">cd distribution-karaf-0.2.1-Lithium-SR1/externalapps</literallayout>


</listitem>
<listitem>
<simpara>Run the below command to extract VTN Coordinator from the tar.bz2 file in the externalapps directory.</simpara>

<literallayout class="monospaced">tar –C/ -jxvf distribution.vtn-coordinator-6.0.0.1-Lithium-SR1-bin.tar.bz2</literallayout>


</listitem>
</itemizedlist>

<simpara>This will install VTN Coordinator to /usr/local/vtn directory.
The name of the tar.bz2 file name varies depending on the version. Please give the same tar.bz2 file name which is there in your directory.</simpara>
<itemizedlist>
<listitem>
<simpara>Configuring database for VTN Coordinator</simpara>

<literallayout class="monospaced">/usr/local/vtn/sbin/db_setup</literallayout>


</listitem>
<listitem>
<simpara>To start the Coordinator</simpara>

<literallayout class="monospaced">/usr/local/vtn/bin/vtn_start</literallayout>


</listitem>
</itemizedlist>

<simpara>Using VTN REST API:</simpara>
<simpara>Get the version of VTN REST API using the below command, and make sure the setup is working.</simpara>

<literallayout class="monospaced">curl --user admin:adminpass -H 'content-type: application/json' -X GET http://&lt;VTN_COORDINATOR_IP_ADDRESS&gt;:8083/vtn-webapi/api_version.json</literallayout>


<simpara>The response should be like this, but version might differ:</simpara>

<literallayout class="monospaced">{"api_version":{"version":"V1.2"}}</literallayout>


</section>
</section>
<section xml:id="_verifying_your_installation_5">
<title>Verifying your Installation</title>
<section xml:id="_vtn_manager_4">
<title>VTN Manager</title>
<itemizedlist>
<listitem>
<simpara>In the karaf prompt, type the below command to ensure that vtn packages are installed.</simpara>

<literallayout class="monospaced">feature:list i | grep vtn</literallayout>


</listitem>
<listitem>
<simpara>Run any VTN Manager REST API</simpara>

<literallayout class="monospaced">curl --user "admin":"admin" -H "Accept: application/json" -H \"Content-type: application/json" -X GET \http://localhost:8282/controller/nb/v2/vtn/default/vtns</literallayout>


</listitem>
</itemizedlist>

</section>
<section xml:id="_vtn_coordinator_4">
<title>VTN Coordinator</title>
<itemizedlist>
<listitem>
<simpara>ps –ef | grep unc will list all the vtn apps</simpara>
</listitem>
<listitem>
<simpara>Run any REST API for VTN Coordinator version</simpara>
</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_uninstalling_vtn">
<title>Uninstalling VTN</title>
<section xml:id="_vtn_manager_5">
<title>VTN Manager</title>

<literallayout class="monospaced">Feature:uninstall odl-vtnmanager-all</literallayout>


</section>
<section xml:id="_vtn_coordinator_5">
<title>VTN Coordinator</title>

<literallayout class="monospaced">/usr/local/vtn/bin/vtn_stop</literallayout>



<literallayout class="monospaced">Remove the usr/local/vtn folder</literallayout>


</section>
</section>
</chapter>
</part>
</book>