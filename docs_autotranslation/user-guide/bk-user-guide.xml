<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>OpenDaylight User Guide</title>
<date>2016-06-01</date>

    <author>
        <personname>
            <firstname>OpenDaylight</firstname>
            <surname>Community</surname>
        </personname>
        <email>documentation@opendaylight.org</email>
        <affiliation>
            <orgname>Linux Foundation</orgname>
        </affiliation>
    </author>
    <copyright>
        <year>2015</year>
        <holder>Linux Foundation</holder>
    </copyright>
    <releaseinfo>Beryllium</releaseinfo>
    <productname>OpenDaylight</productname>
    <pubdate></pubdate>
    <legalnotice role="license">
        <para> This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at <link xlink:href="http://www.eclipse.org/legal/epl-v10.html"/></para>
    </legalnotice>
    <abstract>
        <para>This guide describes how to use and deploy OpenDaylight.</para>
    </abstract>
    <revhistory>
        <revision>
            <date>2014-07-16</date>
            <revdescription>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>Initial Guide Creation</para>
                    </listitem>
                </itemizedlist>
            </revdescription>
        </revision>
    </revhistory>



</info>
<part xml:id="_getting_started_with_opendaylight">
<title>Getting Started with OpenDaylight</title>
<partintro>
<simpara>This first part of the user guide covers the basic user operations of the OpenDaylight Release using the generic base functionality.</simpara>
</partintro>
<chapter xml:id="_opendaylight_controller_overview">
<title>OpenDaylight Controller Overview</title>
<simpara>The OpenDaylight controller is JVM software and can be run from any operating system and hardware as long as it supports Java. The controller is an implementation of the Software Defined Network (SDN) concept and makes use of the following tools:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Maven</emphasis>: OpenDaylight uses Maven for easier build automation. Maven uses pom.xml (Project Object Model) to script the dependencies between bundle and also to describe what bundles to load and start.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">OSGi</emphasis>: This framework is the back-end of OpenDaylight as it allows dynamically loading bundles and packages JAR files, and binding bundles together for exchanging information.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">JAVA interfaces</emphasis>: Java interfaces are used for event listening, specifications, and forming patterns. This is the main way in which specific bundles implement call-back functions for events and also to indicate awareness of specific state.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">REST APIs</emphasis>: These are northbound APIs such as topology manager, host tracker, flow programmer, static routing, and so on.</simpara>
</listitem>
</itemizedlist>

<simpara>The controller exposes open northbound APIs which are used by applications. The OSGi framework and bidirectional REST are supported for the northbound APIs. The OSGi framework is used for applications that run in the same address space as the controller while the REST (web-based) API is used for applications that do not run in the same address space (or even the same system) as the controller. The business logic and algorithms reside in the applications. These applications use the controller to gather network intelligence, run its algorithm to do analytics, and then orchestrate the new rules throughout the network.
On the southbound, multiple protocols are supported as plugins, e.g. OpenFlow 1.0, OpenFlow 1.3, BGP-LS, and so on. The OpenDaylight controller starts with an OpenFlow 1.0 southbound plugin. Other OpenDaylight contributors begin adding to the controller code. These modules are linked dynamically into a <emphasis role="strong">Service Abstraction Layer</emphasis> (SAL).</simpara>
<simpara>The SAL exposes services to which the modules north of it are written. The SAL figures out how to fulfill the requested service irrespective of the underlying protocol used between the controller and the network devices. This provides investment protection to the applications as OpenFlow and other protocols evolve over time. For the controller to control devices in its domain, it needs to know about the devices, their capabilities, reachability, and so on. This information is stored and managed by the <emphasis role="strong">Topology Manager</emphasis>. The other components like ARP handler, Host Tracker, Device Manager, and Switch Manager help in generating the topology database for the Topology Manager.</simpara>
<simpara>For a more detailed overview of the OpenDaylight controller, see the <emphasis>OpenDaylight Developer Guide</emphasis>.</simpara>
</chapter>
<chapter xml:id="_using_the_opendaylight_user_interface_dlux">
<title>Using the OpenDaylight User Interface (DLUX)</title>
<simpara>This section introduces you to the OpenDaylight User Experience (DLUX) application.</simpara>
<section xml:id="_getting_started_with_dlux">
<title>Getting Started with DLUX</title>
<simpara>DLUX provides a number of different Karaf features, which you can enable and disable separately. In Beryllum they are:
. odl-dlux-core
. odl-dlux-node
. odl-dlux-yangui
. odl-dlux-yangvisualizer</simpara>
</section>
<section xml:id="_logging_in">
<title>Logging In</title>
<simpara>To log in to DLUX, after installing the application:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Open a browser and enter the login URL <link xlink:href="http://&lt;your-karaf-ip&gt;:8181/index.html">http://&lt;your-karaf-ip&gt;:8181/index.html</link> in your browser (Chrome is recommended).</simpara>
</listitem>
<listitem>
<simpara>Login to the application with your username and password credentials.</simpara>
</listitem>
</orderedlist>

<note>
<simpara>OpenDaylight&#8217;s default credentials are <emphasis>admin</emphasis> for both the username and password.</simpara>
</note>

</section>
<section xml:id="_working_with_dlux">
<title>Working with DLUX</title>
<simpara>After you login to DLUX, if you enable only odl-dlux-core feature, you will see only topology application available in the left pane.</simpara>
<note>
<simpara>To make sure topology displays all the details, enable the odl-l2switch-switch feature in Karaf.</simpara>
</note>

<simpara>DLUX has other applications such as node, yang UI and those apps won&#8217;t show up, until you enable their features odl-dlux-node and odl-dlux-yangui respectively in the Karaf distribution.</simpara>
<figure>
<title>DLUX Modules</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-login.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Page</phrase></textobject>
  </mediaobject>
</figure>

<note>
<simpara>If you install your application in dlux, they will also show up on the left hand navigation after browser page refresh.</simpara>
</note>

</section>
<section xml:id="_viewing_network_statistics">
<title>Viewing Network Statistics</title>
<simpara>The <emphasis role="strong">Nodes</emphasis> module on the left pane enables you to view the network statistics and port information for the switches in the network.</simpara>
<simpara>To use the <emphasis role="strong">Nodes</emphasis> module:</simpara>
<simpara><?asciidoc-hr?></simpara>

<orderedlist numeration="arabic">
<listitem>
<simpara>Select <emphasis role="strong">Nodes</emphasis> on the left pane.
The right pane displays atable that lists all the nodes, node connectors and the statistics.</simpara>
</listitem>
<listitem>
<simpara>Enter a node ID in the <emphasis role="strong">Search Nodes</emphasis> tab to search by node connectors.</simpara>
</listitem>
<listitem>
<simpara>Click on the <emphasis role="strong">Node Connector</emphasis> number to view details such as port ID, port name, number of ports per switch, MAC Address, and so on.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Flows</emphasis> in the Statistics column to view Flow Table Statistics for the particular node like table ID, packet match, active flows and so on.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Node Connectors</emphasis> to view Node Connector Statistics for the particular node ID.</simpara>
</listitem>
</orderedlist>

<simpara><?asciidoc-hr?></simpara>

</section>
<section xml:id="_viewing_network_topology">
<title>Viewing Network Topology</title>
<simpara>The Topology tab displays a graphical representation of network topology created.</simpara>
<note>
<simpara>DLUX does not allow for editing or adding topology information. The topology is generated and edited in other modules, e.g., the OpenFlow plugin. OpenDaylight stores this information in the MD-SAL datastore where DLUX can read and display it.</simpara>
</note>

<simpara>To view network topology:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Select <emphasis role="strong">Topology</emphasis> on the left pane. You will view the graphical representation on the right pane.
In the diagram blue boxes represent the switches, the black represents the hosts available, and lines represents how the switches and hosts are connected.</simpara>
</listitem>
<listitem>
<simpara>Hover your mouse on hosts, links, or switches to view source and destination ports.</simpara>
</listitem>
<listitem>
<simpara>Zoom in and zoom out using mouse scroll to verify topology for larger topologies.</simpara>
</listitem>
</orderedlist>

<figure>
<title>Topology Module</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-topology.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Topology Page</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_interacting_with_the_yang_based_md_sal_datastore">
<title>Interacting with the YANG-based MD-SAL datastore</title>
<simpara>The <emphasis role="strong">Yang UI</emphasis> module enables you to interact with the YANG-based MD-SAL datastore. For more information about YANG and how it interacts with the MD-SAL datastore, see the <emphasis>Controller</emphasis> and <emphasis>YANG Tools</emphasis> section of the <emphasis>OpenDaylight Developer Guide</emphasis>.</simpara>
<figure>
<title>Yang UI</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-ui-screen.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Yang UI Page</phrase></textobject>
  </mediaobject>
</figure>

<simpara>To use Yang UI:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Select <emphasis role="strong">Yang UI</emphasis> on the left pane. The right pane is divided in two parts.</simpara>
</listitem>
<listitem>
<simpara>The top part displays a tree of APIs, subAPIs, and buttons to call possible functions (GET, POST, PUT, and DELETE).</simpara>
<note>
<simpara>Not every subAPI can call every function. For example, subAPIs in the <emphasis>operational</emphasis> store have GET functionality only.</simpara>
</note>

<simpara>Inputs can be filled from OpenDaylight when existing data from OpenDaylight is displayed or can be filled by user on the page and sent to OpenDaylight.</simpara>
<simpara>Buttons under the API tree are variable. It depends on subAPI specifications. Common buttons are:</simpara>
<itemizedlist>
<listitem>
<simpara>GET to get data from OpenDaylight,</simpara>
</listitem>
<listitem>
<simpara>PUT and POST for sending data to OpenDaylight for saving</simpara>
</listitem>
<listitem>
<simpara>DELETE for sending data to OpenDaylight for deleting.</simpara>
<simpara>You must specify the xpath for all these operations. This path is displayed in the same row before buttons and it may include text inputs for specific path element identifiers.</simpara>
<figure>
<title>Yang API Specification</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-api-specification.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Yang UI API Specification Page</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>The bottom part of the right pane displays inputs according to the chosen subAPI.</simpara>
<itemizedlist>
<listitem>
<simpara>Lists are handled as a special case. For example, a device can store multiple flows. In this case "flow" is name of the list and every list element is identified by a unique key value. Elements of a list can, in turn, contain other lists.</simpara>
</listitem>
<listitem>
<simpara>In Yang UI, each list element is rendered with the name of the list it belongs to, its key, its value, and a button for removing it from the list.</simpara>
<figure>
<title>Yang UI API Specification</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-sub-api-screen.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Yang UI Sub API Specification Page</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>After filling in the relevant inputs, click the <emphasis role="strong">Show Preview</emphasis> button under the API tree to display request that will be sent to OpenDaylight.
A pane is displayed on the right side with text of request when some input is filled.</simpara>
</listitem>
</orderedlist>

<section xml:id="_displaying_topology_on_the_emphasis_role_strong_yang_ui_emphasis">
<title>Displaying Topology on the <emphasis role="strong">Yang UI</emphasis></title>
<simpara>To display topology:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Select subAPI network-topology &lt;topology revision number&gt; == &gt; operational == &gt; network-topology.</simpara>
</listitem>
<listitem>
<simpara>Get data from OpenDaylight by clicking on the "GET" button.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Display Topology</emphasis>.</simpara>
</listitem>
</orderedlist>

<figure>
<title>DLUX Yang Topology</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-topology.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX Yang Topology Page</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_configuring_list_elements_on_the_emphasis_role_strong_yang_ui_emphasis">
<title>Configuring List Elements on the <emphasis role="strong">Yang UI</emphasis></title>
<simpara>Lists in Yang UI are displayed as trees. To expand or collapse a list, click the arrow before name of the list. To configure list elements in Yang UI:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>To add a new list element with empty inputs use the plus icon-button <emphasis role="strong">+</emphasis> that is provided after list name.</simpara>
</listitem>
<listitem>
<simpara>To remove several list elements, use the <emphasis role="strong">X</emphasis> button that is provided after every list element.</simpara>
<figure>
<title>DLUX List Elements</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-list-elements.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX list elements</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>In the YANG-based data store all elements of a list must have a unique key. If you try to assign two or more elements the same key, a warning icon <emphasis role="strong">!</emphasis> is displayed near their name buttons.</simpara>
<figure>
<title>DLUX List Warnings</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-list-warning.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX list warnings</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
<listitem>
<simpara>When the list contains at least one list element, after the <emphasis role="strong">+</emphasis> icon, there are buttons to select each individual list element. You can choose one of them by clicking on it. In addition, to the right of the list name, there is a button which will display a vertically scrollable pane with all the list elements.</simpara>
<figure>
<title>DLUX List Button1</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/dlux-yang-list-button1.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>DLUX list button1</phrase></textobject>
  </mediaobject>
</figure>

</listitem>
</orderedlist>

</section>
</section>
</chapter>
<chapter xml:id="_running_xsql_console_commands_and_queries">
<title>Running XSQL Console Commands and Queries</title>
<section xml:id="_xsql_overview">
<title>XSQL Overview</title>
<simpara>XSQL is an XML-based query language that describes simple stored procedures
which parse XML data, query or update database tables, and compose XML output.
XSQL allows you to query tree models like a sequential database. For example,
you could run a query that lists all of the ports configured on a particular
module and their attributes.</simpara>
<simpara>The following sections cover the XSQL installation process, supported XSQL
commands, and the way to structure queries.</simpara>
</section>
<section xml:id="_installing_xsql">
<title>Installing XSQL</title>
<simpara>To run commands from the XSQL console, you must first install XSQL on your
system:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Navigate to the directory in which you unzipped OpenDaylight</simpara>
</listitem>
<listitem>
<simpara>Start Karaf:</simpara>

<literallayout class="monospaced">./bin/karaf</literallayout>


</listitem>
<listitem>
<simpara>Install XSQL:</simpara>

<literallayout class="monospaced">feature:install odl-mdsal-xsql</literallayout>


</listitem>
</orderedlist>

</section>
<section xml:id="_xsql_console_commands">
<title>XSQL Console Commands</title>
<simpara>To enter a command in the XSQL console, structure the command as follows:
<emphasis role="strong">odl:xsql</emphasis> <emphasis>&lt;XSQL command&gt;</emphasis></simpara>
<simpara>The following table describes the commands supported in this OpenDaylight
release.</simpara>
<table frame="all"
    rowsep="1" colsep="1">
<title>Supported XSQL Console Commands</title>
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="30*"/>
    
    <colspec colname="col_2" colwidth="70*"/>
    
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Command</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Description</emphasis></simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">r</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Repeats the last command you executed.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">list vtables</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists the schema node containers that are currently installed. Whenever an
OpenDaylight module is installed, its YANG model is placed in the schema
context. At that point, the  XSQL receives a notification, confirms that the
module&#8217;s YANG model resides in the schema context and then maps the model to
XSQL by setting up the necessary vtables and vfields. This command is useful
when you need to determine vtable information for a query.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">list vfields</emphasis> <emphasis>&lt;vtable name&gt;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists the vfields present in a specific vtable. This command is useful when
you need to determine vfields information for a query.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">jdbc</emphasis> <emphasis>&lt;ip address&gt;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>When the ODL server is behind a firewall, and the JDBC client cannot connect
to the JDBC server, run this command to start the client as a server and
establish a connection.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">exit</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Closes the console.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">tocsv</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Enables or disables the forwarding of query output as a .csv file.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">filename</emphasis> <emphasis>&lt;filename&gt;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specifies the .tocsv file to which the query data is exported. If you do not
specify a value for this option when the toccsv option is enabled, the filename
for the query data file is generated automatically.</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

</section>
<section xml:id="_xsql_queries">
<title>XSQL Queries</title>
<simpara>You can run a query to extract information that meets the criteria you specify
using the information provided by the <emphasis role="strong">list vtables</emphasis> and <emphasis role="strong">list vfields</emphasis>
<emphasis>&lt;vtable name&gt;</emphasis> commands.  Any query you run should be structured as follows:</simpara>
<simpara><emphasis role="strong">select</emphasis> <emphasis>&lt;vfields you want to search for, separated by a comma and a space&gt;</emphasis>
<emphasis role="strong">from</emphasis> <emphasis>&lt;vtables you want to search in, separated by a comma and a space&gt;</emphasis>
<emphasis role="strong">where</emphasis> <emphasis>&lt;criteria&gt;</emphasis> <emphasis role="strong"><emphasis>*<emphasis>&lt;criteria operator&gt;</emphasis></emphasis></emphasis>;*</simpara>
<simpara>For example, if you want to search the nodes/node ID field in the
nodes/node-connector table and find every instance of the Hardware-Address
object that contains <emphasis>BA</emphasis> in its text string, enter the following query:</simpara>

<literallayout class="monospaced">select nodes/node.ID from nodes/node-connector where Hardware-Address like '%BA%';</literallayout>


<simpara>The following criteria operators are supported:</simpara>
<table frame="all"
    rowsep="1" colsep="1">
<title>Supported XSQL Query Criteria Operators</title>
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="20*"/>
    
    <colspec colname="col_2" colwidth="80*"/>
    
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Criteria Operators</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Description</emphasis></simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">=</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that equal the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">!=</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that do not equal the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">like</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that contain the substring you specify. For
               example, if you specify <emphasis role="strong">like %BC%</emphasis>, every string that contains
               that particular substring is displayed.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">&lt;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that are less than the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">&gt;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that are more than the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">and</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that match both values you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">or</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that match either of the two values you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">&gt;=</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that are more than or equal to the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">&#8656;</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results that are less than or equal to the value you specify.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">is null</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results for which no value is assigned.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">not null</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Lists results for which any value is assigned.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">skip</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>Use this operator to list matching results from a child node,
               even if its parent node does not meet the specified criteria.
               See the following example for more information.</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

<section xml:id="_example_skip_criteria_operator">
<title>Example: Skip Criteria Operator</title>
<simpara>If you are looking at the following structure and want to determine all of the
ports that belong to a YY type module:</simpara>
<itemizedlist>
<listitem>
<simpara>Network Element 1</simpara>
<itemizedlist>
<listitem>
<simpara>Module 1, Type XX</simpara>
<itemizedlist>
<listitem>
<simpara>Module 1.1, Type YY</simpara>
<itemizedlist>
<listitem>
<simpara>Port 1</simpara>
</listitem>
<listitem>
<simpara>Port 2</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Module 2, Type YY</simpara>
<itemizedlist>
<listitem>
<simpara>Port 1</simpara>
</listitem>
<listitem>
<simpara>Port 2</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<simpara>If you specify <emphasis role="strong">Module.Type=<emphasis>YY</emphasis></emphasis> in your query criteria, the ports associated
with module 1.1 will not be returned since its parent module is type XX.
Instead, enter <emphasis role="strong">Module.Type=<emphasis>YY</emphasis> or skip Module!=<emphasis>YY</emphasis></emphasis>. This tells XSQL to
disregard any parent module data that does not meet the type YY criteria and
collect results for any matching child modules. In this example, you are
instructing the query to skip module 1 and collect the relevant data from
module 1.1.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_setting_up_clustering">
<title>Setting Up Clustering</title>
<section xml:id="_clustering_overview">
<title>Clustering Overview</title>
<simpara>Clustering is a mechanism that enables multiple processes and programs to work
together as one entity.  For example, when you search for something on
google.com, it may seem like your search request is processed by only one web
server. In reality, your search request is processed by may web servers
connected in a cluster. Similarly, you can have multiple instances of
OpenDaylight working together as one entity.</simpara>
<simpara>Advantages of clustering are:</simpara>
<itemizedlist>
<listitem>
<simpara>Scaling: If you have multiple instances of OpenDaylight running, you can
potentially do more work and store more data than you could with only one
instance. You can also break up your data into smaller chunks (shards) and
either distribute that data across the cluster or perform certain operations
on certain members of the cluster.</simpara>
</listitem>
<listitem>
<simpara>High Availability: If you have multiple instances of OpenDaylight running and
one of them crashes, you will still have the other instances working and
available.</simpara>
</listitem>
<listitem>
<simpara>Data Persistence: You will not lose any data stored in OpenDaylight after a
manual restart or a crash.</simpara>
</listitem>
</itemizedlist>

<simpara>The following sections describe how to set up clustering on both individual and
multiple OpenDaylight instances.</simpara>
</section>
<section xml:id="_single_node_clustering">
<title>Single Node Clustering</title>
<simpara>To enable clustering on a single instance of OpenDaylight, perform the
following steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Download, unzip, and run the OpenDaylight distribution</simpara>
</listitem>
<listitem>
<simpara>Install the clustering feature:</simpara>

<literallayout class="monospaced">feature:install odl-mdsal-clustering</literallayout>


</listitem>
</orderedlist>

<note>
<simpara>This will enabled the cluster-ready version of the MD-SAL data store, but
      will not actually create a cluster of multiple instances. The result is
      that you will get data persistence, but not the scaling or high
      availability advantages.</simpara>
</note>

</section>
<section xml:id="_multiple_node_clustering">
<title>Multiple Node Clustering</title>
<simpara>The following sections describe how to set up multiple node clusters in OpenDaylight.</simpara>
<section xml:id="_deployment_considerations">
<title>Deployment Considerations</title>
<simpara>To implement clustering, the deployment considerations are as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>To set up a cluster with multiple nodes, we recommend that you use a minimum
of three machines. You can set up a cluster with just two nodes. However, if
one of the two nodes fail, the cluster will not be operational.</simpara>
<note>
<simpara>This is because clustering in OpenDaylight requires a majority of the
      nodes to be up and one node cannot be a majority of two nodes.</simpara>
</note>

</listitem>
<listitem>
<simpara>Every device that belongs to a cluster needs to have an identifier.
OpenDaylight uses the node&#8217;s <literal>role</literal> for this purpose. After you define the
first node&#8217;s role as <emphasis>member-1</emphasis> in the <literal>akka.conf</literal> file, OpenDaylight uses
<emphasis>member-1</emphasis> to identify that node.</simpara>
</listitem>
<listitem>
<simpara>Data shards are used to contain all or a certain segment of a OpenDaylight&#8217;s
MD-SAL datastore. For example, one shard can contain all the inventory data
while another shard contains all of the topology data.</simpara>
<simpara>If you do not specify a module in the <literal>modules.conf</literal> file and do not specify
a shard in <literal>module-shards.conf</literal>, then (by default) all the data is placed in
the default shard (which must also be defined in <literal>module-shards.conf</literal> file).
Each shard has replicas configured. You can specify the details of where the
replicas reside in <literal>module-shards.conf</literal> file.</simpara>
</listitem>
<listitem>
<simpara>If you have a three node cluster and would like to be able to tolerate any
single node crashing, a replica of every defined data shard must be running
on all three cluster nodes.</simpara>
<note>
<simpara>This is because OpenDaylight&#8217;s clustering implementation requires a
      majority of the defined shard replicas to be running in order to
      function. If you define data shard replicas on two of the cluster nodes
      and one of those nodes goes down, the corresponding data shards will not
      function.</simpara>
</note>

</listitem>
<listitem>
<simpara>If you have a three node cluster and have defined replicas for a data shard
on each of those nodes, that shard will still function even if only two of
the cluster nodes are running. Note that if one of those remaining two nodes
goes down, the shard will not be operational.</simpara>
</listitem>
<listitem>
<simpara>It is  recommended that you have multiple seed nodes configured. After a
cluster member is started, it sends a message to all of its seed nodes.
The cluster member then sends a join command to the first seed node that
responds. If none of its seed nodes reply, the cluster member repeats this
process until it successfully establishes a connection or it is shut down.</simpara>
</listitem>
<listitem>
<simpara>After a node is unreachable, it remains down for configurable period of time
(10 seconds, by default). Once a node goes down, you need to restart it so
that it can rejoin the cluster. Once a restarted node joins a cluster, it
will synchronize with the lead node automatically.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_setting_up_a_multiple_node_cluster">
<title>Setting Up a Multiple Node Cluster</title>
<simpara>To run OpenDaylight in a three node cluster, perform the following:</simpara>
<simpara>First, determine the three machines that will make up the cluster. After that,
do the following on each machine:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Copy the OpenDaylight distribution zip file to the machine.</simpara>
</listitem>
<listitem>
<simpara>Unzip the distribution.</simpara>
</listitem>
<listitem>
<simpara>Open the following .conf files:</simpara>
<itemizedlist>
<listitem>
<simpara>configuration/initial/akka.conf</simpara>
</listitem>
<listitem>
<simpara>configuration/initial/module-shards.conf</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>In each configuration file, make the following changes:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Find every instance of the following lines and replace <emphasis>127.0.0.1</emphasis> with the
hostname or IP address of the machine on which this file resides and
OpenDaylight will run:</simpara>

<literallayout class="monospaced">netty.tcp {
  hostname = "127.0.0.1"</literallayout>


<note>
<simpara>The value you need to specify will be different for each node in the
      cluster.</simpara>
</note>

</listitem>
<listitem>
<simpara>Find the following lines and replace <emphasis>127.0.0.1</emphasis> with the hostname or IP
address of any of the machines that will be part of the cluster:</simpara>

<literallayout class="monospaced">cluster {
  seed-nodes = ["akka.tcp://opendaylight-cluster-data@127.0.0.1:2550"]</literallayout>


</listitem>
<listitem>
<simpara>Find the following section and specify the role for each member node. Here
we assign the first node with the <emphasis>member-1</emphasis> role, the second node with the
<emphasis>member-2</emphasis> role, and the third node with the <emphasis>member-3</emphasis> role:</simpara>

<literallayout class="monospaced">roles = [
  "member-1"
]</literallayout>


<note>
<simpara>This step should use a different role on each node.</simpara>
</note>

</listitem>
<listitem>
<simpara>Open the configuration/initial/module-shards.conf file and update the
replicas so that each shard is replicated to all three nodes:</simpara>

<literallayout class="monospaced">replicas = [
    "member-1",
    "member-2",
    "member-3"
]</literallayout>


<simpara>For reference, view a sample config files <link linkend="_sample_config_files">below</link>.</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Move into the <literal>&lt;karaf-distribution-directory&gt;/bin</literal> directory.</simpara>
</listitem>
<listitem>
<simpara>Run the following command:</simpara>

<literallayout class="monospaced">JAVA_MAX_MEM=4G JAVA_MAX_PERM_MEM=512m ./karaf</literallayout>


</listitem>
<listitem>
<simpara>Enable clustering by running the following command at the Karaf command line:</simpara>

<literallayout class="monospaced">feature:install odl-mdsal-clustering</literallayout>


</listitem>
</orderedlist>

<simpara>OpenDaylight should now be running in a three node cluster. You can use any of
the three member nodes to access the data residing in the datastore.</simpara>
<section xml:id="_sample_config_files">
<title>Sample Config Files</title>
<formalpara>
<title>Sample <literal>akka.conf</literal> file</title>
<para>
<screen>odl-cluster-data {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  metric-capture-enabled = true

  akka {
    loglevel = "DEBUG"
    loggers = ["akka.event.slf4j.Slf4jLogger"]

    actor {

      provider = "akka.cluster.ClusterActorRefProvider"
      serializers {
                java = "akka.serialization.JavaSerializer"
                proto = "akka.remote.serialization.ProtobufSerializer"
              }

              serialization-bindings {
                  "com.google.protobuf.Message" = proto

              }
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "10.194.189.96"
        port = 2550
        maximum-frame-size = 419430400
        send-buffer-size = 52428800
        receive-buffer-size = 52428800
      }
    }

    cluster {
      seed-nodes = ["akka.tcp://opendaylight-cluster-data@10.194.189.96:2550"]

      auto-down-unreachable-after = 10s

      roles = [
        "member-1"
      ]

    }
  }
}

odl-cluster-rpc {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  metric-capture-enabled = true

  akka {
    loglevel = "INFO"
    loggers = ["akka.event.slf4j.Slf4jLogger"]

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "10.194.189.96"
        port = 2551
      }
    }

    cluster {
      seed-nodes = ["akka.tcp://opendaylight-cluster-rpc@10.194.189.96:2551"]

      auto-down-unreachable-after = 10s
    }
  }
}</screen>
</para>
</formalpara>

<formalpara>
<title>Sample <literal>module-shards.conf</literal> file</title>
<para>
<screen>module-shards = [
    {
        name = "default"
        shards = [
            {
                name="default"
                replicas = [
                    "member-1",
                    "member-2",
                    "member-3"
                ]
            }
        ]
    },
    {
        name = "topology"
        shards = [
            {
                name="topology"
                replicas = [
                    "member-1",
                    "member-2",
                    "member-3"
                ]
            }
        ]
    },
    {
        name = "inventory"
        shards = [
            {
                name="inventory"
                replicas = [
                    "member-1",
                    "member-2",
                    "member-3"
                ]
            }
        ]
    },
    {
         name = "toaster"
         shards = [
             {
                 name="toaster"
                 replicas = [
                    "member-1",
                    "member-2",
                    "member-3"
                 ]
             }
         ]
    }
]</screen>
</para>
</formalpara>

</section>
</section>
</section>
</chapter>
</part>
<part xml:id="_applications_and_plugins">
<title>Applications and Plugins</title>
<partintro>
<simpara>This second part of the user guide covers project specific usage instructions.</simpara>
</partintro>
<chapter xml:id="_alto_user_guide">
<title>ALTO User Guide</title>
<section xml:id="_overview">
<title>Overview</title>
<simpara>The ALTO project provides support for <emphasis>Application Layer Traffic
Optimization</emphasis> services defined in <link xlink:href="https://tools.ietf.org/html/rfc7285">RFC
7285</link>.</simpara>
<simpara>In the Lithium release, ALTO uses the YANG model described in
<link xlink:href="https://tools.ietf.org/html/draft-shi-alto-yang-model-03">this draft</link>.</simpara>
</section>
<section xml:id="_alto_architecture">
<title>ALTO Architecture</title>
<simpara>There are three kinds of ALTO packages in OpenDaylight.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><emphasis role="strong">Core</emphasis>
The <emphasis role="strong">core</emphasis> packages include:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><literal>alto-model</literal>: Defines the YANG model of ALTO services in MD-SAL</simpara>
</listitem>
<listitem>
<simpara><literal>service-api-rfc7285</literal>: Defines interfaces for ALTO services in AD-SAL</simpara>
</listitem>
<listitem>
<simpara><literal>alto-northbound</literal>: Implements the RFC7285-compatible RESTful API</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara><emphasis role="strong">Basic</emphasis>
The <emphasis role="strong">basic</emphasis> packages include:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Basic implementations of ALTO services:</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara><literal>alto-provider</literal>: Implements the services defined in <literal>alto-model</literal></simpara>
</listitem>
<listitem>
<simpara><literal>simple-impl</literal>: Implements the services defined in <literal>service-api-rfc7285</literal></simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Utilities:</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara><literal>alto-manager</literal>: Provides a karaf command line tool to manipulate network
maps and cost maps.</simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara><emphasis role="strong">Service</emphasis>
The <emphasis role="strong">service</emphasis> packages include:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><literal>alto-hosttracker</literal>: Generates a network map, a corresponding cost map and
the endpoint cost service based on <link linkend="_l2switch_user_guide">l2switch</link>.</simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

</section>
<section xml:id="_configuring_alto">
<title>Configuring ALTO</title>
<simpara>There are three packages that require their own configuration files,
including <literal>alto-provider</literal>, <literal>alto-hosttracker</literal> and <literal>simple-impl</literal>. However, the
only configurable option is the type of the data broker in all three
configuration files.</simpara>
</section>
<section xml:id="_administering_or_managing_alto">
<title>Administering or Managing ALTO</title>
<simpara>To enable ALTO, the features must be installed first.</simpara>
<programlisting language="bash" linenumbering="unnumbered">karaf &gt; feature:install odl-alto-provider
karaf &gt; feature:install odl-alto-manager
karaf &gt; feature:install odl-alto-northbound
karaf &gt; feature:install odl-alto-hosttracker</programlisting>

<section xml:id="_managing_data_with_restconf">
<title>Managing Data with RESTCONF</title>
<simpara>After installing <literal>odl-alto-provider</literal> feature in karaf, it is possible to manage
network-maps and cost-maps using RESTCONF. Take a look at all the operations
provided by <literal>alto-model</literal> at the API service page which can be found at
<literal>http://localhost:8181/apidoc/explorer/index.html</literal>.</simpara>
<simpara>With the example input below you can insert a network map into the data store,
either by filling the form in the API doc page, or by using tools such as <literal>curl</literal>.</simpara>
<programlisting language="bash" linenumbering="unnumbered">HOST_IP=localhost                   # IP address of the controller
CREDENTIAL=admin:admin              # username and password for authentication
BASE_URL=$HOST_IP:8181/restconf/config
SERVICE_PATH=alto-service:resources/alto-service:network-maps/alto-service:network-map
RESOURCE_ID=test_odl                # Should match the one in the input file
curl -X PUT -H "content-type:application/yang.data+json" \
            -d @example-input.json -u $CREDENTIAL \
            http://$BASE_URL/$SERVICE_PATH/$RESOURCE_ID</programlisting>

<programlisting language="json" linenumbering="unnumbered">{
    "alto-service:network-map": [
        {
            "alto-service:map": [
                {
                    "alto-service:endpoint-address-group": [
                        {
                            "alto-service:address-type": "ipv4",
                            "alto-service:endpoint-prefix": [
                                "192.0.2.0/24",
                                "198.51.100.0/25"
                            ]
                        }
                    ],
                    "alto-service:pid": "PID1"
                },
                {
                    "alto-service:endpoint-address-group": [
                        {
                            "alto-service:address-type": "ipv4",
                            "alto-service:endpoint-prefix": [
                                "198.51.100.128/25"
                            ]
                        }
                    ],
                    "alto-service:pid": "PID2"
                },
                {
                    "alto-service:endpoint-address-group": [
                        {
                            "alto-service:address-type": "ipv4",
                            "alto-service:endpoint-prefix": [
                                "0.0.0.0/0"
                            ]
                        },
                        {
                            "alto-service:address-type": "ipv6",
                            "alto-service:endpoint-prefix": [
                                "::/0"
                            ]
                        }
                    ],
                    "alto-service:pid": "PID3"
                }
            ],
            "alto-service:resource-id": "test_odl",
            "alto-service:tag": "da65eca2eb7a10ce8b059740b0b2e3f8eb1d4785"
        }
    ]
}</programlisting>

<simpara><anchor xml:id="read-restconf" xreflabel="[read-restconf]"/>Use the following command to see the results:</simpara>
<programlisting language="bash" linenumbering="unnumbered">HOST_IP=localhost                   # IP address of the controller
CREDENTIAL=admin:admin              # username and password for authentication
BASE_URL=$HOST_IP:8181/restconf/config
SERVICE_PATH=alto-service:resources/alto-service:network-maps/alto-service:network-map
RESOURCE_ID=test_odl
curl -X GET -u $CREDENTIAL http://$BASE_URL/$SERVICE_PATH/$RESOURCE_ID</programlisting>

<simpara>Use <literal>DELETE</literal> method to remove the data from the data store.</simpara>
<programlisting language="bash" linenumbering="unnumbered">HOST_IP=localhost                   # IP address of the controller
CREDENTIAL=admin:admin              # username and password for authentication
BASE_URL=$HOST_IP:8181/restconf/config
SERVICE_PATH=alto-service:resources/alto-service:network-maps/alto-service:network-map
RESOURCE_ID=test_odl
curl -X DELETE -H "content-type:application/yang.data+json" \
               -u $CREDENTIAL http://$BASE_URL/$SERVICE_PATH/$RESOURCE_ID</programlisting>

</section>
<section xml:id="_using_literal_alto_manager_literal">
<title>Using <literal>alto-manager</literal></title>
<simpara>The <literal>alto-manager</literal> package provides a karaf command line tool which wraps up
the functions described in the last section.</simpara>
<programlisting language="bash" linenumbering="unnumbered">karaf &gt; alto-create &lt;type&gt; &lt;resource-file&gt;
karaf &gt; alto-delete &lt;type&gt; &lt;resource-id&gt;</programlisting>

<simpara>Currently only <literal>network-map</literal> and <literal>cost-map</literal> are supported. Also the resource
files used in <literal>alto-manager</literal> follow the RFC7285-compatible format instead of
RESTCONF format.</simpara>
<simpara>The following example shows how to use <literal>alto-manager</literal> to put a network map into
the data store.</simpara>
<programlisting language="bash" linenumbering="unnumbered">karaf &gt; alto-create network-map example-rfc7285-networkmap.json</programlisting>

<programlisting language="json" linenumbering="unnumbered">{
    "meta" : {
        "resource-id": "test_odl",
        "tag": "da65eca2eb7a10ce8b059740b0b2e3f8eb1d4785"
    },
    "network-map" : {
        "PID1" : {
            "ipv4": [
                "192.0.2.0/24",
                "192.51.100.0/25"
            ]
        },
        "PID2": {
            "ipv4": [
                "192.51.100.128/25"
            ]
        },
        "PID3": {
            "ipv4": [
                "0.0.0.0/0"
            ],
            "ipv6": [
                "::/0"
            ]
        }
    }
}</programlisting>

</section>
<section xml:id="_using_literal_alto_hosttracker_literal">
<title>Using <literal>alto-hosttracker</literal></title>
<simpara>As a real instance of ALTO services, <literal>alto-hosttracker</literal> reads data from
<literal>l2switch</literal> and generates a network map with resource id
<literal>hosttracker-network-map</literal> and a cost map with resource id <literal>hostracker-cost-map</literal>.
It can only work with OpenFlow-enabled networks.</simpara>
<simpara>After installing the <literal>odl-alto-hosttracker</literal> feature, the corresponding network
map and cost map will be inserted into the data store. Follow the steps in
<link linkend="read-restconf">how to read data with RESTCONF</link> to see the contents.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_authentication_and_authorization_services">
<title>Authentication and Authorization Services</title>
<section xml:id="_authentication_service">
<title>Authentication Service</title>
<simpara>Authentication uses the credentials presented by a user to identify the user.</simpara>
<note>
<simpara>The Authentication user store provided in the Lithium release does not fully support a clustered node deployment. Specifically, the AAA user store provided by the H2 database needs to be synchronized using out of band means. The AAA Token cache is however cluster-capable.</simpara>
</note>

<section xml:id="_authentication_data_model">
<title>Authentication data model</title>
<simpara>A user requests authentication within a domain in which the user has defined roles.
The user chooses either of the following ways to request authentication:</simpara>
<itemizedlist>
<listitem>
<simpara>Provides credentials</simpara>
</listitem>
<listitem>
<simpara>Creates a token scoped to a domain. In OpenDaylight, a domain is a grouping of resources (direct or indirect, physical, logical, or virtual) for the purpose of access control.</simpara>
</listitem>
</itemizedlist>

<section xml:id="_terms_and_definitions_in_the_model">
<title>Terms and definitions in the model</title>
<variablelist>
<varlistentry>
<term>Token</term>
<listitem>
<simpara>A claim of access to a group of resources on the controller</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Domain</term>
<listitem>
<simpara>A group of resources, direct or indirect, physical, logical, or virtual, for the purpose of access control</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>User</term>
<listitem>
<simpara>A person who either owns or has  access to a resource or group of resources on the controller</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Role</term>
<listitem>
<simpara>Opaque representation of a set of permissions, which is merely a unique string as admin or guest</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Credential</term>
<listitem>
<simpara>Proof of identity such as username and password, OTP, biometrics, or others</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Client</term>
<listitem>
<simpara>A service or application that requires access to the controller</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Claim</term>
<listitem>
<simpara>A data set of validated assertions regarding a user, e.g. the role, domain, name, etc.</simpara>
</listitem>
</varlistentry>
</variablelist>

</section>
<section xml:id="_authentication_methods">
<title>Authentication methods</title>
<simpara>There are three ways a user may authenticate in OpenDaylight:<?asciidoc-br?></simpara>
<itemizedlist>
<listitem>
<simpara>Basic HTTP Authentication</simpara>
<itemizedlist>
<listitem>
<simpara>Regular, non-token based, authentication with username/password.</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Token-based Authentication</simpara>
<itemizedlist>
<listitem>
<simpara>Direct authentication:  A user presents username/password and a domain the user wishes to access to the controller and obtains a timed (default is 1 hour) scoped access token.  The user then uses this token to access RESTCONF (for example).</simpara>
</listitem>
<listitem>
<simpara>Federated authentication:  A user presents credentials to a third-party Identity Provider (for example, SSSD) trusted by the controller.  Upon successful authentication, the controller returns a refresh (unscoped) token with a list of domains that the user has access to.  The user then presents this refresh token scoped to a domain that the user has access to obtain a scoped access token.  The user then uses this access token to access RESTCONF (for example).</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<section xml:id="_example_with_token_authentication_using_curl">
<title>Example with token authentication using curl:</title>
<simpara>(username/password = admin/admin, domain = sdn)</simpara>
<programlisting language="bash" linenumbering="unnumbered"># Create a token
curl -ik -d 'grant_type=password&amp;username=admin&amp;password=admin&amp;scope=sdn' http://localhost:8181/oauth2/token

# Use the token (e.g.,  ed3e5e05-b5e7-3865-9f63-eb8ed5c87fb9) obtained from above (default token validity is 1 hour):
curl -ik -H 'Authorization:Bearer ed3e5e05-b5e7-3865-9f63-eb8ed5c87fb9' http://localhost:8181/restconf/config/toaster:toaster</programlisting>

</section>
<section xml:id="_example_with_basic_http_auth_using_curl_asciidoc_br">
<title>Example with basic HTTP auth using curl:<?asciidoc-br?></title>
<programlisting language="bash" linenumbering="unnumbered">curl -ik -u 'admin:admin' http://localhost:8181/restconf/config/toaster:toaster</programlisting>

</section>
</section>
</section>
<section xml:id="_how_the_opendaylight_authentication_service_works">
<title>How the OpenDaylight Authentication Service works</title>
<simpara>In direct authentication, a service relationship exists between the user and the OpenDaylight controller. The user and the controller establish trust that allows them to use, and validate credentials.
The user establishes user identity through credentials.</simpara>
<simpara>In direct authentication, a user request progresses through the following steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The user requests the controller administrator for a  user account.</simpara>
<variablelist>
<varlistentry>
<term></term>
<listitem>
<simpara>Associated with the user account are user credentials, initially created by the administrator.  OpenDaylight supports only username/password credentials. By default, an administrator account is present in OpenDaylight out-of-the-box with the default username and password being admin/admin.
In addition to creating the user account, the controller administrator also assigns roles to that account on one or more domain.  By default, there are two user roles; admin, and user, and there is only one domain; sdn.</simpara>
</listitem>
</varlistentry>
</variablelist>

</listitem>
<listitem>
<simpara>The user presents credentials in a token request to the token service within a domain.</simpara>
</listitem>
<listitem>
<simpara>The request is then passed on to the controller token endpoint.</simpara>
</listitem>
<listitem>
<simpara>The controller token endpoint uses the credential authentication entity which returns a claim for the client.</simpara>
</listitem>
<listitem>
<simpara>The controller token entity transforms the claim (user, domain, and roles) into a token which it then provides to the user.</simpara>
</listitem>
</orderedlist>

<simpara>In federated authentication, with the absence of a direct trust relationship between the user and the service, a third-party Identity Provider (IdP) is used for authentication. Federated authentication relies on third-party identity providers (IdP) to authenticate the user.</simpara>
<simpara>The user is authenticated by the trusted IdP and a claim is returned to the OpenDaylight authentication service.  The claim is transformed into an OpenDaylight claim and successively into a token that is passed on to the user.</simpara>
<simpara>In a federated authentication set-up, the OpenDaylight controller AAA module provides SSSD claim support. SSSD can be used to map users in an external LDAP server to users defined on the OpenDaylight controller.</simpara>
</section>
<section xml:id="_configuring_authentication_service">
<title>Configuring Authentication service</title>
<simpara>Changes to AAA configurations can be made as follows:</simpara>
<simpara>For Authentication functionality via one of:</simpara>
<itemizedlist>
<listitem>
<simpara>Webconsole</simpara>
</listitem>
<listitem>
<simpara>CLI (config command in the Karaf shell)</simpara>
</listitem>
<listitem>
<simpara>Editing the etc/org.opendaylight.aaa.*.cfg files directly</simpara>
</listitem>
</itemizedlist>

<simpara>For Token Cache Store settings via one of:</simpara>
<itemizedlist>
<listitem>
<simpara>Editing the 08-authn-config.xml configuration file in etc/opendaylight/karaf</simpara>
</listitem>
<listitem>
<simpara>Using RESTCONF</simpara>
</listitem>
</itemizedlist>

<note>
<simpara>Configurations for AAA are all dynamic and require no restart.</simpara>
</note>

<section xml:id="_configuring_authentication">
<title>Configuring Authentication</title>
<simpara>To configure features from the Web console:<?asciidoc-br?></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Install the Web console:</simpara>
<screen>feature:install webconsole</screen>

</listitem>
<listitem>
<simpara>On the console (<link xlink:href="http://localhost:8181/system/console">http://localhost:8181/system/console</link>) (default Karaf username/password:  karaf/karaf), go to <emphasis role="strong">OSGi</emphasis> &gt; <emphasis role="strong">Configuration</emphasis> &gt; <emphasis role="strong">OpenDaylight AAA Authentication Configuration</emphasis>.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><emphasis role="strong">Authorized Clients</emphasis>:  List of software clients that are authorized to access OpenDaylight northbound APIs.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Enable Authentication</emphasis>:  Enable or disable authentication. (The default is enable.)</simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

</section>
<section xml:id="_configuring_the_token_store">
<title>Configuring the token store</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Open in a text editor etc/opendaylight/karaf/08-authn-config.xml</simpara>
<variablelist>
<varlistentry>
<term></term>
<listitem>
<simpara>The fields you can configure are as follows:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><emphasis role="strong">timeToLive</emphasis>: Configure the maximum time, in milliseconds, that tokens are to be cached. Default is 360000.</simpara>
</listitem>
</orderedlist>

</listitem>
</varlistentry>
</variablelist>

</listitem>
<listitem>
<simpara>Save the file.</simpara>
</listitem>
</orderedlist>

<note>
<simpara>When token&#8217;s are expired, they are lazily removed from the cache.</simpara>
</note>

</section>
<section xml:id="_configuring_aaa_federation">
<title>Configuring AAA federation</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>On the console, click <emphasis role="strong">OpenDaylight AAA Federation Configuration</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Use the <emphasis role="strong">Custom HTTP Headers</emphasis> or <emphasis role="strong">Custom HTTP Attributes</emphasis> fields to specify the HTTP headers or attributes for federated authentication. Normally, additional specification beyond the default is not
required.</simpara>
</listitem>
</orderedlist>

<note>
<simpara>As the changes you make to the configurations are automatically committed when they are saved, no restart of the Authentication service is required.</simpara>
</note>

<section xml:id="_configuring_federated_authentication">
<title>Configuring federated authentication</title>
<simpara>Use the following steps to set up federated authentication:<?asciidoc-br?></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Set up an Apache front-end and Apache mods for the OpenDaylight controller.</simpara>
</listitem>
<listitem>
<simpara>Set up mapping rules (from LDAP users to OpenDaylight users).</simpara>
</listitem>
<listitem>
<simpara>Use the ClaimAuthFilter in federation to allow claim transformation.</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_mapping_users_to_roles_and_domains">
<title>Mapping users to roles and domains</title>
<simpara>The OpenDaylight authentication service transforms assertions from an external federated IdP into Authentication Service data:<?asciidoc-br?></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The Apache web server which fronts OpenDaylight AAA sends data to SssdAuthFilter.</simpara>
</listitem>
<listitem>
<simpara>SssdAuthFilter constructs a JSON document from the data.</simpara>
</listitem>
<listitem>
<simpara>OpenDaylight Authentication Service uses a general purpose transformation mapper to transform the JSON document.</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_operational_model">
<title>Operational model</title>
<simpara>The mapping model works as follows:<?asciidoc-br?></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Assertions from an IdP are stored in an associative array.</simpara>
</listitem>
<listitem>
<simpara>A sequence of rules is applied, and the first rule which returns success is considered a match.</simpara>
</listitem>
<listitem>
<simpara>Upon success, an associative array of mapped values is returned.</simpara>
<itemizedlist>
<listitem>
<simpara>The mapped values are taken from the local variables set during the rule execution.</simpara>
</listitem>
<listitem>
<simpara>The definition of the rules and mapped results are expressed in JSON notation.</simpara>
</listitem>
</itemizedlist>

</listitem>
</orderedlist>

</section>
<section xml:id="_operational_model_sample_code">
<title>Operational Model: Sample code</title>
<programlisting language="java" linenumbering="unnumbered">mapped = null
foreach rule in rules {
    result = null
    initialize rule.variables with pre-defined values

    foreach block in rule.statement_blocks {
        for statement in block.statements {
            if statement.verb is exit {
                result = exit.status
                break
            }
            elif statement.verb is continue {
                break
            }
        }
        if result {
            break
        }
    if result == null {
        result = success
    }
if result == success {
    mapped = rule.mapping(rule.variables)
}
return mapped</programlisting>

</section>
<section xml:id="_mapping_users">
<title>Mapping Users</title>
<simpara>A JSON Object acts as a mapping template to produce the final associative array of name/value pairs. The value in a name/value pair can be a constant or a variable.
An example of a mapping template and rule variables in JSON:<?asciidoc-br?>
Template:<?asciidoc-br?></simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "organization": "BigCorp.com",
    "user: "$subject",
    "roles": "$roles"
}</programlisting>

<simpara>Local variables:<?asciidoc-br?></simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "subject": "Sally",
    "roles": ["user", "admin"]
}</programlisting>

<simpara>The final mapped result will be:<?asciidoc-br?></simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "organization": "BigCorp.com",
    "user: "Sally",
    "roles": ["user", "admin"]
}</programlisting>

</section>
<section xml:id="_example_splitting_a_fully_qualified_username_into_user_and_realm_components">
<title>Example: Splitting a fully qualified username into user and realm components</title>
<simpara>Some IdPs return a fully qualified username (for example, principal or subject). The fully qualified username is the concatenation of the user name, separator, and realm name.
The following example shows the mapped result that returns the user and realm as independent values for the fully qualified username is <link xlink:href="mailto:bob@example.com">bob@example.com</link> .</simpara>
<simpara>The mapping in JSON:<?asciidoc-br?></simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "user": "$username",
    "realm": "$domain"
}</programlisting>

<simpara>The assertion in JSON:<?asciidoc-br?></simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "Principal": "bob@example.com"
}</programlisting>

<simpara>The rule applied:<?asciidoc-br?></simpara>
<programlisting language="json" linenumbering="unnumbered">[
    [
        ["in", "Principal", "assertion"],
        ["exit", "rule_fails", "if_not_success"],
        ["regexp", "$assertion[Principal]", (?P&lt;username&gt;\\w+)@(?P&lt;domain&gt;.+)"],
        ["set", "$username", "$regexp_map[username]"],
        ["set", "$domain", "$regexp_map[domain]"],
        ["exit, "rule_succeeds", "always"]
    ]
]</programlisting>

<simpara>The mapped result in JSON:<?asciidoc-br?></simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "user": "bob",
    "realm": "example.com"
}</programlisting>

<simpara>Also, users may be granted roles based on their membership in certain groups.</simpara>
<simpara>The Authentication Service allows white lists for users with specific roles. The white lists ensure that users are unconditionally accepted and authorized with specific roles. Users who must be unconditionally denied access can be placed in a black list.</simpara>
</section>
</section>
</section>
</section>
<section xml:id="_administering_opendaylight_authentication_services">
<title>Administering OpenDaylight Authentication Services</title>
<section xml:id="_actors_in_the_system">
<title>Actors in the System</title>
<simpara><emphasis role="strong">OpenDaylight Controller administrator</emphasis><?asciidoc-br?>
The OpenDaylight Controller administrator has the following responsibilities:</simpara>
<itemizedlist>
<listitem>
<simpara>Author Authentication policies using the IdmLight Service API</simpara>
</listitem>
<listitem>
<simpara>Provides credentials, usernames and passwords to users who request them</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">OpenDaylight resource owners</emphasis><?asciidoc-br?>
Resource owners authenticate (either by means of federation or directly providing their own credentials to the controller) to obtain an access token.  This access token can then be used to access resources on the controller.
An OpenDaylight resource owner enjoys the following privileges:</simpara>
<itemizedlist>
<listitem>
<simpara>Creates, refreshes, or deletes access tokens</simpara>
</listitem>
<listitem>
<simpara>Gets access tokens from the Secure Token Service</simpara>
</listitem>
<listitem>
<simpara>Passes secure tokens to resource users</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">OpenDaylight resource users</emphasis><?asciidoc-br?>
Resource users do not need to authenticate: they can access resources if they are given an access tokens by the resource owner.  The default timeout for access tokens is 1 hour (This duration is configurable.).
An OpenDaylight resource user does the following:</simpara>
<itemizedlist>
<listitem>
<simpara>Gets access tokens either from a resource owner or the controller administrator</simpara>
</listitem>
<listitem>
<simpara>Uses tokens at access applications from the north-bound APIs</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_system_components">
<title>System Components</title>
<variablelist>
<varlistentry>
<term>IdmLight Identity manager</term>
<listitem>
<simpara>Stores local user authentication and authorization data, provides an Admin REST API for CRUD operations.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Pluggable authenticators</term>
<listitem>
<simpara>Provides domain-specific authentication mechanisms</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Authenticator</term>
<listitem>
<simpara>Authenticates users against and establishes claims</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Authentication Cache</term>
<listitem>
<simpara>Caches all authentication states and tokens</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Authentication Filter</term>
<listitem>
<simpara>Verifies tokens and extracts claims</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Authentication Manager</term>
<listitem>
<simpara>Contains the session token and authentication claim store</simpara>
</listitem>
</varlistentry>
</variablelist>

<section xml:id="_idmlight_identity_manager">
<title>IdmLight Identity manager</title>
<simpara>The Light-weight Identity Manager (IdmLight) Stores local user authentication and authorization data, and roles and provides an Admin REST API for CRUD operations on the users/roles/domains database.
The IdmLight REST API is by default accessed via the {controller baseURI:8181}/auth/v1/ API end point.
Access to the API is restricted to authenticated clients only, or those possessing a token:</simpara>
<simpara>Example: To retrieve the users list.</simpara>
<programlisting language="bash" linenumbering="unnumbered">curl http://admin:admin@localhost:8181/auth/v1/users</programlisting>

<simpara>The following document contains a detailed list of supported CRUD operations allowed by the API:</simpara>

<literallayout class="monospaced">https://wiki.opendaylight.org/images/a/ad/AAA_Idmlight_REST_APIs.xlsx</literallayout>


</section>
</section>
</section>
<section xml:id="_opendaylight_authorization_service">
<title>OpenDaylight Authorization Service</title>
<simpara>The authorization service currently included in OpenDaylight is of an experimental kind and only briefly documented here.
Authorization follows successful authentication and is modeled on the Role Based Access Control (RBAC) approach for defining permissions and decide access levels to API resources on the controller.</simpara>
</section>
</chapter>
<chapter xml:id="_armoury">
<title>Armoury</title>
<simpara>This section describes how to use the Armoury feature in OpenDaylight
and contains contains configuration, administration, and management
sections for the feature.</simpara>
<section xml:id="_overview_2">
<title>Overview</title>
<simpara>Just as compute needs to make requests to the controller to get networking
resources in order to provide its services, so too does the controller
sometimes need to make requests of the workload manager to get compute
resources and/or network function (NF) (physical or virtual) orchestration
to provide its services.</simpara>
</section>
<section xml:id="_armoury_architecture">
<title>Armoury Architecture</title>
<simpara>There are mainly three components :</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Armoury Catalog</emphasis>
A registry or catalog of the necessary information (images, metadata, templatized
day 0 config, how to communicate with the NF, etc) to describe the NF to the
workload manager and/or network function (NF) (physical or virtual) orchestration.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Armoury Workload Manager</emphasis>
The most minimal possible API to allow applications to request that the workload
manager start/stop/etc the NF and some information from the workload manager/nf
orchestrator about the state of the NF.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Armoury Driver Registry</emphasis>
Example Drivers to talk to various workload managers (OpenStack/Meseophere/Docker/
Kubernetes/etc).</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_armoury_catalog">
<title>Armoury Catalog</title>
<simpara>The NF Catalog contains metadata describing a NF.</simpara>
<section xml:id="_configuring_armoury_catalog">
<title>Configuring Armoury Catalog</title>
<simpara>TBD: Describe how to configure Armoury Catalog after installation.</simpara>
</section>
<section xml:id="_administering_armoury_catalog">
<title>Administering Armoury Catalog</title>
<simpara>TBD: Include related command reference or operations
for using Armoury Catalog.</simpara>
</section>
</section>
<section xml:id="_armoury_workload_manager">
<title>Armoury Workload Manager</title>
<simpara>The Workload Manager defines RPCs to manage instances.</simpara>
<section xml:id="_configuring_armoury_workload_manager">
<title>Configuring Armoury Workload Manager</title>
<simpara>TBD: Describe how to configure Armoury Workload Manager after installation.</simpara>
</section>
<section xml:id="_administering_armoury_workload_manager">
<title>Administering Armoury Workload Manager</title>
<simpara>TBD: Include related command reference or operations
for using Armoury Workload Manager.</simpara>
</section>
</section>
<section xml:id="_armoury_driver_registry">
<title>Armoury Driver Registry</title>
<simpara>The Driver Registry Describes the driver that is used to talk with the
workload manager (OpenStack/Meseophere/Docker/Kubernetes/etc).</simpara>
<section xml:id="_configuring_armoury_driver_registry">
<title>Configuring Armoury Driver Registry</title>
<simpara>TBD: Describe how to configure Armoury Driver Registry.</simpara>
</section>
<section xml:id="_administering_armoury_driver_registry">
<title>Administering Armoury Driver Registry</title>
<simpara>TBD: Include related command reference or operations
for using Driver Registry.</simpara>
</section>
</section>
<section xml:id="_tutorials">
<title>Tutorials</title>
<simpara>Below are tutorials for Armoury.</simpara>
<section xml:id="_using_armoury_catalog">
<title>Using Armoury Catalog</title>
<simpara>TBD: State the purpose of tutorial</simpara>
<section xml:id="_overview_3">
<title>Overview</title>
<simpara>TBD: An overview of the Armoury Catalog tutorial</simpara>
</section>
<section xml:id="_prerequisites">
<title>Prerequisites</title>
<simpara>TBD: Provide any prerequisite information, assumed knowledge, or environment
required to execute the use case.</simpara>
</section>
<section xml:id="_target_environment">
<title>Target Environment</title>
<simpara>TBD: Include any topology requirement for the use case.</simpara>
</section>
<section xml:id="_instructions">
<title>Instructions</title>
<simpara>TBD: Step by step procedure for using Armoury Catalog.</simpara>
</section>
</section>
<section xml:id="_using_armoury_workload_manager">
<title>Using Armoury Workload Manager</title>
<simpara>TBD: State the purpose of tutorial</simpara>
<section xml:id="_overview_4">
<title>Overview</title>
<simpara>TBD: An overview of the Armoury Workload Manager tutorial</simpara>
</section>
<section xml:id="_prerequisites_2">
<title>Prerequisites</title>
<simpara>TBD: Provide any prerequisite information, assumed knowledge, or environment
required to execute the use case.</simpara>
</section>
<section xml:id="_target_environment_2">
<title>Target Environment</title>
<simpara>TBD: Include any topology requirement for the use case.</simpara>
</section>
<section xml:id="_instructions_2">
<title>Instructions</title>
<simpara>TBD: Step by step procedure for using Armoury Workload Manager.</simpara>
</section>
</section>
<section xml:id="_using_armoury_driver_registry">
<title>Using Armoury Driver Registry</title>
<simpara>TBD: State the purpose of tutorial</simpara>
<section xml:id="_overview_5">
<title>Overview</title>
<simpara>TBD: An overview of the Armoury Driver Registry tutorial</simpara>
</section>
<section xml:id="_prerequisites_3">
<title>Prerequisites</title>
<simpara>TBD: Provide any prerequisite information, assumed knowledge, or environment
required to execute the use case.</simpara>
</section>
<section xml:id="_target_environment_3">
<title>Target Environment</title>
<simpara>TBD: Include any topology requirement for the use case.</simpara>
</section>
<section xml:id="_instructions_3">
<title>Instructions</title>
<simpara>TBD: Step by step procedure for using Armoury Driver Registry.</simpara>
</section>
</section>
</section>
</chapter>
<chapter xml:id="_bgp_user_guide">
<title>BGP User Guide</title>
<section xml:id="_overview_6">
<title>Overview</title>
<simpara>The OpenDaylight Karaf distribution comes pre-configured with baseline BGP
configuration. You can find it in the etc/opendaylight/karaf directory and it
consists of two files:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">31-bgp.xml</emphasis> (defines the basic parser and RIB support)</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">41-bgp-example.xml</emphasis> (which contains a sample configuration which needs to be
customized to your deployment)</simpara>
</listitem>
</itemizedlist>

<simpara>The next sections will describe how to configure BGP manually or using RESTCONF.</simpara>
</section>
<section xml:id="_configuring_bgp">
<title>Configuring BGP</title>
<section xml:id="_rib">
<title>RIB</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;module&gt;
    &lt;type&gt;prefix:rib-impl&lt;/type&gt;
    &lt;name&gt;example-bgp-rib&lt;/name&gt;
    &lt;rib-id&gt;example-bgp-rib&lt;/rib-id&gt;
    &lt;local-as&gt;64496&lt;/local-as&gt;
    &lt;bgp-id&gt;192.0.2.2&lt;/bgp-id&gt;
    &lt;cluster-id&gt;192.0.2.3&lt;/cluster-id&gt;
    ...
&lt;/module&gt;</programlisting>

<itemizedlist>
<listitem>
<simpara><emphasis role="strong">rib-id</emphasis> - BGP RIB Identifier, in this configuration file you can specify more BGP RIBs by
copy-pasting the above module. These RIBs must have a unique rib-id and name.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">local-as</emphasis> - Our local AS number (where OpenDaylight is deployed), we use this in best path selection</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">bgp-id</emphasis> - Our local BGP identifier (the IP of the VM where OpenDaylight is deployed),
we use this in best path selection.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">cluster-id</emphasis> - Cluster Identifier, non-mandatory, if not specified, BGP Identifier will be used</simpara>
</listitem>
</itemizedlist>

<simpara>MIGHT NOT BE NEEDED: depending on your BGP router, you might need to switch from
linkstate attribute type 99 to 29. Check with your router vendor. Change the
field iana-linkstate-attribute-type to true if your router supports type 29.
This snippet is located in 31-bgp.xml file.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module&gt;
 &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:linkstate"&gt;prefix:bgp-linkstate&lt;/type&gt;
 &lt;name&gt;bgp-linkstate&lt;/name&gt;
 &lt;iana-linkstate-attribute-type&gt;true&lt;/iana-linkstate-attribute-type&gt;
&lt;/module&gt;</programlisting>

<itemizedlist>
<listitem>
<simpara><emphasis role="strong">iana-linkstate-attribute-type</emphasis> - IANA has issued an early allocation for the
BGP Linkstate path attribute (=29). To preserve (TYPE = 99) set value bellow
to false; to use IANA assigned type set the value to true or remove it as it&#8217;s true by default.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_bgp_peer">
<title>BGP Peer</title>
<simpara>The initial configuration is written so that it will be ignored to prevent the
client from starting with default configuration. Therefore the first step is to
uncomment the module containing bgp-peer.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module&gt;
 &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;prefix:bgp-peer&lt;/type&gt;
 &lt;name&gt;example-bgp-peer&lt;/name&gt;
 &lt;host&gt;192.0.2.1&lt;/host&gt;
 &lt;holdtimer&gt;180&lt;/holdtimer&gt;
 &lt;peer-role&gt;ibgp&lt;/peer-role&gt;
 &lt;rib&gt;
  &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;prefix:rib-instance&lt;/type&gt;
  &lt;name&gt;example-bgp-rib&lt;/name&gt;
 &lt;/rib&gt;
 ...
&lt;/module&gt;</programlisting>

<itemizedlist>
<listitem>
<simpara><emphasis role="strong">name</emphasis> - BGP Peer name, in this configuration file you can specify more BGP Peers by copy-pasting the above module. These peers must have a <emphasis role="strong">unique</emphasis> name.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">host</emphasis> - IP address or hostname of BGP speaker (IP where OpenDaylight should connect to gather topology)</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">holdtimer</emphasis> - unit: seconds</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">peer-role</emphasis> - If peer role is not present, default value "ibgp" will be used (allowed values are also "ebgp" and "rr-client"). This field is case-sensitive.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">rib</emphasis> - BGP RIB identifier</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_configure_connection_attributes_optional">
<title>Configure Connection Attributes - OPTIONAL</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;module&gt;
   &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:reconnectstrategy"&gt;prefix:timed-reconnect-strategy&lt;/type&gt;
   &lt;name&gt;example-reconnect-strategy&lt;/name&gt;
   &lt;min-sleep&gt;1000&lt;/min-sleep&gt;
   &lt;max-sleep&gt;180000&lt;/max-sleep&gt;
   &lt;sleep-factor&gt;2.00&lt;/sleep-factor&gt;
   &lt;connect-time&gt;5000&lt;/connect-time&gt;
   &lt;executor&gt;
       &lt;type xmlns:netty="urn:opendaylight:params:xml:ns:yang:controller:netty"&gt;netty:netty-event-executor&lt;/type&gt;
       &lt;name&gt;global-event-executor&lt;/name&gt;
   &lt;/executor&gt;
&lt;/module&gt;</programlisting>

<itemizedlist>
<listitem>
<simpara><emphasis role="strong">min-sleep</emphasis> - Minimum sleep time (miliseconds) in between reconnect tries</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">max-sleep</emphasis> - Maximum sleep time (miliseconds) in between reconnect tries</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">sleep-factor</emphasis> - Power factor of the sleep time between reconnect tries</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">connect-time</emphasis> - How long we should wait (miliseconds) for the TCP connect
attempt, overrides default connection timeout dictated by TCP retransmits</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_bgp_speaker_configuration">
<title>BGP Speaker Configuration</title>
<simpara>Previous entries addressed the configuration of a BGP connection initiated by
OpenDaylight. OpenDaylight also supports BGP Speaker functionality and accepts
incoming BGP connections.</simpara>
<simpara>*The configuration of BGP speaker is located in: 41-bgp-example.xml:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;prefix:bgp-peer-acceptor&lt;/type&gt;
    &lt;name&gt;bgp-peer-server&lt;/name&gt;

    &lt;!--Default parameters--&gt;
    &lt;!--&lt;binding-address&gt;0.0.0.0&lt;/binding-address&gt;--&gt;
    &lt;!--&lt;binding-port&gt;1790&lt;/binding-port&gt;--&gt;

    ...
    &lt;!--Drops or accepts incoming BGP connection, every BGP Peer that should be accepted needs to be added to this registry--&gt;
    &lt;peer-registry&gt;
        &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;prefix:bgp-peer-registry&lt;/type&gt;
        &lt;name&gt;global-bgp-peer-registry&lt;/name&gt;
    &lt;/peer-registry&gt;
&lt;/module&gt;</programlisting>

<simpara><emphasis role="strong">Changing speaker configuration</emphasis>
- Changing binding address: Uncomment tag binding-address and change the address to e.g. <emphasis>127.0.0.1</emphasis>. The default binding address is <emphasis>0.0.0.0</emphasis>.
- Changing binding port: Uncomment tag binding-port and change the port to e.g.
  <emphasis>1790</emphasis>. The default binding port is <emphasis>179</emphasis> as specified in <link xlink:href="http://tools.ietf.org/html/rfc4271">BGP RFC</link>. &#8201;&#8212;&#8201;</simpara>
</section>
<section xml:id="_incomming_bgp_connections">
<title>Incomming BGP Connections</title>
<simpara><emphasis role="strong">BGP speaker drops all BGP connections from unknown BGP peers.</emphasis> The decision is
made in component bgp-peer-registry that is injected into the speaker (The
registry is configured in 31-bgp.xml).</simpara>
<simpara>To add BGP Peer configuration into the registry, it is necessary to configure
regular BGP peer just like in example in 41-bgp-example.xml. Notice that the
BGP peer depends on the same bgp-peer-registry as bgp-speaker:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;prefix:bgp-peer&lt;/type&gt;
    &lt;name&gt;example-bgp-peer&lt;/name&gt;
    &lt;host&gt;192.0.2.1&lt;/host&gt;
    ...
    &lt;peer-registry&gt;
        &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;prefix:bgp-peer-registry&lt;/type&gt;
        &lt;name&gt;global-bgp-peer-registry&lt;/name&gt;
    &lt;/peer-registry&gt;
    ...
&lt;/module&gt;</programlisting>

<simpara>The BGP peer registers itself into the registry, which allows incoming BGP
connections handled by the bgp-speaker. (Config attribute peer-registry is
optional for now to preserve backwards compatibility). With this configuration,
the connection to 192.0.2.1 is initiated by OpenDaylight but will also be accepted from
192.0.2.1. In case both connections are being established, only one of them
will be preserved and the other will be dropped. The connection initiated from
device with lower bgp id will be dropped by the registry.  Each BGP peer must
be configured in its own module. Note, that the name of the module needs to be
unique, so if you are configuring more peers, when changing the <emphasis role="strong">host</emphasis>, change
also the <emphasis role="strong">name</emphasis>.
There is a way to configure the peer only for incoming connections (The
connection will not be initiated by the OpenDaylight, OpenDaylight will only wait for incoming
connection from the peer. The peer is identified by its IP address). To
configure peer only for incoming connection add attribute initiate-connection
to peer&#8217;s configuration:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;prefix:bgp-peer&lt;/type&gt;
    &lt;name&gt;example-bgp-peer&lt;/name&gt;
    &lt;host&gt;192.0.2.1&lt;/host&gt;                         // IP address or hostname of the speaker
    &lt;holdtimer&gt;180&lt;/holdtimer&gt;
    &lt;initiate-connection&gt;false&lt;/initiate-connection&gt;  // Connection will not be initiated by ODL
    ...
&lt;/module&gt;</programlisting>

<itemizedlist>
<listitem>
<simpara><emphasis role="strong">initiate-connection</emphasis> - if set to false OpenDaylight will not initiate connection to this peer. Default value is true for all peers.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_bgp_application_peer">
<title>BGP Application Peer</title>
<simpara>A BGP speaker needs to register all peers that can be connected to it (meaning if
a BGP peer is not configured, the connection with OpenDaylight won&#8217;t be
successful). As a first step, configure RIB. Then, instead of configuring
regular peer, configure this application peer, with its own application RIB.
Change the value in bold bgp-peer-id which is your local BGP-ID that will be
used in BGP Best Path Selection algorithm.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:bgp-application-peer&lt;/type&gt;
 &lt;name&gt;example-bgp-peer-app&lt;/name&gt;
 &lt;bgp-peer-id&gt;10.25.1.9&lt;/bgp-peer-id&gt;
 &lt;target-rib&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:rib-instance&lt;/type&gt;
  &lt;name&gt;example-bgp-rib&lt;/name&gt;
 &lt;/target-rib&gt;
 &lt;application-rib-id&gt;example-app-rib&lt;/application-rib-id&gt;
 ...
&lt;/module&gt;</programlisting>

<itemizedlist>
<listitem>
<simpara><emphasis role="strong">bgp-peer-id</emphasis> - Our local BGP identifier (the IP of the VM where OpenDaylight is deployed), we use this in best path selection</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">target-rib</emphasis> - RIB ID of existing RIB where the data should be transferred</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">application-rib-id</emphasis> - RIB ID of local application RIB (all the routes that you put to OpenDaylight will be displayed here)</simpara>
</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_configuration_through_restconf">
<title>Configuration through RESTCONF</title>
<simpara>Another method to configure BGP is dynamically through RESTCONF. Before you
start, make sure, you&#8217;ve completed steps 1-5 in Installation Guide. Instead of
restarting Karaf, install another feature, that provides you the access to
<emphasis>restconf/config/</emphasis> URLs.</simpara>
<simpara>feature:install odl-netconf-connector-all</simpara>
<simpara>To check what modules you have currently configured, check following link:
<link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/</link>
This URL is also used to POST new configuration. If you want to change any
other configuration that is listed here, make sure you include the correct
namespaces. RESTCONF will tell you if some namespace is wrong.</simpara>
<simpara>To update  an existing configuration use <emphasis role="strong">PUT</emphasis> and give the full path to the element you  wish to update.</simpara>
<simpara>It is vital that you respect the order of steps described in user guide.</simpara>
<section xml:id="_rib_2">
<title>RIB</title>
<simpara>First, configure RIB. This module is already present in the configuration,
therefore we change only the parameters we need. In this case, it&#8217;s
<emphasis role="strong">bgp-rib-id</emphasis> and <emphasis role="strong">local-as</emphasis>.</simpara>
<simpara><emphasis role="strong">URL:</emphasis> _
<emphasis><link xlink:href="http://127.0.0.1:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/module/odl-bgp-rib-impl-cfg:rib-impl/example-bgp-rib">http://127.0.0.1:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/module/odl-bgp-rib-impl-cfg:rib-impl/example-bgp-rib</link></emphasis></simpara>
<simpara><emphasis role="strong">PUT:</emphasis></simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:rib-impl&lt;/type&gt;
 &lt;name&gt;example-bgp-rib&lt;/name&gt;
 &lt;session-reconnect-strategy xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:protocol:framework"&gt;x:reconnect-strategy-factory&lt;/type&gt;
  &lt;name&gt;example-reconnect-strategy-factory&lt;/name&gt;
 &lt;/session-reconnect-strategy&gt;
 &lt;rib-id xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;example-bgp-rib&lt;/rib-id&gt;
 &lt;extensions xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:spi"&gt;x:extensions&lt;/type&gt;
  &lt;name&gt;global-rib-extensions&lt;/name&gt;
 &lt;/extensions&gt;
 &lt;codec-tree-factory xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:md:sal:binding"&gt;x:binding-codec-tree-factory&lt;/type&gt;
  &lt;name&gt;runtime-mapping-singleton&lt;/name&gt;
 &lt;/codec-tree-factory&gt;
 &lt;tcp-reconnect-strategy xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:protocol:framework"&gt;x:reconnect-strategy-factory&lt;/type&gt;
  &lt;name&gt;example-reconnect-strategy-factory&lt;/name&gt;
 &lt;/tcp-reconnect-strategy&gt;
 &lt;data-provider xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:md:sal:binding"&gt;x:binding-async-data-broker&lt;/type&gt;
  &lt;name&gt;pingpong-binding-data-broker&lt;/name&gt;
 &lt;/data-provider&gt;
 &lt;local-as xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;64496&lt;/local-as&gt;
 &lt;bgp-dispatcher xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type&gt;bgp-dispatcher&lt;/type&gt;
  &lt;name&gt;global-bgp-dispatcher&lt;/name&gt;
 &lt;/bgp-dispatcher&gt;
 &lt;dom-data-provider xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:md:sal:dom"&gt;x:dom-async-data-broker&lt;/type&gt;
  &lt;name&gt;pingpong-broker&lt;/name&gt;
 &lt;/dom-data-provider&gt;
 &lt;local-table xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type&gt;bgp-table-type&lt;/type&gt;
  &lt;name&gt;ipv4-unicast&lt;/name&gt;
 &lt;/local-table&gt;
 &lt;local-table xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type&gt;bgp-table-type&lt;/type&gt;
  &lt;name&gt;ipv6-unicast&lt;/name&gt;
 &lt;/local-table&gt;
 &lt;local-table xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type&gt;bgp-table-type&lt;/type&gt;
  &lt;name&gt;linkstate&lt;/name&gt;
 &lt;/local-table&gt;
 &lt;local-table xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type&gt;bgp-table-type&lt;/type&gt;
  &lt;name&gt;flowspec&lt;/name&gt;
 &lt;/local-table&gt;
 &lt;bgp-rib-id xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;192.0.2.2&lt;/bgp-rib-id&gt;
&lt;/module&gt;</programlisting>

<important>
<simpara>MIGHT NOT BE NEEDED depending on your BGP router, you might need a
switch from linkstate attribute type 99 to 29. Check with your router vendor.
Switch the field to true if your router supports type 29.</simpara>
</important>

<simpara><emphasis role="strong">URL:</emphasis> <emphasis><link xlink:href="http://127.0.0.1:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/module/odl-bgp-linkstate-cfg:bgp-linkstate/bgp-linkstate">http://127.0.0.1:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/module/odl-bgp-linkstate-cfg:bgp-linkstate/bgp-linkstate</link></emphasis></simpara>
<simpara><emphasis role="strong">PUT:</emphasis></simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:linkstate"&gt;x:bgp-linkstate&lt;/type&gt;
 &lt;name&gt;bgp-linkstate&lt;/name&gt;
 &lt;iana-linkstate-attribute-type xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:linkstate"&gt;true&lt;/iana-linkstate-attribute-type&gt;
&lt;/module&gt;</programlisting>

</section>
<section xml:id="_bgp_peer_2">
<title>BGP Peer</title>
<simpara>We also need to add new module to configuration (bgp-peer). In this case, the
whole module needs to be configured. Please change values <emphasis role="strong">host</emphasis>, <emphasis role="strong">holdtimer</emphasis>
and <emphasis role="strong">peer-role</emphasis> (if necessary).</simpara>
<formalpara>
<title><emphasis role="strong">POST:</emphasis></title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:bgp-peer&lt;/type&gt;
 &lt;name&gt;example-bgp-peer&lt;/name&gt;
 &lt;host xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;192.0.2.1&lt;/host&gt;
 &lt;holdtimer xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;180&lt;/holdtimer&gt;
 &lt;peer-role xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;ibgp&lt;/peer-role&gt;
 &lt;rib xmlns"urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:rib-instance&lt;/type&gt;
  &lt;name&gt;example-bgp-rib&lt;/name&gt;
 &lt;/rib&gt;
 &lt;peer-registry xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:bgp-peer-registry&lt;/type&gt;
  &lt;name&gt;global-bgp-peer-registry&lt;/name&gt;
 &lt;/peer-registry&gt;
 &lt;advertized-table xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:bgp-table-type&lt;/type&gt;
  &lt;name&gt;ipv4-unicast&lt;/name&gt;
 &lt;/advertized-table&gt;
 &lt;advertized-table xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:bgp-table-type&lt;/type&gt;
  &lt;name&gt;ipv6-unicast&lt;/name&gt;
 &lt;/advertized-table&gt;
 &lt;advertized-table xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:bgp-table-type&lt;/type&gt;
  &lt;name&gt;linkstate&lt;/name&gt;
 &lt;/advertized-table&gt;
 &lt;advertized-table xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:bgp-table-type&lt;/type&gt;
  &lt;name&gt;flowspec&lt;/name&gt;
 &lt;/advertized-table&gt;
&lt;/module&gt;</programlisting>
</para>
</formalpara>

<simpara>This is all necessary information that you need to get ODL connect to your speaker.</simpara>
</section>
<section xml:id="_bgp_application_peer_2">
<title>BGP Application Peer</title>
<simpara>Change the value <emphasis role="strong">bgp-peer-id</emphasis> which is your local BGP ID that will be used in
BGP Best Path Selection algorithm.</simpara>
<formalpara>
<title><emphasis role="strong">POST:</emphasis></title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:bgp-application-peer&lt;/type&gt;
 &lt;name&gt;example-bgp-peer-app&lt;/name&gt;
 &lt;bgp-peer-id xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;10.25.1.9&lt;/bgp-peer-id&gt; &lt;!-- Your local BGP-ID that will be used in BGP Best Path Selection algorithm --&gt;
 &lt;target-rib xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:rib-instance&lt;/type&gt;
  &lt;name&gt;example-bgp-rib&lt;/name&gt;
  &lt;/target-rib&gt;
 &lt;application-rib-id xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;example-app-rib&lt;/application-rib-id&gt;
 &lt;data-broker xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:md:sal:dom"&gt;x:dom-async-data-broker&lt;/type&gt;
  &lt;name&gt;pingpong-broker&lt;/name&gt;
 &lt;/data-broker&gt;
&lt;/module&gt;</programlisting>
</para>
</formalpara>

</section>
</section>
<section xml:id="_tutorials_2">
<title>Tutorials</title>
<section xml:id="_viewing_bgp_topology">
<title>Viewing BGP Topology</title>
<simpara>This section summarizes how data from BGP can be viewed through RESTCONF. Currently it is the only way to view the data.</simpara>
<important>
<simpara>From Helium release the port changed from 8080 to 8181.</simpara>
</important>

<section xml:id="_network_topology_view">
<title>Network Topology View</title>
<simpara>Basic URL for network topology is <emphasis role="strong"><link xlink:href="http://localhost:8181/restconf/operational/network-topology:network-topology/">http://localhost:8181/restconf/operational/network-topology:network-topology/</link></emphasis> .</simpara>
<simpara>If BGP is configured properly, it should display output similar to this one:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;network-topology&gt;
 &lt;topology&gt;
  &lt;topology-id&gt;pcep-topology&lt;/topology-id&gt;
  &lt;topology-types&gt;
   &lt;topology-pcep/&gt;
  &lt;/topology-types&gt;
 &lt;/topology&gt;
 &lt;topology&gt;
  &lt;server-provided&gt;true&lt;/server-provided&gt;
  &lt;topology-id&gt;example-ipv4-topology&lt;/topology-id&gt;
  &lt;topology-types/&gt;
 &lt;/topology&gt;
 &lt;topology&gt;
  &lt;server-provided&gt;true&lt;/server-provided&gt;
  &lt;topology-id&gt;example-linkstate-topology&lt;/topology-id&gt;
  &lt;topology-types/&gt;
 &lt;/topology&gt;
&lt;/network-topology&gt;</programlisting>

<simpara>BGP data as were sent from BGP speaker are listed in three topologies (if all three are configured):</simpara>
<simpara><emphasis role="strong">example-linkstate-topology</emphasis> - displays links and nodes advertised through linkstate Update messages</simpara>
<simpara><link xlink:href="http://localhost:8181/restconf/operational/network-topology:network-topology/topology/example-linkstate-topology">http://localhost:8181/restconf/operational/network-topology:network-topology/topology/example-linkstate-topology</link></simpara>
<simpara><emphasis role="strong">example-ipv4-topology</emphasis> - display Ipv4 adresses of nodes in the topology</simpara>
<simpara><link xlink:href="http://localhost:8181/restconf/operational/network-topology:network-topology/topology/example-ipv4-topology">http://localhost:8181/restconf/operational/network-topology:network-topology/topology/example-ipv4-topology</link></simpara>
<simpara><emphasis role="strong">example-ipv6-topology</emphasis> - display Ipv6 adresses of nodes in the topology</simpara>
<simpara><link xlink:href="http://localhost:8181/restconf/operational/network-topology:network-topology/topology/example-ipv6-topology">http://localhost:8181/restconf/operational/network-topology:network-topology/topology/example-ipv6-topology</link></simpara>
</section>
<section xml:id="_route_information_base_rib_view">
<title>Route Information Base (RIB) View</title>
<simpara>Another view of BGP data is through <emphasis role="strong">BGP RIBs</emphasis>, located here:</simpara>
<simpara><link xlink:href="http://localhost:8181/restconf/operational/bgp-rib:bgp-rib/">http://localhost:8181/restconf/operational/bgp-rib:bgp-rib/</link></simpara>
<simpara>There are multiple RIBs configured:</simpara>
<itemizedlist>
<listitem>
<simpara>AdjRibsIn (per Peer) : Adjacency RIBs In, BGP routes as they come from BGP Peer</simpara>
</listitem>
<listitem>
<simpara>EffectiveRib (per Peer) : BGP routes after applying Import policies</simpara>
</listitem>
<listitem>
<simpara>LocRib (per RIB) : Local RIB, BGP routes from all peers</simpara>
</listitem>
<listitem>
<simpara>AdjRibsOut (per Peer) : BGP routes that will be advertizes, after applying Export policies</simpara>
</listitem>
</itemizedlist>

<simpara>This is how the output looks like, when address families for IPv4 and Linkstate were configured:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;loc-rib&gt;
 &lt;tables&gt;
  &lt;/attributes&gt;
  &lt;safi&gt;x:linkstate-subsequent-address-family&lt;/safi&gt;
  &lt;afi&gt;x:linkstate-address-family&lt;/afi&gt;
  &lt;/linkstate-routes&gt;
 &lt;/tables&gt;
 &lt;tables&gt;
  &lt;/attributes&gt;
  &lt;safi&gt;x:unicast-subsequent-address-family&lt;/safi&gt;
  &lt;afi&gt;x:ipv4-address-family&lt;/afi&gt;
  &lt;/ipv4-routes&gt;
 &lt;/tables&gt;
&lt;/loc-rib&gt;</programlisting>

<simpara>You can see details for each AFI by expanding the RESTCONF link:</simpara>
<simpara><emphasis role="strong">IPv4</emphasis> : <link xlink:href="http://localhost:8181/restconf/operational/bgp-rib:bgp-rib/rib/example-bgp-rib/loc-rib/tables/bgp-types:ipv4-address-family/bgp-types:unicast-subsequent-address-family/ipv4-routes">http://localhost:8181/restconf/operational/bgp-rib:bgp-rib/rib/example-bgp-rib/loc-rib/tables/bgp-types:ipv4-address-family/bgp-types:unicast-subsequent-address-family/ipv4-routes</link></simpara>
<simpara><emphasis role="strong">Linkstate</emphasis> : <link xlink:href="http://localhost:8181/restconf/operational/bgp-rib:bgp-rib/rib/example-bgp-rib/loc-rib/tables/bgp-linkstate:linkstate-address-family/bgp-linkstate:linkstate-subsequent-address-family/linkstate-routes">http://localhost:8181/restconf/operational/bgp-rib:bgp-rib/rib/example-bgp-rib/loc-rib/tables/bgp-linkstate:linkstate-address-family/bgp-linkstate:linkstate-subsequent-address-family/linkstate-routes</link></simpara>
</section>
</section>
<section xml:id="_populate_rib">
<title>Populate RIB</title>
<simpara>If your peer is configured, you can populate the RIB by making following POST call to RESTCONF:</simpara>
<simpara><emphasis role="strong">URL:</emphasis> <link xlink:href="http://localhost:8181/restconf/config/bgp-rib:application-rib/example-app-rib/tables/bgp-types:ipv4-address-family/bgp-types:unicast-subsequent-address-family/">http://localhost:8181/restconf/config/bgp-rib:application-rib/example-app-rib/tables/bgp-types:ipv4-address-family/bgp-types:unicast-subsequent-address-family/</link></simpara>
<itemizedlist>
<listitem>
<simpara>where example-app-rib is your application RIB id (that you specified in the configuration) and tables specifies AFI and SAFI of the data that you want to add.</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">POST:</emphasis></simpara>
<simpara><emphasis role="strong">Content-Type:</emphasis> application/xml</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;ipv4-routes xmlns="urn:opendaylight:params:xml:ns:yang:bgp-inet"&gt;
 &lt;ipv4-route&gt;
  &lt;prefix&gt;200.20.160.1/32&lt;/prefix&gt;
  &lt;attributes&gt;
   &lt;ipv4-next-hop&gt;
    &lt;global&gt;199.20.160.41&lt;/global&gt;
   &lt;/ipv4-next-hop&gt;&lt;as-path/&gt;
   &lt;multi-exit-disc&gt;
    &lt;med&gt;0&lt;/med&gt;
   &lt;/multi-exit-disc&gt;
   &lt;local-pref&gt;
    &lt;pref&gt;100&lt;/pref&gt;
   &lt;/local-pref&gt;
   &lt;originator-id&gt;
    &lt;originator&gt;41.41.41.41&lt;/originator&gt;
   &lt;/originator-id&gt;
   &lt;origin&gt;
    &lt;value&gt;igp&lt;/value&gt;
   &lt;/origin&gt;
   &lt;cluster-id&gt;
    &lt;cluster&gt;40.40.40.40&lt;/cluster&gt;
   &lt;/cluster-id&gt;
  &lt;/attributes&gt;
 &lt;/ipv4-route&gt;
&lt;/ipv4-routes&gt;</programlisting>

<simpara>The request results in <emphasis role="strong">204 No content</emphasis>. This is expected.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_capwap_user_guide">
<title>CAPWAP User Guide</title>
<simpara>This document describes how to use the Control And Provisioning of Wireless
Access Points (CAPWAP) feature in OpenDaylight.  This document contains
configuration, administration, and management sections for the feature.</simpara>
<section xml:id="_overview_7">
<title>Overview</title>
<simpara>CAPWAP feature fills the gap OpenDaylight Controller has with respect to managing
CAPWAP compliant wireless termination point (WTP) network devices present
in enterprise networks. Intelligent applications (e.g. centralized firmware
management, radio planning) can be developed by tapping into the
WTP network device&#8217;s operational states via REST APIs.</simpara>
</section>
<section xml:id="_capwap_architecture">
<title>CAPWAP Architecture</title>
<simpara>The CAPWAP feature is implemented as an MD-SAL based provider module, which
helps discover WTP devices and update their states in MD-SAL operational datastore.</simpara>
</section>
<section xml:id="_scope_of_capwap_project">
<title>Scope of CAPWAP Project</title>
<simpara>In the Lithium release, CAPWAP project aims to only detect the WTPs and store their
basic attributes in the operational data store, which is accessible via REST
and JAVA APIs.</simpara>
</section>
<section xml:id="_installing_capwap">
<title>Installing CAPWAP</title>
<simpara>To install CAPWAP, download OpenDaylight and use the Karaf console to install
the following feature:</simpara>
<simpara>odl-capwap-ac-rest</simpara>
</section>
<section xml:id="_configuring_capwap">
<title>Configuring CAPWAP</title>
<simpara>As of Lithium, there are no configuration requirements.</simpara>
</section>
<section xml:id="_administering_or_managing_capwap">
<title>Administering or Managing CAPWAP</title>
<simpara>After installing the odl-capwap-ac-rest feature from the Karaf console, users
can administer and manage CAPWAP from the APIDOCS explorer.</simpara>
<simpara>Go to <link xlink:href="http://${ipaddress}:8181/apidoc/explorer/index.html">http://${ipaddress}:8181/apidoc/explorer/index.html</link>, sign in, and expand
the capwap-impl panel.  From there, users can execute various API calls.</simpara>
</section>
<section xml:id="_tutorials_3">
<title>Tutorials</title>
<section xml:id="_viewing_discovered_wtps">
<title>Viewing Discovered WTPs</title>
<section xml:id="_overview_8">
<title>Overview</title>
<simpara>This tutorial can be used as a walk through to understand the steps for
starting the CAPWAP feature, detecting CAPWAP WTPs, accessing the
operational states of WTPs.</simpara>
</section>
<section xml:id="_prerequisites_4">
<title>Prerequisites</title>
<simpara>It is assumed that user has access to at least one hardware/software based CAPWAP
compliant WTP. These devices should be configured with OpenDaylight controller
IP address as a CAPWAP Access Controller (AC) address. It is also assumed that
WTPs and OpenDaylight controller share the same ethernet broadcast domain.</simpara>
</section>
<section xml:id="_instructions_4">
<title>Instructions</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Run the OpenDaylight distribution and install odl-capwap-ac-rest from the Karaf console.</simpara>
</listitem>
<listitem>
<simpara>Go to <link xlink:href="http://${ipaddress}:8181/apidoc/explorer/index.html">http://${ipaddress}:8181/apidoc/explorer/index.html</link></simpara>
</listitem>
<listitem>
<simpara>Expand capwap-impl</simpara>
</listitem>
<listitem>
<simpara>Click /operational/capwap-impl:capwap-ac-root/</simpara>
</listitem>
<listitem>
<simpara>Click "Try it out"</simpara>
</listitem>
<listitem>
<simpara>The above step should display list of WTPs discovered using ODL CAPWAP feature.</simpara>
</listitem>
</orderedlist>

</section>
</section>
</section>
</chapter>
<chapter xml:id="_didm_user_guide">
<title>DIDM User Guide</title>
<section xml:id="_overview_9">
<title>Overview</title>
<simpara>The Device Identification and Driver Management (DIDM) project addresses the
need to provide device-specific functionality. Device-specific functionality is
code that performs a feature, and the code is knowledgeable of the capability
and limitations of the device. For example, configuring VLANs and adjusting
FlowMods are features, and there may be different implementations for different
device types. Device-specific functionality is implemented as Device Drivers.
Device Drivers need to be associated with the devices they can be used with. To
determine this association requires the ability to identify the device type.</simpara>
</section>
<section xml:id="_didm_architecture">
<title>DIDM Architecture</title>
<simpara>The DIDM project creates the infrastructure to support the following functions:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Discovery</emphasis> - Determination that a device exists in the controller
management domain and connectivity to the device can be established. For
devices that support the OpenFlow protocol, the existing discovery
mechanism in OpenDaylight suffices. Devices that do not support OpenFlow
will be discovered through manual means such as the operator entering
device information via GUI or REST API.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Identification</emphasis> – Determination of the device type.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Driver Registration</emphasis> – Registration of Device Drivers as routed RPCs.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Synchronization</emphasis> – Collection of device information, device configuration,
and link (connection) information.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Data Models for Common Features</emphasis> – Data models will be defined to
perform common features such as VLAN configuration. For example,
applications can configure a VLAN by writing the VLAN data to the data store
as specified by the common data model.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">RPCs for Common Features</emphasis> – Configuring VLANs and adjusting
FlowMods are example of features. RPCs will be defined that specify the
APIs for these features. Drivers implement features for specific devices and
support the APIs defined by the RPCs. There may be different Driver
implementations for different device types.</simpara>
</listitem>
</itemizedlist>

</section>
</chapter>
<chapter xml:id="_group_based_policy_user_guide">
<title>Group Based Policy User Guide</title>
<section xml:id="_overview_10">
<title>Overview</title>
<simpara>OpenDaylight Group Based Policy allows users to express network configuration in a declarative versus imperative way.</simpara>
<simpara>This is often described as asking for <emphasis role="strong">"what you want"</emphasis>, rather than <emphasis role="strong">"how to do it"</emphasis>.</simpara>
<simpara>In order to achieve this Group Based Policy (herein referred to as <emphasis role="strong">GBP</emphasis>) is an implementation of an <emphasis role="strong">Intent System</emphasis>.</simpara>
<simpara>An <emphasis role="strong">Intent System</emphasis>:</simpara>
<itemizedlist>
<listitem>
<simpara>is a process around an intent driven data model</simpara>
</listitem>
<listitem>
<simpara>contains no domain specifics</simpara>
</listitem>
<listitem>
<simpara>is capable of addressing multiple semantic definitions of intent</simpara>
</listitem>
</itemizedlist>

<simpara>To this end, <emphasis role="strong">GBP</emphasis> Policy views an <emphasis role="strong">Intent System</emphasis> visually as:</simpara>
<figure>
<title>Intent System Process and Policy Surfaces</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/IntentSystemPolicySurfaces.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>IntentSystemPolicySurfaces</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara><emphasis role="strong">expressed intent</emphasis> is the entry point into the system.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">operational constraints</emphasis> provide policy for the usage of the system which modulates how the system is consumed. For instance <emphasis>"All Financial applications must use a specific encryption standard"</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">capabilities and state</emphasis> are provided by <emphasis>renderers</emphasis>. <emphasis>Renderers</emphasis> dynamically provide their capabilities to the core model, allowing the core model to remain non-domain specific.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">governance</emphasis> provides feedback on the delivery of the <emphasis>expressed intent</emphasis>. i.e. <emphasis>"Did we do what you asked us?"</emphasis></simpara>
</listitem>
</itemizedlist>

<simpara>In summary <emphasis role="strong">GBP is about the Automation of Intent</emphasis>.</simpara>
<simpara>By thinking of <emphasis role="strong">Intent Systems</emphasis> in this way, it enables:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">automation of intent</emphasis></simpara>
<simpara>By focusing on <emphasis role="strong">Model. Process. Automation</emphasis>, a consistent policy resolution process enables for mapping between the <emphasis role="strong">expressed intent</emphasis> and renderers responsible for providing the capabilities of implementing that intent.</simpara>
</listitem>
<listitem>
<simpara>recursive/intent level-independent behaviour.</simpara>
<simpara>Where <emphasis>one person&#8217;s concrete is another&#8217;s abstract</emphasis>, intent can be fulfilled through a hierarchical implementation of non-domain specific policy resolution. Domain specifics are provided by the <emphasis>renderers</emphasis>, and exposed via the API, at each policy resolution instance.
For example:</simpara>
<itemizedlist>
<listitem>
<simpara>To DNS: The name "www.foo.com" is <emphasis>abstract</emphasis>, and it&#8217;s IPv4 address 10.0.0.10 is <emphasis>concrete</emphasis>,</simpara>
</listitem>
<listitem>
<simpara>To an IP stack: 10.0.0.10 is <emphasis>abstract</emphasis> and the MAC 08:05:04:03:02:01 is <emphasis>concrete</emphasis>,</simpara>
</listitem>
<listitem>
<simpara>To an Ethernet switch: The MAC 08:05:04:03:02:01 is <emphasis>abstract</emphasis>, the resolution to a port in it&#8217;s CAM table is <emphasis>concrete</emphasis>,</simpara>
</listitem>
<listitem>
<simpara>To an optical network: The port maybe <emphasis>abstract</emphasis>, yet the optical wavelength is <emphasis>concrete</emphasis>.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<note>
<simpara><emphasis>This is a very domain specific analogy, tied to something most readers will understand. It in no way implies the <emphasis role="strong">GBP</emphasis> should be implemented in an OSI type fashion.
The premise is that by implementing a full <emphasis role="strong">Intent System</emphasis>, the user is freed from a lot of the constraints of how the expressed intent is realised.</emphasis></simpara>
</note>

<simpara>It is important to show the overall philosophy of <emphasis role="strong">GBP</emphasis> as it sets the project&#8217;s direction.</simpara>
<simpara>In the Beryllium release of OpenDaylight, <emphasis role="strong">GBP</emphasis> focused on <emphasis role="strong">expressed intent</emphasis>, <emphasis role="strong">refactoring of how renderers consume and publish Subject Feature Definitions for multi-renderer support</emphasis>.</simpara>
</section>
<section xml:id="_gbp_base_architecture_and_value_proposition">
<title>GBP Base Architecture and Value Proposition</title>
<section xml:id="_terminology">
<title>Terminology</title>
<simpara>In order to explain the fundamental value proposition of <emphasis role="strong">GBP</emphasis>, an illustrated example is given. In order to do that some terminology must be defined.</simpara>
<simpara>The Access Model is the core of the <emphasis role="strong">GBP</emphasis> Intent System policy resolution process.</simpara>
<figure>
<title>GBP Access Model Terminology - Endpoints, EndpointGroups, Contract</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/GBPTerminology1.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>GBPTerminology1</phrase></textobject>
  </mediaobject>
</figure>

<figure>
<title>GBP Access Model Terminology - Subject, Classifier, Action</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/GBPTerminology2.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>GBPTerminology2</phrase></textobject>
  </mediaobject>
</figure>

<figure>
<title>GBP Forwarding Model Terminology - L3 Context, L2 Bridge Context, L2 Flood Context/Domain, Subnet</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/GBPTerminology3.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>GBPTerminology3</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>Endpoints:</simpara>
<simpara>Define concrete uniquely identifiable entities. In Beryllium, examples could be a Docker container, or a Neutron port</simpara>
</listitem>
<listitem>
<simpara>EndpointGroups:</simpara>
<simpara>EndpointGroups are sets of endpoints that share a common set of policies. EndpointGroups can participate in contracts that determine the kinds of communication that are allowed. EndpointGroups <emphasis>consume</emphasis> and <emphasis>provide</emphasis> contracts.
They also expose both <emphasis>requirements and capabilities</emphasis>, which are labels that help to determine how contracts will be applied. An EndpointGroup can specify a parent EndpointGroup from which it inherits.</simpara>
</listitem>
<listitem>
<simpara>Contracts:</simpara>
<simpara>Contracts determine which endpoints can communicate and in what way. Contracts between pairs of EndpointGroups are selected by the contract selectors defined by the EndpointGroup.
Contracts expose qualities, which are labels that can help EndpointGroups to select contracts. Once the contract is selected,
contracts have clauses that can match against requirements and capabilities exposed by EndpointGroups, as well as any conditions
that may be set on endpoints, in order to activate subjects that can allow specific kinds of communication. A contract is allowed to specify a parent contract from which it inherits.</simpara>
</listitem>
<listitem>
<simpara>Subject</simpara>
<simpara>Subjects describe some aspect of how two endpoints are allowed to communicate. Subjects define an ordered list of rules that will match against the traffic and perform any necessary actions on that traffic.
No communication is allowed unless a subject allows that communication.</simpara>
</listitem>
<listitem>
<simpara>Clause</simpara>
<simpara>Clauses are defined as part of a contract. Clauses determine how a contract should be applied to particular endpoints and EndpointGroups. Clauses can match against requirements and capabilities exposed by EndpointGroups,
as well as any conditions that may be set on endpoints. Matching clauses define some set of subjects which can be applied to the communication between the pairs of endpoints.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_architecture_and_value_proposition">
<title>Architecture and Value Proposition</title>
<simpara><emphasis role="strong">GBP</emphasis> offers an intent based interface, accessed via the <link linkend="UX">UX</link>, via the <link linkend="REST">REST API</link> or directly from a domain-specific-language such as <link linkend="Neutron">Neutron</link> through a mapping interface.</simpara>
<simpara>There are two models in <emphasis role="strong">GBP</emphasis>:</simpara>
<itemizedlist>
<listitem>
<simpara>the access (or core) model</simpara>
</listitem>
<listitem>
<simpara>the forwarding model</simpara>
</listitem>
</itemizedlist>

<figure>
<title>GBP Access (or Core) Model</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/GBP_AccessModel_simple.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>GBP AccessModel simple</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The <emphasis>classifier</emphasis> and <emphasis>action</emphasis> portions of the model can be thought of as hooks, with their definition provided by each <emphasis>renderer</emphasis> about its domain specific capabilities. In <emphasis role="strong">GBP</emphasis> Beryllium, there is one renderer,
the <emphasis><link linkend="OfOverlay">OpenFlow Overlay renderer (OfOverlay).</link></emphasis></simpara>
<simpara>These hooks are filled with <emphasis>definitions</emphasis> of the types of <emphasis>features</emphasis> the renderer can provide the <emphasis>subject</emphasis>, and are called <emphasis role="strong">subject-feature-definitions</emphasis>.</simpara>
<simpara>This means an <emphasis>expressed intent</emphasis> can be fulfilled by, and across, multiple renderers simultaneously, without any specific provisioning from the consumer of <emphasis role="strong">GBP</emphasis>.</simpara>
<simpara xml:id="forwarding">Since <emphasis role="strong">GBP</emphasis> is implemented in OpenDaylight, which is an SDN controller, it also must address networking. This is done via the <emphasis>forwarding model</emphasis>, which is domain specific to networking, but could be applied to many different <emphasis>types</emphasis> of networking.</simpara>
<figure>
<title>GBP Forwarding Model</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/GBP_ForwardingModel_simple.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>GBP ForwardingModel simple</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Each endpoint is provisioned with a <emphasis>network-containment</emphasis>. This can be a:</simpara>
<itemizedlist>
<listitem>
<simpara>subnet</simpara>
<itemizedlist>
<listitem>
<simpara>normal IP stack behaviour, where ARP is performed in subnet, and for out of subnet, traffic is sent to default gateway.</simpara>
</listitem>
<listitem>
<simpara>a subnet can be a child of any of the below forwarding model contexts, but typically would be a child of a flood-domain</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>L2 flood-domain</simpara>
<itemizedlist>
<listitem>
<simpara>allows flooding behaviour.</simpara>
</listitem>
<listitem>
<simpara>is a n:1 child of a bridge-domain</simpara>
</listitem>
<listitem>
<simpara>can have multiple children</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>L2 bridge-domain</simpara>
<itemizedlist>
<listitem>
<simpara>is a layer2 namespace</simpara>
</listitem>
<listitem>
<simpara>is the realm where traffic can be sent at layer 2</simpara>
</listitem>
<listitem>
<simpara>is a n:1 child of a L3 context</simpara>
</listitem>
<listitem>
<simpara>can have multiple children</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>L3 context</simpara>
<itemizedlist>
<listitem>
<simpara>is a layer3 namespace</simpara>
</listitem>
<listitem>
<simpara>is the realm where traffic is passed at layer 3</simpara>
</listitem>
<listitem>
<simpara>is a n:1 child of a tenant</simpara>
</listitem>
<listitem>
<simpara>can have multiple children</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<simpara>A simple example of how the access and forwarding models work is as follows:</simpara>
<figure>
<title>GBP Endpoints, EndpointGroups and Contracts</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/GBP_Endpoint_EPG_Contract.png" contentwidth="300"/>
    </imageobject>
    <textobject><phrase>GBP Endpoint EPG Contract</phrase></textobject>
  </mediaobject>
</figure>

<simpara>In this example, the <emphasis role="strong">EPG:webservers</emphasis> is <emphasis>providing</emphasis> the <emphasis>web</emphasis> and <emphasis>ssh</emphasis> contracts. The <emphasis role="strong">EPG:client</emphasis> is consuming those contracts. <emphasis role="strong">EPG:client</emphasis> is providing the <emphasis>any</emphasis> contract, which is consumed by <emphasis role="strong">EPG:webservers</emphasis>.</simpara>
<simpara>The <emphasis>direction</emphasis> keyword is always from the perspective of the <emphasis>provider</emphasis> of the contract. In this case contract <emphasis>web</emphasis>, being <emphasis>provided</emphasis> by <emphasis role="strong">EPG:webservers</emphasis>, with the classifier to match TCP destination port 80, means:</simpara>
<itemizedlist>
<listitem>
<simpara>packets with a TCP destination port of 80</simpara>
</listitem>
<listitem>
<simpara>sent to (<emphasis>in</emphasis>) endpoints in the <emphasis role="strong">EPG:webservers</emphasis></simpara>
</listitem>
<listitem>
<simpara>will be <emphasis>allowed</emphasis>.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>GBP Endpoints and the Forwarding Model</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/GBP_Endpoint_EPG_Forwarding.png" contentwidth="300"/>
    </imageobject>
    <textobject><phrase>GBP Endpoint EPG Forwarding</phrase></textobject>
  </mediaobject>
</figure>

<simpara>When the forwarding model is considered in the figure above, it can be seen that even though all endpoints are communicating using a common set of contracts,
their forwarding is <emphasis>contained</emphasis> by the forwarding model contexts or namespaces.
In the example shown, the endpoints associated with a <emphasis>network-containment</emphasis> that has an ultimate parent of <emphasis>L3Context:Sales</emphasis> can only communicate with other endpoints within this L3Context.
In this way L3VPN services can be implemented without any impact to the <emphasis role="strong">Intent</emphasis> of the contract.</simpara>
<section xml:id="_high_level_implementation_architecture">
<title>High-level implementation Architecture</title>
<simpara>The overall architecture, including <emphasis><link linkend="Neutron">Neutron</link></emphasis> domain specific mapping, and the <link linkend="OfOverlay">OpenFlow Overlay renderer</link> looks as so:</simpara>
<figure>
<title>GBP High Level Beryllium Architecture</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/GBP_High-levelBerylliumArchitecture.png" contentwidth="300"/>
    </imageobject>
    <textobject><phrase>GBP High levelBerylliumArchitecture</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The major benefit of this architecture is that the mapping of the domain-specific-language is completely separate and independent of the underlying renderer implementation.</simpara>
<simpara>For instance, using the <link linkend="Neutron">Neutron Mapper</link>, which maps the Neutron API to the <emphasis role="strong">GBP</emphasis> core model, any contract automatically generated from this mapping can be augmented via the <link linkend="UX">UX</link>
to use <link linkend="SFC">Service Function Chaining</link>, a capability not currently available in OpenStack Neutron.</simpara>
<simpara>When another renderer is added, for instance, NetConf, the same policy can now be leveraged across NetConf devices simultaneously:</simpara>
<figure>
<title>GBP High Level Beryllium Architecture - adding a renderer</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/GBP_High-levelExtraRenderer.png" contentwidth="300"/>
    </imageobject>
    <textobject><phrase>GBP High levelExtraRenderer</phrase></textobject>
  </mediaobject>
</figure>

<simpara>As other domain-specific mappings occur, they too can leverage the same renderers, as the renderers only need to implement the <emphasis role="strong">GBP</emphasis> access and forwarding models, and the domain-specific mapping need only manage mapping to the access and forwarding models. For instance:</simpara>
<figure>
<title>GBP High Level Beryllium Architecture - adding a renderer</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/High-levelBerylliumArchitectureEvolution2.png" contentwidth="300"/>
    </imageobject>
    <textobject><phrase>High levelBerylliumArchitectureEvolution2</phrase></textobject>
  </mediaobject>
</figure>

<simpara>In summary, the <emphasis role="strong">GBP</emphasis> architecture:</simpara>
<itemizedlist>
<listitem>
<simpara>separates concerns: the Expressed Intent is kept completely separated from the underlying renderers.</simpara>
</listitem>
<listitem>
<simpara>is cohesive: each part does it&#8217;s part and it&#8217;s part only</simpara>
</listitem>
<listitem>
<simpara>is scalable: code can be optimised around model mapping/implementation, and functionality re-used</simpara>
</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="policyresolution">
<title>Policy Resolution</title>
<section xml:id="_contract_selection">
<title>Contract Selection</title>
<simpara>The first step in policy resolution is to select the contracts that are in scope.</simpara>
<simpara>EndpointGroups participate in contracts either as a <emphasis>provider</emphasis> or as a <emphasis>consumer</emphasis> of a contract. Each EndpointGroup can participate in many contracts at the same time, but for each contract it can be in only one role at a time.
In addition, there are two ways for an EndpointGroup to select a contract: either with either a:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>named selector</emphasis></simpara>
<simpara>Named selectors simply select a specific contract by its contract ID.</simpara>
</listitem>
<listitem>
<simpara>target selector.</simpara>
<simpara>Target selectors allow for additional flexibility by matching against <emphasis>qualities</emphasis> of the contract&#8217;s <emphasis>target.</emphasis></simpara>
</listitem>
</itemizedlist>

<simpara>Thus, there are a total of 4 kinds of contract selector:</simpara>
<itemizedlist>
<listitem>
<simpara>provider named selector</simpara>
<simpara>Select a contract by contract ID, and participate as a provider.</simpara>
</listitem>
<listitem>
<simpara>provider target selector</simpara>
<simpara>Match against a contract&#8217;s target with a quality matcher, and participate as a provider.</simpara>
</listitem>
<listitem>
<simpara>consumer named selector</simpara>
<simpara>Select a contract by contract ID, and participate as a consumer.</simpara>
</listitem>
<listitem>
<simpara>consumer target selector</simpara>
<simpara>Match against a contract&#8217;s target with a quality matcher, and participate as a consumer.</simpara>
</listitem>
</itemizedlist>

<simpara>To determine which contracts are in scope, contracts are found where either the source EndpointGroup selects a contract as either a provider or consumer,
while the destination EndpointGroup matches against the same contract in the corresponding role.  So if endpoint <emphasis>x</emphasis> in EndpointGroup <emphasis>X</emphasis> is communicating with endpoint <emphasis>y</emphasis>
in EndpointGroup <emphasis>Y</emphasis>, a contract <emphasis>C</emphasis> is in scope if either <emphasis>X</emphasis> selects <emphasis>C</emphasis> as a provider and <emphasis>Y</emphasis> selects <emphasis>C</emphasis> as a consumer, or vice versa.</simpara>
<simpara>The details of how quality matchers work are described further in <link linkend="Matchers">Matchers</link>.
Quality matchers provide a flexible mechanism for contract selection based on labels.</simpara>
<simpara>The end result of the contract selection phase can be thought of as a set of tuples representing selected contract scopes.  The fields of the tuple are:</simpara>
<itemizedlist>
<listitem>
<simpara>Contract ID</simpara>
</listitem>
<listitem>
<simpara>The provider EndpointGroup ID</simpara>
</listitem>
<listitem>
<simpara>The name of the selector in the provider EndpointGroup that was used to select the contract, called the <emphasis>matching provider selector.</emphasis></simpara>
</listitem>
<listitem>
<simpara>The consumer EndpointGroup ID</simpara>
</listitem>
<listitem>
<simpara>The name of the selector in the consumer EndpointGroup that was used to select the contract, called the <emphasis>matching consumer selector.</emphasis></simpara>
</listitem>
</itemizedlist>

<simpara>The result is then stored in the datastore under <emphasis role="strong">Resolved Policy</emphasis>.</simpara>
</section>
<section xml:id="_subject_selection">
<title>Subject Selection</title>
<simpara>The second phase in policy resolution is to determine which subjects are in scope.
The subjects define what kinds of communication are allowed between endpoints in the EndpointGroups.
For each of the selected contract scopes from the contract selection phase, the subject selection procedure is applied.</simpara>
<simpara>Labels called, capabilities, requirements and conditions are matched against to bring a Subject <emphasis>into scope</emphasis>.
EndpointGroups have capabilities and requirements, while endpoints have conditions.</simpara>
</section>
<section xml:id="_requirements_and_capabilities">
<title>Requirements and Capabilities</title>
<simpara>When acting as a <emphasis>provider</emphasis>, EndpointGroups expose <emphasis>capabilities,</emphasis> which are labels representing specific pieces of functionality that can be exposed to other
EndpointGroups that may meet functional requirements of those EndpointGroups.</simpara>
<simpara>When acting as a <emphasis>consumer</emphasis>, EndpointGroups expose <emphasis>requirements</emphasis>, which are labels that represent that the EndpointGroup requires some specific piece of functionality.</simpara>
<simpara>As an example, we might create a capability called "user-database" which indicates that an EndpointGroup contains endpoints that implement a database of users.</simpara>
<simpara>We might create a requirement also called "user-database" to indicate an EndpointGroup contains endpoints that will need to communicate with the endpoints that expose this service.</simpara>
<simpara>Note that in this example the requirement and capability have the same name, but the user need not follow this convention.</simpara>
<simpara>The matching provider selector (that was used by the provider EndpointGroup to select the contract) is examined to determine the capabilities exposed by the provider EndpointGroup for this contract scope.</simpara>
<simpara>The provider selector will have a list of capabilities either directly included in the provider selector or inherited from a parent selector or parent EndpointGroup. (See <link linkend="Inheritance">Inheritance</link>).</simpara>
<simpara>Similarly, the matching consumer selector will expose a set of requirements.</simpara>
</section>
<section xml:id="_conditions">
<title>Conditions</title>
<simpara>Endpoints can have <emphasis>conditions</emphasis>, which are labels representing some relevant piece of operational state related to the endpoint.</simpara>
<simpara>An example of a condition might be "malware-detected," or "authentication-succeeded."  Conditions are used to affect how that particular endpoint can communicate.</simpara>
<simpara>To continue with our example, the "malware-detected" condition might cause an endpoint&#8217;s connectivity to be cut off, while "authentication-succeeded" might open up communication with services
that require an endpoint to be first authenticated and then forward its authentication credentials.</simpara>
</section>
<section xml:id="_clauses">
<title>Clauses</title>
<simpara>Clauses perform the actual selection of subjects.
A clause has lists of matchers in two categories. In order for a clause to become active, all lists of matchers must match.
A matching clause will select all the subjects referenced by the clause.
Note that an empty list of matchers counts as a match.</simpara>
<simpara>The first category is the consumer matchers, which match against the consumer EndpointGroup and endpoints.  The consumer matchers are:</simpara>
<itemizedlist>
<listitem>
<simpara>Group Idenfication Constraint: Requirement matchers</simpara>
<simpara>Matches against requirements in the matching consumer selector.</simpara>
</listitem>
<listitem>
<simpara>Group Identification Constraint: GroupName</simpara>
<simpara>Matches against the group name</simpara>
</listitem>
<listitem>
<simpara>Consumer condition matchers</simpara>
<simpara>Matches against conditions on endpoints in the consumer EndpointGroup</simpara>
</listitem>
<listitem>
<simpara>Consumer Endpoint Identification Constraint</simpara>
<simpara>Label based criteria for matching against endpoints. In Beryllium this can be used to label endpoints based on IpPrefix.</simpara>
</listitem>
</itemizedlist>

<simpara>The second category is the provider matchers, which match against the provider EndpointGroup and endpoints.  The provider matchers are:</simpara>
<itemizedlist>
<listitem>
<simpara>Group Idenfication Constraint: Capability matchers</simpara>
<simpara>Matches against capabilities in the matching provider selector.</simpara>
</listitem>
<listitem>
<simpara>Group Identification Constraint: GroupName</simpara>
<simpara>Matches against the group name</simpara>
</listitem>
<listitem>
<simpara>Consumer condition matchers</simpara>
<simpara>Matches against conditions on endpoints in the provider EndpointGroup</simpara>
</listitem>
<listitem>
<simpara>Consumer Endpoint Identification Constraint</simpara>
<simpara>Label based criteria for matching against endpoints. In Beryllium this can be used to label endpoints based on IpPrefix.</simpara>
</listitem>
</itemizedlist>

<simpara>Clauses have a list of subjects that apply when all the matchers in the clause match.  The output of the subject selection phase logically is a set of subjects that are in scope for any particular pair of endpoints.</simpara>
</section>
<section xml:id="_rule_application">
<title>Rule Application</title>
<simpara>Now subjects have been selected that apply to the traffic between a particular set of endpoints, policy can be applied to allow endpoints to communicate.
The applicable subjects from the previous step will each contain a set of rules.</simpara>
<simpara>Rules consist of a set of <emphasis>classifiers</emphasis> and a set of <emphasis>actions</emphasis>.  Classifiers match against traffic between two endpoints.
An example of a classifier would be something that matches against all TCP traffic on port 80, or one that matches against HTTP traffic containing a particular cookie.
Actions are specific actions that need to be taken on the traffic before it reaches its destination.
Actions could include tagging or encapsulating the traffic in some way, redirecting the traffic, or applying a <link linkend="SFC">service function chain</link>.</simpara>
<simpara>Rules, subjects, and actions have an <emphasis>order</emphasis> parameter, where a lower order value means that a particular item will be applied first.
All rules from a particular subject will be applied before the rules of any other subject, and all actions from a particular rule will be applied before the actions from another rule.
If more than item has the same order parameter, ties are broken with a lexicographic ordering of their names, with earlier names having logically lower order.</simpara>
<section xml:id="Matchers">
<title>Matchers</title>
<simpara>Matchers specify a set of labels (which include requirements, capabilities, conditions, and qualities) to match against.
There are several kinds of matchers that operate similarly:</simpara>
<itemizedlist>
<listitem>
<simpara>Quality matchers</simpara>
<simpara>used in target selectors during the contract selection phase.  Quality matchers provide a more advanced and flexible way to select contracts compared to a named selector.</simpara>
</listitem>
<listitem>
<simpara>Requirement and capability matchers</simpara>
<simpara>used in clauses during the subject selection phase to match against requirements and capabilities on EndpointGroups</simpara>
</listitem>
<listitem>
<simpara>Condition matchers</simpara>
<simpara>used in clauses during the subject selection phase to match against conditions on endpoints</simpara>
</listitem>
</itemizedlist>

<simpara>A matcher is, at its heart, fairly simple.  It will contain a list of label names, along with a <emphasis>match type</emphasis>.
The match type can be either:</simpara>
<itemizedlist>
<listitem>
<simpara>"all"</simpara>
<simpara>which means the matcher matches when all of its labels match</simpara>
</listitem>
<listitem>
<simpara>"any"</simpara>
<simpara>which means the matcher matches when any of its labels match,</simpara>
</listitem>
<listitem>
<simpara>"none"</simpara>
<simpara>which means the matcher matches when none of its labels match.</simpara>
</listitem>
</itemizedlist>

<simpara>Note a <emphasis>match all</emphasis> matcher can be made by matching against an empty set of labels with a match type of "all."</simpara>
<simpara>Additionally each label to match can optionally include a relevant name field.  For quality matchers, this is a target name.
For capability and requirement matchers, this is a selector name.  If the name field is specified, then the matcher will only match against targets or selectors with that name, rather than any targets or selectors.</simpara>
</section>
</section>
<section xml:id="Inheritance">
<title>Inheritance</title>
<simpara>Some objects in the system include references to parents, from which they will inherit definitions.
The graph of parent references must be loop free. When resolving names, the resolution system must detect loops and raise an exception.
Objects that are part of these loops may be considered as though they are not defined at all.
Generally, inheritance works by simply importing the objects in the parent into the child object. When there are objects with the same name in the child object,
then the child object will override the parent object according to rules which are specific to the type of object. We&#8217;ll next explore the detailed rules for inheritance for each type of object</simpara>
<simpara><emphasis role="strong">EndpointGroups</emphasis></simpara>
<simpara>EndpointGroups will inherit all their selectors from their parent EndpointGroups. Selectors with the same names as selectors in the parent EndpointGroups will inherit their behavior as defined below.</simpara>
<simpara><emphasis role="strong">Selectors</emphasis></simpara>
<simpara>Selectors include provider named selectors, provider target selectors, consumer named selectors, and consumer target selectors. Selectors cannot themselves have parent selectors, but when selectors have the same name as a selector of the same type in the parent EndpointGroup, then they will inherit from and override the behavior of the selector in the parent EndpointGroup.</simpara>
<simpara><emphasis role="strong">Named Selectors</emphasis></simpara>
<simpara>Named selectors will add to the set of contract IDs that are selected by the parent named selector.</simpara>
<simpara><emphasis role="strong">Target Selectors</emphasis></simpara>
<simpara>A target selector in the child EndpointGroup with the same name as a target selector in the parent EndpointGroup will inherit quality matchers from the parent. If a quality matcher in the child has the same name as a quality matcher in the parent, then it will inherit as described below under Matchers.</simpara>
<simpara><emphasis role="strong">Contracts</emphasis></simpara>
<simpara>Contracts will inherit all their targets, clauses and subjects from their parent contracts. When any of these objects have the same name as in the parent contract, then the behavior will be as defined below.</simpara>
<simpara><emphasis role="strong">Targets</emphasis></simpara>
<simpara>Targets cannot themselves have a parent target, but it may inherit from targets with the same name as the target in a parent contract. Qualities in the target will be inherited from the parent. If a quality with the same name is defined in the child, then this does not have any semantic effect except if the quality has its inclusion-rule parameter set to "exclude." In this case, then the label should be ignored for the purpose of matching against this target.</simpara>
<simpara><emphasis role="strong">Subjects</emphasis></simpara>
<simpara>Subjects cannot themselves have a parent subject, but it may inherit from a subject with the same name as the subject in a parent contract.
The order parameter in the child subject, if present, will override the order parameter in the parent subject.
The rules in the parent subject will be added to the rules in the child subject. However, the rules will not override rules of the same name. Instead, all rules in the parent subject will be considered to run with a higher order than all rules in the child; that is all rules in the child will run before any rules in the parent. This has the effect of overriding any rules in the parent without the potentially-problematic semantics of merging the ordering.</simpara>
<simpara><emphasis role="strong">Clauses</emphasis></simpara>
<simpara>Clauses cannot themselves have a parent clause, but it may inherit from a clause with the same name as the clause in a parent contract.
The list of subject references in the parent clause will be added to the list of subject references in the child clause. This is just a union operation.
A subject reference that refers to a subject name in the parent contract might have that name overridden in the child contract.
Each of the matchers in the clause are also inherited by the child clause.
Matchers in the child of the same name and type as a matcher from the parent will inherit from and override the parent matcher. See below under Matchers for more information.</simpara>
<simpara><emphasis role="strong">Matchers</emphasis></simpara>
<simpara>Matchers include quality matchers, condition matchers, requirement matchers, and capability matchers.
Matchers cannot themselves have parent matchers, but when there is a matcher of the same name and type in the parent object,
then the matcher in the child object will inherit and override the behavior of the matcher in the parent object.
The match type, if specified in the child, overrides the value specified in the parent.
Labels are also inherited from the parent object. If there is a label with the same name in the child object, this does not have any semantic effect except if the label has its inclusion-rule parameter set to "exclude."
In this case, then the label should be ignored for the purpose of matching. Otherwise, the label with the same name will completely override the label from the parent.</simpara>
</section>
</section>
</section>
<section xml:id="UX">
<title>Using the GBP UX interface</title>
<section xml:id="_overview_11">
<title>Overview</title>
<simpara>These following components make up this application and are described in more detail in following sections:</simpara>
<itemizedlist>
<listitem>
<simpara>Basic view</simpara>
</listitem>
<listitem>
<simpara>Governance view</simpara>
</listitem>
<listitem>
<simpara>Policy Expression view</simpara>
</listitem>
<listitem>
<simpara>Wizard view</simpara>
</listitem>
</itemizedlist>

<simpara>The <emphasis role="strong">GBP</emphasis> UX is access via:</simpara>

<literallayout class="monospaced">http://&lt;odl controller&gt;:8181/index.html</literallayout>


</section>
<section xml:id="_basic_view">
<title>Basic view</title>
<simpara>Basic view contains 5 navigation buttons which switch user to the desired section of application:</simpara>
<itemizedlist>
<listitem>
<simpara>Governance – switch to the Governance view (middle of graphic has the same function)</simpara>
</listitem>
<listitem>
<simpara>Renderer configuration – switch to the Policy expression view with Renderers section expanded</simpara>
</listitem>
<listitem>
<simpara>Policy expression – switch to the Policy expression view with Policy section expanded</simpara>
</listitem>
<listitem>
<simpara>Operational constraints – placeholder for development in next release</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Basic view</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-1-basicview.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ui 1 basicview</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_governance_view">
<title>Governance view</title>
<simpara>Governance view consists from three columns.</simpara>
<figure>
<title>Governance view</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-2-governanceview.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ui 2 governanceview</phrase></textobject>
  </mediaobject>
</figure>

<simpara><emphasis role="strong">Governance view – Basic view – Left column</emphasis></simpara>
<simpara>In the left column is Health section with Exception and Conflict buttons with no functionality yet. This is a placeholder for development in further releases.</simpara>
<simpara><emphasis role="strong">Governance view – Basic view – Middle column</emphasis></simpara>
<simpara>In the top half of this section is select box with list of tenants for select. Once the tenant is selected, all sub sections in application operate and display data with actual selected tenant.</simpara>
<simpara>Below the select box are buttons which display Expressed or Delivered policy of Governance section. In the bottom half of this section is select box with list of renderers for select. There is currently only <link linkend="OfOverlay">OfOverlay</link> renderer available.</simpara>
<simpara>Below the select box is Renderer configuration button, which switch the app into the Policy expression view with Renderers section expanded for performing CRUD operations. Renderer state button display Renderer state view.</simpara>
<simpara><emphasis role="strong">Governance view – Basic view – Right column</emphasis></simpara>
<simpara>In the bottom part of the right section of Governance view is Home button which switch the app to the Basic view.</simpara>
<simpara>In the top part is situated navigation menu with four main sections.</simpara>
<simpara>Policy expression button expand/collapse sub menu with three main parts of Policy expression. By clicking on sub menu buttons, user will be switched into the Policy expressions view with appropriate section expanded for performing CRUD operations.</simpara>
<simpara>Renderer configuration button switches user into the Policy expressions view.</simpara>
<simpara>Governance button expand/collapse sub menu with four main parts of Governance section. Sub menu buttons of Governance section display appropriate section of Governance view.</simpara>
<simpara>Operational constraints have no functionality yet, and is a placeholder for development in further releases.</simpara>
<simpara>Below the menu is place for view info section which displays info about actual selected element from the topology (explained below).</simpara>
<simpara><emphasis role="strong">Governance view – Expressed policy</emphasis></simpara>
<simpara>In this view are displayed contracts with their consumed and provided EndpointGroups of actual selected tenant, which can be changed in select box in the upper left corner.</simpara>
<simpara>By single-clicking on any contract or EPG, the data of actual selected element will be shown in the right column below the menu. A Manage button launches a display wizard window for managing configuration of items such as <link linkend="SFC">Service Function Chaining</link>.</simpara>
<figure>
<title>Expressed policy</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-3-governanceview-expressed.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ui 3 governanceview expressed</phrase></textobject>
  </mediaobject>
</figure>

<simpara><emphasis role="strong">Governance view – Delivered policy</emphasis>
In this view are displayed subjects with their consumed and provided EndpointGroups of actual selected tenant, which can be changed in select box in the upper left corner.</simpara>
<simpara>By single-clicking on any subject or EPG, the data of actual selected element will be shown in the right column below the menu.</simpara>
<simpara>By double-click on subject the subject detail view will be displayed with subject’s rules of actual selected subject, which can be changed in select box in the upper left corner.</simpara>
<simpara>By single-clicking on rule or subject, the data of actual selected element will be shown in the right column below the menu.</simpara>
<simpara>By double-clicking on EPG in Delivered policy view, the EPG detail view will be displayed with EPG’s endpoints of actual selected EPG, which can be changed in select box in the upper left corner.</simpara>
<simpara>By single-clicking on EPG or endpoint the data of actual selected element will be shown in the right column below the menu.</simpara>
<figure>
<title>Delivered policy</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-4-governanceview-delivered-0.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ui 4 governanceview delivered 0</phrase></textobject>
  </mediaobject>
</figure>

<figure>
<title>Subject detail</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-4-governanceview-delivered-1-subject.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ui 4 governanceview delivered 1 subject</phrase></textobject>
  </mediaobject>
</figure>

<figure>
<title>EPG detail</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-4-governanceview-delivered-2-epg.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ui 4 governanceview delivered 2 epg</phrase></textobject>
  </mediaobject>
</figure>

<simpara><emphasis role="strong">Governance view – Renderer state</emphasis></simpara>
<simpara>In this part are displayed Subject feature definition data with two main parts: Action definition and Classifier definition.</simpara>
<simpara>By clicking on the down/right arrow in the circle is possible to expand/hide data of appropriate container or list. Next to the list node are displayed names of list’s elements where one is always selected and element’s data are shown (blue line under the name).</simpara>
<simpara>By clicking on names of children nodes is possible to select desired node and node’s data will be displayed.</simpara>
<figure>
<title>Renderer state</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-4-governanceview-renderer.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ui 4 governanceview renderer</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_policy_expression_view">
<title>Policy expression view</title>
<simpara>In the left part of this view is placed topology of actual selected elements with the buttons for switching between types of topology at the bottom.</simpara>
<simpara>Right column of this view contains four parts. At the top of this column are displayed breadcrumbs with actual position in the application.</simpara>
<simpara>Below the breadcrumbs is select box with list of tenants for select. In the middle part is situated navigation menu, which allows switch to the desired section for performing CRUD operations.</simpara>
<simpara>At the bottom is quick navigation menu with Access Model Wizard button which display Wizard view, Home button which switch application to the Basic view and occasionally Back button, which switch application to the upper section.</simpara>
<simpara><emphasis role="strong">Policy expression  - Navigation menu</emphasis></simpara>
<simpara>To open Policy expression, select Policy expression from the GBP Home screen.</simpara>
<simpara>In the top of navigation box you can select the tenant from the tenants list to activate features addicted to selected tenant.</simpara>
<simpara>In the right menu, by default, the Policy menu section is expanded. Subitems of this section are modules for CRUD (creating, reading, updating and deleting) of tenants, EndpointGroups, contracts, L2/L3 objects.</simpara>
<itemizedlist>
<listitem>
<simpara>Section Renderers contains CRUD forms for Classifiers and Actions.</simpara>
</listitem>
<listitem>
<simpara>Section Endpoints contains CRUD forms for Endpoint and L3 prefix endpoint.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Navigation menu</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-5-expresssion-1.png" contentdepth="400"/>
    </imageobject>
    <textobject><phrase>ui 5 expresssion 1</phrase></textobject>
  </mediaobject>
</figure>

<figure>
<title>CRUD operations</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-5-expresssion-2.png" contentdepth="400"/>
    </imageobject>
    <textobject><phrase>ui 5 expresssion 2</phrase></textobject>
  </mediaobject>
</figure>

<simpara><emphasis role="strong">Policy expression - Types of topology</emphasis></simpara>
<simpara>There are three different types of topology:</simpara>
<itemizedlist>
<listitem>
<simpara>Configured topology - EndpointGroups and contracts between them from CONFIG datastore</simpara>
</listitem>
<listitem>
<simpara>Operational topology - displays same information but is based on operational data.</simpara>
</listitem>
<listitem>
<simpara>L2/L3 - displays relationships between L3Contexts, L2 Bridge domains, L2 Flood domains and Subnets.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>L2/L3 Topology</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-5-expresssion-3.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ui 5 expresssion 3</phrase></textobject>
  </mediaobject>
</figure>

<figure>
<title>Config Topology</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-5-expresssion-4.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ui 5 expresssion 4</phrase></textobject>
  </mediaobject>
</figure>

<simpara><emphasis role="strong">Policy expression - CRUD operations</emphasis></simpara>
<simpara>In this part are described basic flows for viewing, adding, editing and deleting system elements like tenants, EndpointGroups etc.</simpara>
</section>
<section xml:id="_tenants">
<title>Tenants</title>
<simpara>To edit tenant objects click the Tenants button in the right menu. You can see the CRUD form containing tenants list and control buttons.</simpara>
<simpara>To add new tenant, click the Add button This will display the form for adding a new tenant. After filling tenant attributes Name and Description click Save button. Saving of any object can be performed only if all the object attributes are filled correctly. If some attribute doesn&#8217;t have correct value, exclamation mark with mouse-over tooltip will be displayed next to the label for the attribute. After saving of tenant the form will be closed and the tenants list will be set to default value.</simpara>
<simpara>To view an existing tenant, select the tenant from the select box Tenants list. The view form is read-only and can be closed by clicking cross mark in the top right of the form.</simpara>
<simpara>To edit selected tenant, click the Edit button, which will display the edit form for selected tenant. After editing the Name and Description of selected tenant click the Save button to save selected tenant. After saving of tenant the edit form will be closed and the tenants list will be set to default value.</simpara>
<simpara>To delete tenant select the tenant from the Tenants list and click Delete button.</simpara>
<simpara>To return to the Policy expression click Back button on the bottom of window.</simpara>
<simpara><emphasis role="strong">EndpointGroups</emphasis></simpara>
<simpara>For managing EndpointGroups (EPG) the tenant from the top Tenants list must be selected.</simpara>
<simpara>To add new EPG click Add button and after filling required attributes click Save button. After adding the EPG you can edit it and assign Consumer named selector or Provider named selector to it.</simpara>
<simpara>To edit EPG click the Edit button after selecting the EPG from Group list.</simpara>
<simpara>To add new Consumer named selector (CNS) click the Add button next to the Consumer named selectors list. While CNS editing you can set one or more contracts for current CNS pressing the Plus button and selecting the contract from the Contracts list. To remove the contract, click on the cross mark next to the contract. Added CNS can be viewed, edited or deleted by selecting from the Consumer named selectors list and clicking the Edit and Delete buttons like with the EPG or tenants.</simpara>
<simpara>To add new Provider named selector (PNS) click the Add button next to the Provider named selectors list. While PNS editing you can set one or more contracts for current PNS pressing the Plus button and selecting the contract from the Contracts list. To remove the contract, click on the cross mark next to the contract. Added PNS can be viewed, edited or deleted by selecting from the Provider named selectors list and clicking the Edit and Delete buttons like with the EPG or tenants.</simpara>
<simpara>To delete EPG, CNS or PNS select it in selectbox and click the Delete button next to the selectbox.</simpara>
<simpara><emphasis role="strong">Contracts</emphasis></simpara>
<simpara>For managing contracts the tenant from the top Tenants list must be selected.</simpara>
<simpara>To add new Contract click Add button and after filling required fields click Save button.</simpara>
<simpara>After adding the Contract user can edit it by selecting in the Contracts list  and clicking Edit button.</simpara>
<simpara>To add new Clause click Add button next to the Clause list while editing the contract. While editing the Clause after selecting clause from the Clause list user can assign clause subjects by clicking the Plus button next to the Clause subjects label. Adding and editing action must be submitted by pressing Save button. To manage Subjects you can use CRUD form like with the Clause list.</simpara>
<simpara><emphasis role="strong">L2/L3</emphasis></simpara>
<simpara>For managing L2/L3 the tenant from the top Tenants list must be selected.</simpara>
<simpara>To add L3 Context click the Add button next to the L3 Context list ,which will display the form for adding a new L3 Context. After filling L3 Context attributes click Save button. After saving of L3 Context, form will be closed and the L3 Context list will be set to default value.</simpara>
<simpara>To view an existing L3 Context, select the L3 Context from the select box L3 Context list. The view form is read-only and can be closed by clicking cross mark in the top right of the form.</simpara>
<simpara>If user wants to edit selected L3 Context, click the Edit button, which will display the edit form for selected L3 Context. After editing click the Save button to save selected L3 Context. After saving of L3 Context, the edit form will be closed and the L3 Context list will be set to default value.</simpara>
<simpara>To delete L3 Context, select it from the L3 Context list and click Delete button.</simpara>
<simpara>To add L2 Bridge Domain, click the Add button next to the L2 Bridge Domain list. This will display the form for adding a new L2 Bridge Domain. After filling L2 Bridge Domain attributes click Save button. After saving of L2 Bridge Domain, form will be closed and the L2 Bridge Domain list will be set to default value.</simpara>
<simpara>To view an existing L2 Bridge Domain, select the L2 Bridge Domain from the select box L2 Bridge Domain list. The view form is read-only and can be closed by clicking cross mark in the top right of the form.</simpara>
<simpara>If user wants to edit selected L2 Bridge Domain, click the Edit button, which will display the edit form for selected L2 Bridge Domain. After editing click the Save button to save selected L2 Bridge Domain. After saving of L2 Bridge Domain the edit form will be closed and the L2 Bridge Domain list will be set to default value.</simpara>
<simpara>To delete L2 Bridge Domain select it from the L2 Bridge Domain list and click Delete button.</simpara>
<simpara>To add L3 Flood Domain, click the Add button next to the L3 Flood Domain list. This will display the form for adding a new L3 Flood Domain. After filling L3 Flood Domain attributes click Save button. After saving of L3 Flood Domain, form will be closed and the L3 Flood Domain list will be set to default value.</simpara>
<simpara>To view an existing L3 Flood Domain, select the L3 Flood Domain from the select box L3 Flood Domain list. The view form is read-only and can be closed by clicking cross mark in the top right of the form.</simpara>
<simpara>If user wants to edit selected L3 Flood Domain, click the Edit button, which will display the edit form for selected L3 Flood Domain. After editing click the Save button to save selected L3 Flood Domain. After saving of L3 Flood Domain the edit form will be closed and the L3 Flood Domain list will be set to default value.</simpara>
<simpara>To delete L3 Flood Domain select it from the L3 Flood Domain list and click Delete button.</simpara>
<simpara>To add Subnet click the Add button next to the Subnet list. This will display the form for adding a new Subnet. After filling Subnet attributes click Save button. After saving of Subnet, form will be closed and the Subnet list will be set to default value.</simpara>
<simpara>To view an existing Subnet, select the Subnet from the select box Subnet list. The view form is read-only and can be closed by clicking cross mark in the top right of the form.</simpara>
<simpara>If user wants to edit selected Subnet, click the Edit button, which will display the edit form for selected Subnet. After editing click the Save button to save selected Subnet. After saving of Subnet the edit form will be closed and the Subnet list will be set to default value.</simpara>
<simpara>To delete Subnet select it from the Subnet list and click Delete button.</simpara>
<simpara><emphasis role="strong">Classifiers</emphasis></simpara>
<simpara>To add Classifier, click the Add button next to the Classifier list. This will display the form for adding a new Classifier. After filling Classifier attributes click Save button. After saving of Classifier, form will be closed and the Classifier list will be set to default value.</simpara>
<simpara>To view an existing Classifier, select the Classifier from the select box Classifier list. The view form is read-only and can be closed by clicking cross mark in the top right of the form.</simpara>
<simpara>If you want to edit selected Classifier, click the Edit button, which will display the edit form for selected Classifier. After editing click the Save button to save selected Classifier. After saving of Classifier the edit form will be closed and the Classifier list will be set to default value.</simpara>
<simpara>To delete Classifier select it from the Classifier list and click Delete button.</simpara>
<simpara><emphasis role="strong">Actions</emphasis></simpara>
<simpara>To add Action, click the Add button next to the Action list. This will display the form for adding a new Action. After filling Action attributes click Save button. After saving of Action, form will be closed and the Action list will be set to default value.</simpara>
<simpara>To view an existing Action, select the Action from the select box Action list. The view form is read-only and can be closed by clicking cross mark in the top right of the form.</simpara>
<simpara>If user wants to edit selected Action, click the Edit button, which will display the edit form for selected Action. After editing click the Save button to save selected Action. After saving of Action the edit form will be closed and the Action list will be set to default value.</simpara>
<simpara>To delete Action select it from the Action list and click Delete button.</simpara>
<simpara><emphasis role="strong">Endpoint</emphasis></simpara>
<simpara>To add Endpoint, click the Add button next to the Endpoint list. This will display the form for adding a new Endpoint. To add EndpointGroup assignment click the Plus button next to the label EndpointGroups. To add Condition click Plus button next to the label Condition. To add L3 Address click the Plus button next to the L3 Addresses label. After filling Endpoint attributes click Save button. After saving of Endpoint, form will be closed and the Endpoint list will be set to default value.</simpara>
<simpara>To view an existing Endpoint just, the Endpoint from the select box Endpoint list. The view form is read-only and can be closed by clicking cross mark in the top right of the form.</simpara>
<simpara>If you want to edit selected Endpoint, click the Edit button, which will display the edit form for selected Endpoint. After editing click the Save button to save selected Endpoint. After saving of Endpoint the edit form will be closed and the Endpoint list will be set to default value.</simpara>
<simpara>To delete Endpoint select it from the Endpoint list and click Delete button.</simpara>
<simpara><emphasis role="strong">L3 prefix endpoint</emphasis></simpara>
<simpara>To add L3 prefix endpoint, click the Add button next to the L3 prefix endpoint list. This will display the form for adding a new Endpoint. To add EndpointGroup assignment, click the Plus button next to the label EndpointGroups. To add Condition, click Plus button next to the label Condition. To add L2 gateway click the Plus button next to the L2 gateways label.  To add L3 gateway, click the Plus button next to the L3 gateways label. After filling L3 prefix endpoint attributes click Save button. After saving of L3 prefix endpoint, form will be closed and the Endpoint list will be set to default value.</simpara>
<simpara>To view an existing L3 prefix endpoint, select the Endpoint from the select box L3 prefix endpoint list. The view form is read-only and can be closed by clicking cross mark in the top right of the form.</simpara>
<simpara>If you want to edit selected L3 prefix endpoint, click the Edit button, which will display the edit form for selected L3 prefix endpoint. After editing click the Save button to save selected L3 prefix endpoint. After saving of Endpoint the edit form will be closed and the Endpoint list will be set to default value.</simpara>
<simpara>To delete Endpoint select it from the L3 prefix endpoint list and click Delete button.</simpara>
</section>
<section xml:id="_wizard">
<title>Wizard</title>
<simpara>Wizard provides quick method to send basic data to controller necessary for basic usage of GBP application. It is useful in the case that there aren’t any data in controller. In the first tab is form for create tenant. The second tab is for CRUD operations with contracts and their sub elements such as subjects, rules, clauses, action refs and classifier refs. The last tab is for CRUD operations with EndpointGroups and their CNS and PNS. Created structure of data is possible to send by clicking on Submit button.</simpara>
<figure>
<title>Wizard</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ui-6-wizard.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ui 6 wizard</phrase></textobject>
  </mediaobject>
</figure>

</section>
</section>
<section xml:id="REST">
<title>Using the GBP API</title>
<simpara>Please see:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="OfOverlay">Using the GBP OpenFlow Overlay (OfOverlay) renderer</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="policyresolution">Policy Resolution</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="forwarding">Forwarding Model</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="demo">the <emphasis role="strong">GBP</emphasis> demo and development environments for tips</link></simpara>
</listitem>
</itemizedlist>

<simpara>It is recommended to use either:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="Neutron">Neutron mapper</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="UX">the UX</link></simpara>
</listitem>
</itemizedlist>

<simpara>If the REST API must be used, and the above resources are not sufficient:</simpara>
<itemizedlist>
<listitem>
<simpara>feature:install odl-dlux-yangui</simpara>
</listitem>
<listitem>
<simpara>browse to: <link xlink:href="http://&lt;odl-controller&gt;:8181/index.html">http://&lt;odl-controller&gt;:8181/index.html</link> and select YangUI from the left menu.</simpara>
</listitem>
</itemizedlist>

<simpara>to explore the various <emphasis role="strong">GBP</emphasis> REST options</simpara>
</section>
<section xml:id="Neutron">
<title>Using OpenStack with GBP</title>
<section xml:id="_overview_12">
<title>Overview</title>
<simpara>This section is for Application Developers and Network Administrators
who are looking to integrate Group Based Policy with OpenStack.</simpara>
<simpara>To enable the <emphasis role="strong">GBP</emphasis> Neutron Mapper feature, at the Karaf console:</simpara>

<literallayout class="monospaced">feature:install odl-groupbasedpolicy-neutronmapper</literallayout>


<simpara>Neutron Mapper has the following dependencies that are automatically loaded:</simpara>

<literallayout class="monospaced">odl-neutron-service</literallayout>


<simpara>Neutron Northbound implementing REST API used by OpenStack</simpara>

<literallayout class="monospaced">odl-groupbasedpolicy-base</literallayout>


<simpara>Base <emphasis role="strong">GBP</emphasis> feature set, such as policy resolution, data model etc.</simpara>

<literallayout class="monospaced">odl-groupbasedpolicy-ofoverlay</literallayout>


<simpara>REST calls from OpenStack Neutron are by the Neutron NorthBound project.</simpara>
<simpara><emphasis role="strong">GBP</emphasis> provides the implementation of the <link xlink:href="http://developer.openstack.org/api-ref-networking-v2.html">Neutron V2.0 API</link>.</simpara>
</section>
<section xml:id="_features">
<title>Features</title>
<simpara>List of supported Neutron entities:</simpara>
<itemizedlist>
<listitem>
<simpara>Port</simpara>
</listitem>
<listitem>
<simpara>Network</simpara>
<itemizedlist>
<listitem>
<simpara>Standard Internal</simpara>
</listitem>
<listitem>
<simpara>External provider L2/L3 network</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Subnet</simpara>
</listitem>
<listitem>
<simpara>Security-groups</simpara>
</listitem>
<listitem>
<simpara>Routers</simpara>
<itemizedlist>
<listitem>
<simpara>Distributed functionality with local routing per compute</simpara>
</listitem>
<listitem>
<simpara>External gateway access per compute node (dedicated port required)</simpara>
</listitem>
<listitem>
<simpara>Multiple routers per tenant</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>FloatingIP NAT</simpara>
</listitem>
<listitem>
<simpara>IPv4/IPv6 support</simpara>
</listitem>
</itemizedlist>

<simpara>The mapping of Neutron entities to <emphasis role="strong">GBP</emphasis> entities is as follows:</simpara>
<simpara><emphasis role="strong">Neutron Port</emphasis></simpara>
<figure>
<title>Neutron Port</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/neutronmapper-gbp-mapping-port.png" contentwidth="300"/>
    </imageobject>
    <textobject><phrase>neutronmapper gbp mapping port</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The Neutron port is mapped to an endpoint.</simpara>
<simpara>The current implementation supports one IP address per Neutron port.</simpara>
<simpara>An endpoint and L3-endpoint belong to multiple EndpointGroups if the Neutron port is in multiple Neutron Security Groups.</simpara>
<simpara>The key for endpoint is L2-bridge-domain obtained as the parent of L2-flood-domain representing Neutron network. The MAC address is from the Neutron port.
An L3-endpoint is created based on L3-context (the parent of the L2-bridge-domain) and IP address of Neutron Port.</simpara>
<simpara><emphasis role="strong">Neutron Network</emphasis></simpara>
<figure>
<title>Neutron Network</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/neutronmapper-gbp-mapping-network.png" contentwidth="300"/>
    </imageobject>
    <textobject><phrase>neutronmapper gbp mapping network</phrase></textobject>
  </mediaobject>
</figure>

<simpara>A Neutron network has the following characteristics:</simpara>
<itemizedlist>
<listitem>
<simpara>defines a broadcast domain</simpara>
</listitem>
<listitem>
<simpara>defines a L2 transmission domain</simpara>
</listitem>
<listitem>
<simpara>defines a L2 name space.</simpara>
</listitem>
</itemizedlist>

<simpara>To represent this, a Neutron Network is mapped to multiple <emphasis role="strong">GBP</emphasis> entities.
The first mapping is to an L2 flood-domain to reflect that the Neutron network is one flooding or broadcast domain.
An L2-bridge-domain is then associated as the parent of L2 flood-domain. This reflects both the L2 transmission domain as well as the L2 addressing namespace.</simpara>
<simpara>The third mapping is to L3-context, which represents the distinct L3 address space.
The L3-context is the parent of L2-bridge-domain.</simpara>
<simpara><emphasis role="strong">Neutron Subnet</emphasis></simpara>
<figure>
<title>Neutron Subnet</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/neutronmapper-gbp-mapping-subnet.png" contentwidth="300"/>
    </imageobject>
    <textobject><phrase>neutronmapper gbp mapping subnet</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Neutron subnet is associated with a Neutron network. The Neutron subnet is mapped to a <emphasis role="strong">GBP</emphasis> subnet where the parent of the subnet is L2-flood-domain representing the Neutron network.</simpara>
<simpara><emphasis role="strong">Neutron Security Group</emphasis></simpara>
<figure>
<title>Neutron Security Group and Rules</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/neutronmapper-gbp-mapping-securitygroup.png" contentwidth="300"/>
    </imageobject>
    <textobject><phrase>neutronmapper gbp mapping securitygroup</phrase></textobject>
  </mediaobject>
</figure>

<simpara><emphasis role="strong">GBP</emphasis> entity representing Neutron security-group is EndpointGroup.</simpara>
<simpara><emphasis role="strong">Infrastructure EndpointGroups</emphasis></simpara>
<simpara>Neutron-mapper automatically creates EndpointGroups to manage key infrastructure items such as:</simpara>
<itemizedlist>
<listitem>
<simpara>DHCP EndpointGroup - contains endpoints representing Neutron DHCP ports</simpara>
</listitem>
<listitem>
<simpara>Router EndpointGroup - contains endpoints representing Neutron router interfaces</simpara>
</listitem>
<listitem>
<simpara>External EndpointGroup - holds L3-endpoints representing Neutron router gateway ports, also associated with FloatingIP ports.</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">Neutron Security Group Rules</emphasis></simpara>
<simpara>This is the most involved amongst all the mappings because Neutron security-group-rules are mapped to contracts with clauses,
subjects, rules, action-refs, classifier-refs, etc.
Contracts are used between EndpointGroups representing Neutron Security Groups.
For simplification it is important to note that Neutron security-group-rules are similar to a <emphasis role="strong">GBP</emphasis> rule containing:</simpara>
<itemizedlist>
<listitem>
<simpara>classifier with direction</simpara>
</listitem>
<listitem>
<simpara>action of <emphasis role="strong">allow</emphasis>.</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">Neutron Routers</emphasis></simpara>
<figure>
<title>Neutron Router</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/neutronmapper-gbp-mapping-router.png" contentwidth="300"/>
    </imageobject>
    <textobject><phrase>neutronmapper gbp mapping router</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Neutron router is represented as a L3-context. This treats a router as a Layer3 namespace, and hence every network attached to it a part
of that Layer3 namespace.</simpara>
<simpara>This allows for multiple routers per tenant with complete isolation.</simpara>
<simpara>The mapping of the router to an endpoint represents the router&#8217;s interface or gateway port.</simpara>
<simpara>The mapping to an EndpointGroup represents the internal infrastructure EndpointGroups created by the <emphasis role="strong">GBP</emphasis> Neutron Mapper</simpara>
<simpara>When a Neutron router interface is attached to a network/subnet, that network/subnet and its associated endpoints or Neutron Ports are seamlessly added to the namespace.</simpara>
<simpara><emphasis role="strong">Neutron FloatingIP</emphasis></simpara>
<simpara>When associated with a Neutron Port, this leverages the <link linkend="OfOverlay">OfOverlay</link> renderer&#8217;s NAT capabilities.</simpara>
<simpara>A dedicated <emphasis>external</emphasis> interface on each Nova compute host allows for disitributed external access. Each Nova instance associated with a
FloatingIP address can access the external network directly without having to route via the Neutron controller, or having to enable any form
of Neutron distributed routing functionality.</simpara>
<simpara>Assuming the gateway provisioned in the Neutron Subnet command for the external network is reachable, the combination of <emphasis role="strong">GBP</emphasis> Neutron Mapper and
<link linkend="OfOverlay">OfOverlay renderer</link> will automatically ARP for this default gateway, requiring no user intervention.</simpara>
<simpara><emphasis role="strong">Troubleshooting within GBP</emphasis></simpara>
<simpara>Logging level for the mapping functionality can be set for package org.opendaylight.groupbasedpolicy.neutron.mapper. An example of enabling TRACE logging level on Karaf console:</simpara>

<literallayout class="monospaced">log:set TRACE org.opendaylight.groupbasedpolicy.neutron.mapper</literallayout>


<simpara><emphasis role="strong">Neutron mapping example</emphasis></simpara>
<simpara>As an example for mapping can be used creation of Neutron network, subnet and port.
When a Neutron network is created 3 <emphasis role="strong">GBP</emphasis> entities are created: l2-flood-domain, l2-bridge-domain, l3-context.</simpara>
<figure>
<title>Neutron network mapping</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/neutronmapper-gbp-mapping-network-example.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>neutronmapper gbp mapping network example</phrase></textobject>
  </mediaobject>
</figure>

<simpara>After an subnet is created in the network mapping looks like this.</simpara>
<figure>
<title>Neutron subnet mapping</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/neutronmapper-gbp-mapping-subnet-example.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>neutronmapper gbp mapping subnet example</phrase></textobject>
  </mediaobject>
</figure>

<simpara>If an Neutron port is created in the subnet an endpoint and l3-endpoint are created. The endpoint has key composed from l2-bridge-domain and MAC address from Neutron port. A key of l3-endpoint is compesed from l3-context and IP address. The network containment of endpoint and l3-endpoint points to the subnet.</simpara>
<figure>
<title>Neutron port mapping</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/neutronmapper-gbp-mapping-port-example.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>neutronmapper gbp mapping port example</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_configuring_gbp_neutron">
<title>Configuring GBP Neutron</title>
<simpara>No intervention passed initial OpenStack setup is required by the user.</simpara>
<simpara>More information about configuration can be found in our DevStack demo environment on the <link xlink:href="https://wiki.opendaylight.org/view/Group_Based_Policy_(GBP)"><emphasis role="strong">GBP</emphasis> wiki</link>.</simpara>
</section>
<section xml:id="_administering_or_managing_gbp_neutron">
<title>Administering or Managing GBP Neutron</title>
<simpara>For consistencies sake, all provisioning should be performed via the Neutron API. (CLI or Horizon).</simpara>
<simpara>The mapped policies can be augmented via the <emphasis role="strong">GBP</emphasis> <link linkend="UX">UX</link>, to:</simpara>
<itemizedlist>
<listitem>
<simpara>Enable <link linkend="SFC">Service Function Chaining</link></simpara>
</listitem>
<listitem>
<simpara>Add endpoints from outside of Neutron i.e. VMs/containers not provisioned in OpenStack</simpara>
</listitem>
<listitem>
<simpara>Augment policies/contracts derived from Security Group Rules</simpara>
</listitem>
<listitem>
<simpara>Overlay additional contracts or groupings</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_tutorials_4">
<title>Tutorials</title>
<simpara>A DevStack demo environment can be found on the <link xlink:href="https://wiki.opendaylight.org/view/Group_Based_Policy_(GBP)"><emphasis role="strong">GBP</emphasis> wiki</link>.</simpara>
</section>
</section>
<section xml:id="OfOverlay">
<title>Using the GBP OpenFlow Overlay (OfOverlay) renderer</title>
<section xml:id="_overview_13">
<title>Overview</title>
<simpara>The OpenFlow Overlay (OfOverlay) feature enables the OpenFlow Overlay
renderer, which creates a network virtualization solution across nodes
that host Open vSwitch software switches.</simpara>
<section xml:id="_installing_and_pre_requisites">
<title>Installing and Pre-requisites</title>
<simpara>From the Karaf console in OpenDaylight:</simpara>

<literallayout class="monospaced">feature:install odl-groupbasedpolicy-ofoverlay</literallayout>


<simpara>This renderer is designed to work with OpenVSwitch (OVS) 2.1+ (although 2.3 is strongly recommended) and OpenFlow 1.3.</simpara>
<simpara>When used in conjunction with the <link linkend="Neutron">Neutron Mapper feature</link> no extra OfOverlay specific setup is required.</simpara>
<simpara>When this feature is loaded "standalone", the user is required to configure infrastructure, such as</simpara>
<itemizedlist>
<listitem>
<simpara>instantiating OVS bridges,</simpara>
</listitem>
<listitem>
<simpara>attaching hosts to the bridges,</simpara>
</listitem>
<listitem>
<simpara>and creating the VXLAN/VXLAN-GPE tunnel ports on the bridges.</simpara>
</listitem>
</itemizedlist>

<simpara xml:id="offset">The <emphasis role="strong">GBP</emphasis> OfOverlay renderer also supports a table offset option, to offset the pipeline post-table 0.
The value of table offset is stored in the config datastore and it may be rewritten at runtime.</simpara>
<screen>PUT http://{{controllerIp}}:8181/restconf/config/ofoverlay:of-overlay-config
{
    "of-overlay-config": {
        "gbp-ofoverlay-table-offset": 6
    }
}</screen>

<simpara>The default value is set by changing:
 &lt;gbp-ofoverlay-table-offset&gt;0&lt;/gbp-ofoverlay-table-offset&gt;</simpara>
<simpara>in file:
distribution-karaf/target/assembly/etc/opendaylight/karaf/15-groupbasedpolicy-ofoverlay.xml</simpara>
<simpara>To avoid overwriting runtime changes, the default value is used only when the OfOverlay renderer starts and no other
value has been written before.</simpara>
</section>
</section>
<section xml:id="_openflow_overlay_architecture">
<title>OpenFlow Overlay Architecture</title>
<simpara>These are the primary components of <emphasis role="strong">GBP</emphasis>. The OfOverlay components are highlighted in red.</simpara>
<figure>
<title>OfOverlay within <emphasis role="strong">GBP</emphasis></title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ofoverlay-1-components.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ofoverlay 1 components</phrase></textobject>
  </mediaobject>
</figure>

<simpara>In terms of the inner components of the <emphasis role="strong">GBP</emphasis> OfOverlay renderer:</simpara>
<figure>
<title>OfOverlay expanded view:</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ofoverlay-2-components.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ofoverlay 2 components</phrase></textobject>
  </mediaobject>
</figure>

<simpara><emphasis role="strong">OfOverlay Renderer</emphasis></simpara>
<simpara>Launches components below:</simpara>
<simpara><emphasis role="strong">Policy Resolver</emphasis></simpara>
<simpara>Policy resolution is completely domain independent, and the OfOverlay leverages process policy information internally. See <link linkend="policyresolution">Policy Resolution process</link>.</simpara>
<simpara>It listens to inputs to the <emphasis>Tenants</emphasis> configuration datastore, validates tenant input, then writes this to the Tenants operational datastore.</simpara>
<simpara>From there an internal notification is generated to the PolicyManager.</simpara>
<simpara>In the next release, this will be moving to a non-renderer specific location.</simpara>
<simpara><emphasis role="strong">Endpoint Manager</emphasis></simpara>
<simpara>The endpoint repository operates in <emphasis role="strong">orchestrated</emphasis> mode. This means the user is responsible for the provisioning of endpoints via:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="UX">UX/GUI</link></simpara>
</listitem>
<listitem>
<simpara>REST API</simpara>
</listitem>
</itemizedlist>

<note>
<simpara>When using the <link linkend="Neutron">Neutron mapper</link> feature, everything is managed transparently via Neutron.</simpara>
</note>

<simpara>The Endpoint Manager is responsible for listening to Endpoint repository updates and notifying the Switch Manager when a valid Endpoint has been registered.</simpara>
<simpara>It also supplies utility functions to the flow pipeline process.</simpara>
<simpara><emphasis role="strong">Switch Manager</emphasis></simpara>
<simpara>The Switch Manager is purely a state manager.</simpara>
<simpara>Switches are in one of 3 states:</simpara>
<itemizedlist>
<listitem>
<simpara>DISCONNECTED</simpara>
</listitem>
<listitem>
<simpara>PREPARING</simpara>
</listitem>
<listitem>
<simpara>READY</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">Ready</emphasis> is denoted by a connected switch:</simpara>
<itemizedlist>
<listitem>
<simpara>having a tunnel interface</simpara>
</listitem>
<listitem>
<simpara>having at least one endpoint connected.</simpara>
</listitem>
</itemizedlist>

<simpara>In this way <emphasis role="strong">GBP</emphasis> is not writing to switches it has no business to.</simpara>
<simpara><emphasis role="strong">Preparing</emphasis> simply means the switch has a controller connection but is missing one of the above <emphasis>complete and necessary</emphasis> conditions</simpara>
<simpara><emphasis role="strong">Disconnected</emphasis> means a previously connected switch is no longer present in the Inventory operational datastore.</simpara>
<figure>
<title>OfOverlay Flow Pipeline</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/ofoverlay-3-flowpipeline.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>ofoverlay 3 flowpipeline</phrase></textobject>
  </mediaobject>
</figure>

<simpara>The OfOverlay leverages Nicira registers as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>REG0 = Source EndpointGroup + Tenant ordinal</simpara>
</listitem>
<listitem>
<simpara>REG1 = Source Conditions + Tenant ordinal</simpara>
</listitem>
<listitem>
<simpara>REG2 = Destination EndpointGroup + Tenant ordinal</simpara>
</listitem>
<listitem>
<simpara>REG3 = Destination Conditions + Tenant ordinal</simpara>
</listitem>
<listitem>
<simpara>REG4 = Bridge Domain + Tenant ordinal</simpara>
</listitem>
<listitem>
<simpara>REG5 = Flood Domain + Tenant ordinal</simpara>
</listitem>
<listitem>
<simpara>REG6 = Layer 3 Context + Tenant ordinal</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">Port Security</emphasis></simpara>
<simpara>Table 0 of the OpenFlow pipeline. Responsible for ensuring that only valid connections can send packets into the pipeline:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=200,in_port=3 actions=goto_table:2
cookie=0x0, &lt;snip&gt; , priority=200,in_port=1 actions=goto_table:1
cookie=0x0, &lt;snip&gt; , priority=121,arp,in_port=5,dl_src=fa:16:3e:d5:b9:8d,arp_spa=10.1.1.3 actions=goto_table:2
cookie=0x0, &lt;snip&gt; , priority=120,ip,in_port=5,dl_src=fa:16:3e:d5:b9:8d,nw_src=10.1.1.3 actions=goto_table:2
cookie=0x0, &lt;snip&gt; , priority=115,ip,in_port=5,dl_src=fa:16:3e:d5:b9:8d,nw_dst=255.255.255.255 actions=goto_table:2
cookie=0x0, &lt;snip&gt; , priority=112,ipv6 actions=drop
cookie=0x0, &lt;snip&gt; , priority=111, ip actions=drop
cookie=0x0, &lt;snip&gt; , priority=110,arp actions=drop
cookie=0x0, &lt;snip&gt; ,in_port=5,dl_src=fa:16:3e:d5:b9:8d actions=goto_table:2
cookie=0x0, &lt;snip&gt; , priority=1 actions=drop</literallayout>


<simpara>Ingress from tunnel interface, go to Table <emphasis>Source Mapper</emphasis>:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=200,in_port=3 actions=goto_table:2</literallayout>


<simpara>Ingress from outside, goto Table <emphasis>Ingress NAT Mapper</emphasis>:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=200,in_port=1 actions=goto_table:1</literallayout>


<simpara>ARP from Endpoint, go to Table <emphasis>Source Mapper</emphasis>:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=121,arp,in_port=5,dl_src=fa:16:3e:d5:b9:8d,arp_spa=10.1.1.3 actions=goto_table:2</literallayout>


<simpara>IPv4 from Endpoint, go to Table <emphasis>Source Mapper</emphasis>:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=120,ip,in_port=5,dl_src=fa:16:3e:d5:b9:8d,nw_src=10.1.1.3 actions=goto_table:2</literallayout>


<simpara>DHCP DORA from Endpoint, go to Table <emphasis>Source Mapper</emphasis>:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=115,ip,in_port=5,dl_src=fa:16:3e:d5:b9:8d,nw_dst=255.255.255.255 actions=goto_table:2</literallayout>


<simpara>Series of DROP tables with priority set to capture any non-specific traffic that should have matched above:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=112,ipv6 actions=drop
cookie=0x0, &lt;snip&gt; , priority=111, ip actions=drop
cookie=0x0, &lt;snip&gt; , priority=110,arp actions=drop</literallayout>


<simpara>"L2" catch all traffic not identified above:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; ,in_port=5,dl_src=fa:16:3e:d5:b9:8d actions=goto_table:2</literallayout>


<simpara>Drop Flow:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=1 actions=drop</literallayout>


<simpara><emphasis role="strong">Ingress NAT Mapper</emphasis></simpara>
<simpara>Table <link linkend="offset"><emphasis>offset</emphasis></link>+1.</simpara>
<simpara>ARP responder for external NAT address:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=150,arp,arp_tpa=192.168.111.51,arp_op=1 actions=move:NXM_OF_ETH_SRC[]-&gt;NXM_OF_ETH_DST[],set_field:fa:16:3e:58:c3:dd-&gt;eth_src,load:0x2-&gt;NXM_OF_ARP_OP[],move:NXM_NX_ARP_SHA[]-&gt;NXM_NX_ARP_THA[],load:0xfa163e58c3dd-&gt;NXM_NX_ARP_SHA[],move:NXM_OF_ARP_SPA[]-&gt;NXM_OF_ARP_TPA[],load:0xc0a86f33-&gt;NXM_OF_ARP_SPA[],IN_PORT</literallayout>


<simpara>Translate from Outside to Inside and perform same functions as SourceMapper.</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=100,ip,nw_dst=192.168.111.51 actions=set_field:10.1.1.2-&gt;ip_dst,set_field:fa:16:3e:58:c3:dd-&gt;eth_dst,load:0x2-&gt;NXM_NX_REG0[],load:0x1-&gt;NXM_NX_REG1[],load:0x4-&gt;NXM_NX_REG4[],load:0x5-&gt;NXM_NX_REG5[],load:0x7-&gt;NXM_NX_REG6[],load:0x3-&gt;NXM_NX_TUN_ID[0..31],goto_table:3</literallayout>


<simpara><emphasis role="strong">Source Mapper</emphasis></simpara>
<simpara>Table <link linkend="offset"><emphasis>offset</emphasis></link>+2.</simpara>
<simpara>Determines based on characteristics from the ingress port, which:</simpara>
<itemizedlist>
<listitem>
<simpara>EndpointGroup(s) it belongs to</simpara>
</listitem>
<listitem>
<simpara>Forwarding context</simpara>
</listitem>
<listitem>
<simpara>Tunnel VNID ordinal</simpara>
</listitem>
</itemizedlist>

<simpara>Establishes tunnels at valid destination switches for ingress.</simpara>
<simpara>Ingress Tunnel established at remote node with VNID Ordinal that maps to Source EPG, Forwarding Context etc:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt;, priority=150,tun_id=0xd,in_port=3 actions=load:0xc-&gt;NXM_NX_REG0[],load:0xffffff-&gt;NXM_NX_REG1[],load:0x4-&gt;NXM_NX_REG4[],load:0x5-&gt;NXM_NX_REG5[],load:0x7-&gt;NXM_NX_REG6[],goto_table:3</literallayout>


<simpara>Maps endpoint to Source EPG, Forwarding Context based on ingress port, and MAC:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=100,in_port=5,dl_src=fa:16:3e:b4:b4:b1 actions=load:0xc-&gt;NXM_NX_REG0[],load:0x1-&gt;NXM_NX_REG1[],load:0x4-&gt;NXM_NX_REG4[],load:0x5-&gt;NXM_NX_REG5[],load:0x7-&gt;NXM_NX_REG6[],load:0xd-&gt;NXM_NX_TUN_ID[0..31],goto_table:3</literallayout>


<simpara>Generic drop:</simpara>

<literallayout class="monospaced">cookie=0x0, duration=197.622s, table=2, n_packets=0, n_bytes=0, priority=1 actions=drop</literallayout>


<simpara><emphasis role="strong">Destination Mapper</emphasis></simpara>
<simpara>Table <link linkend="offset"><emphasis>offset</emphasis></link>+3.</simpara>
<simpara>Determines based on characteristics of the endpoint:</simpara>
<itemizedlist>
<listitem>
<simpara>EndpointGroup(s) it belongs to</simpara>
</listitem>
<listitem>
<simpara>Forwarding context</simpara>
</listitem>
<listitem>
<simpara>Tunnel Destination value</simpara>
</listitem>
</itemizedlist>

<simpara>Manages routing based on valid ingress nodes ARP&#8217;ing for their default gateway, and matches on either gateway MAC or destination endpoint MAC.</simpara>
<simpara>ARP for default gateway for the 10.1.1.0/24 subnet:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=150,arp,reg6=0x7,arp_tpa=10.1.1.1,arp_op=1 actions=move:NXM_OF_ETH_SRC[]-&gt;NXM_OF_ETH_DST[],set_field:fa:16:3e:28:4c:82-&gt;eth_src,load:0x2-&gt;NXM_OF_ARP_OP[],move:NXM_NX_ARP_SHA[]-&gt;NXM_NX_ARP_THA[],load:0xfa163e284c82-&gt;NXM_NX_ARP_SHA[],move:NXM_OF_ARP_SPA[]-&gt;NXM_OF_ARP_TPA[],load:0xa010101-&gt;NXM_OF_ARP_SPA[],IN_PORT</literallayout>


<simpara>Broadcast traffic destined for GroupTable:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=140,reg5=0x5,dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 actions=load:0x5-&gt;NXM_NX_TUN_ID[0..31],group:5</literallayout>


<simpara>Layer3 destination matching flows, where priority=100+masklength. Since <emphasis role="strong">GBP</emphasis> now support L3Prefix endpoint, we can set default routes etc:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt;, priority=132,ip,reg6=0x7,dl_dst=fa:16:3e:b4:b4:b1,nw_dst=10.1.1.3 actions=load:0xc-&gt;NXM_NX_REG2[],load:0x1-&gt;NXM_NX_REG3[],load:0x5-&gt;NXM_NX_REG7[],set_field:fa:16:3e:b4:b4:b1-&gt;eth_dst,dec_ttl,goto_table:4</literallayout>


<simpara>Layer2 destination matching flows, designed to be caught only after last IP flow (lowest priority IP flow is 100):</simpara>

<literallayout class="monospaced">cookie=0x0, duration=323.203s, table=3, n_packets=4, n_bytes=168, priority=50,reg4=0x4,dl_dst=fa:16:3e:58:c3:dd actions=load:0x2-&gt;NXM_NX_REG2[],load:0x1-&gt;NXM_NX_REG3[],load:0x2-&gt;NXM_NX_REG7[],goto_table:4</literallayout>


<simpara>General drop flow:
 cookie=0x0, duration=323.207s, table=3, n_packets=6, n_bytes=588, priority=1 actions=drop</simpara>
<simpara><emphasis role="strong">Policy Enforcer</emphasis></simpara>
<simpara>Table <link linkend="offset"><emphasis>offset</emphasis></link>+4.</simpara>
<simpara>Once the Source and Destination EndpointGroups are assigned, policy is enforced based on resolved rules.</simpara>
<simpara>In the case of <link linkend="SFC">Service Function Chaining</link>, the encapsulation and destination for traffic destined to a chain, is discovered and enforced.</simpara>
<simpara>Policy flow, allowing IP traffic between EndpointGroups:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=64998,ip,reg0=0x8,reg1=0x1,reg2=0xc,reg3=0x1 actions=goto_table:5</literallayout>


<simpara><emphasis role="strong">Egress NAT Mapper</emphasis></simpara>
<simpara>Table <link linkend="offset"><emphasis>offset</emphasis></link>+5.</simpara>
<simpara>Performs NAT function before Egressing OVS instance to the underlay network.</simpara>
<simpara>Inside to Outside NAT translation before sending to underlay:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt; , priority=100,ip,reg6=0x7,nw_src=10.1.1.2 actions=set_field:192.168.111.51-&gt;ip_src,goto_table:6</literallayout>


<simpara><emphasis role="strong">External Mapper</emphasis></simpara>
<simpara>Table <link linkend="offset"><emphasis>offset</emphasis></link>+6.</simpara>
<simpara>Manages post-policy enforcement for endpoint specific destination effects. Specifically for <link linkend="SFC">Service Function Chaining</link>, which is why we can support both symmetric and asymmetric chains
and distributed ingress/egress classification.</simpara>
<simpara>Generic allow:</simpara>

<literallayout class="monospaced">cookie=0x0, &lt;snip&gt;, priority=100 actions=output:NXM_NX_REG7[]</literallayout>


</section>
<section xml:id="_configuring_openflow_overlay_via_rest">
<title>Configuring OpenFlow Overlay via REST</title>
<note>
<simpara>Please see the <link linkend="UX">UX</link> section on how to configure <emphasis role="strong">GBP</emphasis> via the GUI.</simpara>
</note>

<simpara><emphasis role="strong">Endpoint</emphasis></simpara>
<screen>POST http://{{controllerIp}}:8181/restconf/operations/endpoint:register-endpoint
{
    "input": {
        "endpoint-group": "&lt;epg0&gt;",
        "endpoint-groups" : ["&lt;epg1&gt;","&lt;epg2&gt;"],
        "network-containment" : "&lt;fowarding-model-context1&gt;",
        "l2-context": "&lt;bridge-domain1&gt;",
        "mac-address": "&lt;mac1&gt;",
        "l3-address": [
            {
                "ip-address": "&lt;ipaddress1&gt;",
                "l3-context": "&lt;l3_context1&gt;"
            }
        ],
        "*ofoverlay:port-name*": "&lt;ovs port name&gt;",
        "tenant": "&lt;tenant1&gt;"
    }
}</screen>

<note>
<simpara>The usage of "port-name" preceded by "ofoverlay". In OpenDaylight, base datastore objects can be <emphasis>augmented</emphasis>. In <emphasis role="strong">GBP</emphasis>, the base endpoint model has no renderer
specifics, hence can be leveraged across multiple renderers.</simpara>
</note>

<simpara><emphasis role="strong">OVS Augmentations to Inventory</emphasis></simpara>
<screen>PUT http://{{controllerIp}}:8181/restconf/config/opendaylight-inventory:nodes/
{
    "opendaylight-inventory:nodes": {
        "node": [
            {
                "id": "openflow:123456",
                "ofoverlay:tunnel": [
                    {
                        "tunnel-type": "overlay:tunnel-type-vxlan",
                        "ip": "&lt;ip_address_of_ovs&gt;",
                        "port": 4789,
                        "node-connector-id": "openflow:123456:1"
                    }
                ]
            },
            {
                "id": "openflow:654321",
                "ofoverlay:tunnel": [
                    {
                        "tunnel-type": "overlay:tunnel-type-vxlan",
                        "ip": "&lt;ip_address_of_ovs&gt;",
                        "port": 4789,
                        "node-connector-id": "openflow:654321:1"
                    }
                ]
            }
        ]
    }
}</screen>

<simpara><emphasis role="strong">Tenants</emphasis> see <link linkend="policyresolution">Policy Resolution</link> and <link linkend="forwarding">Forwarding Model</link> for details:</simpara>
<screen>{
  "policy:tenant": {
    "contract": [
      {
        "clause": [
          {
            "name": "allow-http-clause",
            "subject-refs": [
              "allow-http-subject",
              "allow-icmp-subject"
            ]
          }
        ],
        "id": "&lt;id&gt;",
        "subject": [
          {
            "name": "allow-http-subject",
            "rule": [
              {
                "classifier-ref": [
                  {
                    "direction": "in",
                    "name": "http-dest"
                  },
                  {
                    "direction": "out",
                    "name": "http-src"
                  }
                ],
                "action-ref": [
                  {
                    "name": "allow1",
                    "order": 0
                  }
                ],
                "name": "allow-http-rule"
              }
            ]
          },
          {
            "name": "allow-icmp-subject",
            "rule": [
              {
                "classifier-ref": [
                  {
                    "name": "icmp"
                  }
                ],
                "action-ref": [
                  {
                    "name": "allow1",
                    "order": 0
                  }
                ],
                "name": "allow-icmp-rule"
              }
            ]
          }
        ]
      }
    ],
    "endpoint-group": [
      {
        "consumer-named-selector": [
          {
            "contract": [
              "&lt;id&gt;"
            ],
            "name": "&lt;name&gt;"
          }
        ],
        "id": "&lt;id&gt;",
        "provider-named-selector": []
      },
      {
        "consumer-named-selector": [],
        "id": "&lt;id&gt;",
        "provider-named-selector": [
          {
            "contract": [
              "&lt;id&gt;"
            ],
            "name": "&lt;name&gt;"
          }
        ]
      }
    ],
    "id": "&lt;id&gt;",
    "l2-bridge-domain": [
      {
        "id": "&lt;id&gt;",
        "parent": "&lt;id&gt;"
      }
    ],
    "l2-flood-domain": [
      {
        "id": "&lt;id&gt;",
        "parent": "&lt;id&gt;"
      },
      {
        "id": "&lt;id&gt;",
        "parent": "&lt;id&gt;"
      }
    ],
    "l3-context": [
      {
        "id": "&lt;id&gt;"
      }
    ],
    "name": "GBPPOC",
    "subject-feature-instances": {
      "classifier-instance": [
        {
          "classifier-definition-id": "&lt;id&gt;",
          "name": "http-dest",
          "parameter-value": [
            {
              "int-value": "6",
              "name": "proto"
            },
            {
              "int-value": "80",
              "name": "destport"
            }
          ]
        },
        {
          "classifier-definition-id": "&lt;id&gt;",
          "name": "http-src",
          "parameter-value": [
            {
              "int-value": "6",
              "name": "proto"
            },
            {
              "int-value": "80",
              "name": "sourceport"
            }
          ]
        },
        {
          "classifier-definition-id": "&lt;id&gt;",
          "name": "icmp",
          "parameter-value": [
            {
              "int-value": "1",
              "name": "proto"
            }
          ]
        }
      ],
      "action-instance": [
        {
          "name": "allow1",
          "action-definition-id": "&lt;id&gt;"
        }
      ]
    },
    "subnet": [
      {
        "id": "&lt;id&gt;",
        "ip-prefix": "&lt;ip_prefix&gt;",
        "parent": "&lt;id&gt;",
        "virtual-router-ip": "&lt;ip address&gt;"
      },
      {
        "id": "&lt;id&gt;",
        "ip-prefix": "&lt;ip prefix&gt;",
        "parent": "&lt;id&gt;",
        "virtual-router-ip": "&lt;ip address&gt;"
      }
    ]
  }
}</screen>

</section>
<section xml:id="Demo">
<title>Tutorials</title>
<simpara>Comprehensive tutorials, along with a demonstration environment leveraging Vagrant
can be found on the <link xlink:href="https://wiki.opendaylight.org/view/Group_Based_Policy_(GBP)"><emphasis role="strong">GBP</emphasis> wiki</link></simpara>
</section>
</section>
<section xml:id="IoVisor">
<title>Using the GBP eBPF IO Visor Agent renderer</title>
<section xml:id="_overview_14">
<title>Overview</title>
<simpara>The IO Visor renderer feature enables container endpoints (e.g. Docker, LXC) to leverage GBP policies.</simpara>
<simpara>The renderer interacts with a IO Visor module from the Linux Foundation IO Visor project.</simpara>
<section xml:id="_installing_and_pre_requisites_2">
<title>Installing and Pre-requisites</title>
<simpara>From the Karaf console in OpenDaylight:</simpara>

<literallayout class="monospaced">feature:install odl-groupbasedpolicy-iovisor odl-restconf</literallayout>


<simpara>Installation details, usage, and other information for the IO Visor GBP module can be found here: <link xlink:href="https://github.com/iovisor/iomodules"><emphasis role="strong">IO Visor</emphasis> github repo for IO Modules</link></simpara>
</section>
</section>
</section>
<section xml:id="FaaS">
<title>Using the GBP FaaS renderer</title>
<section xml:id="_overview_15">
<title>Overview</title>
<simpara>The FaaS renderer feature enables leveraging the FaaS project as a GBP renderer.</simpara>
<section xml:id="_installing_and_pre_requisites_3">
<title>Installing and Pre-requisites</title>
<simpara>From the Karaf console in OpenDaylight:</simpara>

<literallayout class="monospaced">feature:install odl-groupbasedpolicy-faas</literallayout>


<simpara>More information about FaaS can be found here: <link xlink:href="https://wiki.opendaylight.org/view/FaaS:GBPIntegration">https://wiki.opendaylight.org/view/FaaS:GBPIntegration</link></simpara>
</section>
</section>
</section>
<section xml:id="SFC">
<title>Using Service Function Chaining (SFC) with GBP Neutron Mapper and OfOverlay</title>
<section xml:id="_overview_16">
<title>Overview</title>
<simpara>Please refer to the Service Function Chaining project for specifics on SFC provisioning and theory.</simpara>
<simpara><emphasis role="strong">GBP</emphasis> allows for the use of a chain, by name, in policy.</simpara>
<simpara>This takes the form of an <emphasis>action</emphasis> in <emphasis role="strong">GBP</emphasis>.</simpara>
<simpara>Using the <link linkend="demo"><emphasis role="strong">GBP</emphasis> demo and development environment</link> as an example:</simpara>
<figure>
<title>GBP and SFC integration environment</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/sfc-1-topology.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>sfc 1 topology</phrase></textobject>
  </mediaobject>
</figure>

<simpara>In the topology above, a symmetrical chain between H35_2 and H36_3 could take path:</simpara>
<simpara>H35_2 to sw1 to sff1 to sf1 to sff1 to sff2 to sf2 to sff2 to sw6 to H36_3</simpara>
<simpara>If symmetric chaining was desired, the return path is:</simpara>
<figure>
<title>GBP and SFC symmetric chain environment</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/sfc-2-symmetric.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>sfc 2 symmetric</phrase></textobject>
  </mediaobject>
</figure>

<simpara>If asymmetric chaining was desired, the return path could be direct, or an <emphasis role="strong">entirely different chain</emphasis>.</simpara>
<figure>
<title>GBP and SFC assymmetric chain environment</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/groupbasedpolicy/sfc-3-asymmetric.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>sfc 3 asymmetric</phrase></textobject>
  </mediaobject>
</figure>

<simpara>All these scenarios are supported by the integration.</simpara>
<simpara>In the <emphasis role="strong">Subject Feature Instance</emphasis> section of the tenant config, we define the instances of the classifier definitions for ICMP and HTTP:</simpara>
<screen>        "subject-feature-instances": {
          "classifier-instance": [
            {
              "name": "icmp",
              "parameter-value": [
                {
                  "name": "proto",
                  "int-value": 1
                }
              ]
            },
            {
              "name": "http-dest",
              "parameter-value": [
                {
                  "int-value": "6",
                  "name": "proto"
                },
                {
                  "int-value": "80",
                  "name": "destport"
                }
              ]
            },
            {
              "name": "http-src",
              "parameter-value": [
                {
                  "int-value": "6",
                  "name": "proto"
                },
                {
                  "int-value": "80",
                  "name": "sourceport"
                }
              ]
            }
          ],</screen>

<simpara>Then the action instances to associate to traffic that matches classifiers are defined.</simpara>
<simpara>Note the <emphasis>SFC chain name</emphasis> must exist in SFC, and is validated against
the datastore once the tenant configuration is entered, before entering a valid tenant configuration into the operational datastore (which triggers policy resolution).</simpara>
<screen>          "action-instance": [
            {
              "name": "chain1",
              "parameter-value": [
                {
                  "name": "sfc-chain-name",
                  "string-value": "SFCGBP"
                }
              ]
            },
            {
              "name": "allow1",
            }
          ]
        },</screen>

<simpara>When ICMP is matched, allow the traffic:</simpara>
<screen>
        "contract": [
          {
            "subject": [
              {
                "name": "icmp-subject",
                "rule": [
                  {
                    "name": "allow-icmp-rule",
                    "order" : 0,
                    "classifier-ref": [
                      {
                        "name": "icmp"
                      }
                    ],
                    "action-ref": [
                      {
                        "name": "allow1",
                        "order": 0
                      }
                    ]
                  }

                ]
              },</screen>

<simpara>When HTTP is matched, <emphasis role="strong">in</emphasis> to the provider of the contract with a TCP destination port of 80 (HTTP) or the HTTP request. The chain action is triggered, and similarly
<emphasis role="strong">out</emphasis> from the provider for traffic with TCP source port of 80 (HTTP), or the HTTP response.</simpara>
<screen>              {
                "name": "http-subject",
                "rule": [
                  {
                    "name": "http-chain-rule-in",
                    "classifier-ref": [
                      {
                        "name": "http-dest",
                        "direction": "in"
                      }
                    ],
                    "action-ref": [
                      {
                        "name": "chain1",
                        "order": 0
                      }
                    ]
                  },
                  {
                    "name": "http-chain-rule-out",
                    "classifier-ref": [
                      {
                        "name": "http-src",
                        "direction": "out"
                      }
                    ],
                    "action-ref": [
                      {
                        "name": "chain1",
                        "order": 0
                      }
                    ]
                  }
                ]
              }</screen>

<simpara>To enable asymmetrical chaining, for instance, the user desires that HTTP requests traverse the chain, but the HTTP response does not, the HTTP response is set to <emphasis>allow</emphasis> instead of chain:</simpara>
<screen>
                  {
                    "name": "http-chain-rule-out",
                    "classifier-ref": [
                      {
                        "name": "http-src",
                        "direction": "out"
                      }
                    ],
                    "action-ref": [
                      {
                        "name": "allow1",
                        "order": 0
                      }
                    ]
                  }</screen>

</section>
</section>
<section xml:id="demo">
<title>Demo/Development environment</title>
<simpara>The <emphasis role="strong">GBP</emphasis> project for Beryllium has two demo/development environments.</simpara>
<itemizedlist>
<listitem>
<simpara>Docker based GBP and GBP+SFC integration Vagrant environment</simpara>
</listitem>
<listitem>
<simpara>DevStack based GBP+Neutron integration Vagrant environment</simpara>
</listitem>
</itemizedlist>

<simpara><link xlink:href="https://wiki.opendaylight.org/view/Group_Based_Policy_(GBP)/Consumability/Demo">Demo @ GBP wiki</link></simpara>
</section>
</chapter>
<chapter xml:id="_l2switch_user_guide">
<title>L2Switch User Guide</title>
<section xml:id="_overview_17">
<title>Overview</title>
<simpara>The L2Switch project provides Layer2 switch functionality.</simpara>
</section>
<section xml:id="_l2switch_architecture">
<title>L2Switch Architecture</title>
<itemizedlist>
<listitem>
<simpara>Packet Handler</simpara>
<itemizedlist>
<listitem>
<simpara>Decodes the packets coming to the controller and dispatches them appropriately</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Loop Remover</simpara>
<itemizedlist>
<listitem>
<simpara>Removes loops in the network</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Arp Handler</simpara>
<itemizedlist>
<listitem>
<simpara>Handles the decoded ARP packets</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Address Tracker</simpara>
<itemizedlist>
<listitem>
<simpara>Learns the Addresses (MAC and IP) of entities in the network</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Host Tracker</simpara>
<itemizedlist>
<listitem>
<simpara>Tracks the locations of hosts in the network</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>L2Switch Main</simpara>
<itemizedlist>
<listitem>
<simpara>Installs flows on each switch based on network traffic</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="_configuring_l2switch">
<title>Configuring L2Switch</title>
<simpara>This sections below give details about the configuration settings for the components that can be configured.</simpara>
</section>
<section xml:id="_configuring_loop_remover">
<title>Configuring Loop Remover</title>
<itemizedlist>
<listitem>
<simpara>52-loopremover.xml</simpara>
<itemizedlist>
<listitem>
<simpara>is-install-lldp-flow</simpara>
<itemizedlist>
<listitem>
<simpara>"true" means a flow that sends all LLDP packets to the controller will be installed on each switch</simpara>
</listitem>
<listitem>
<simpara>"false" means this flow will not be installed</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>lldp-flow-table-id</simpara>
<itemizedlist>
<listitem>
<simpara>The LLDP flow will be installed on the specified flow table of each switch</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-install-lldp-flow" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>lldp-flow-priority</simpara>
<itemizedlist>
<listitem>
<simpara>The LLDP flow will be installed with the specified priority</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-install-lldp-flow" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>lldp-flow-idle-timeout</simpara>
<itemizedlist>
<listitem>
<simpara>The LLDP flow will timeout (removed from the switch) if the flow doesn&#8217;t forward a packet for <emphasis>x</emphasis> seconds</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-install-lldp-flow" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>lldp-flow-hard-timeout</simpara>
<itemizedlist>
<listitem>
<simpara>The LLDP flow will timeout (removed from the switch) after <emphasis>x</emphasis> seconds, regardless of how many packets it is forwarding</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-install-lldp-flow" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>graph-refresh-delay</simpara>
<itemizedlist>
<listitem>
<simpara>A graph of the network is maintained and gets updated as network elements go up/down (i.e. links go up/down and switches go up/down)</simpara>
</listitem>
<listitem>
<simpara>After a network element going up/down, it waits <emphasis>graph-refresh-delay</emphasis> seconds before recomputing the graph</simpara>
</listitem>
<listitem>
<simpara>A higher value has the advantage of doing less graph updates, at the potential cost of losing some packets because the graph didn&#8217;t update immediately.</simpara>
</listitem>
<listitem>
<simpara>A lower value has the advantage of handling network topology changes quicker, at the cost of doing more computation.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="_configuring_arp_handler">
<title>Configuring Arp Handler</title>
<itemizedlist>
<listitem>
<simpara>54-arphandler.xml</simpara>
<itemizedlist>
<listitem>
<simpara>is-proactive-flood-mode</simpara>
<itemizedlist>
<listitem>
<simpara>"true" means that flood flows will be installed on each switch.  With this flood flow, each switch will flood a packet that doesn&#8217;t match any other flows.</simpara>
<itemizedlist>
<listitem>
<simpara>Advantage: Fewer packets are sent to the controller because those packets are flooded to the network.</simpara>
</listitem>
<listitem>
<simpara>Disadvantage: A lot of network traffic is generated.</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>"false" means the previously mentioned flood flows will not be installed.  Instead an ARP flow will be installed on each switch that sends all ARP packets to the controller.</simpara>
<itemizedlist>
<listitem>
<simpara>Advantage: Less network traffic is generated.</simpara>
</listitem>
<listitem>
<simpara>Disadvantage: The controller handles more packets (ARP requests &amp; replies) and the ARP process takes longer than if there were flood flows.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>flood-flow-table-id</simpara>
<itemizedlist>
<listitem>
<simpara>The flood flow will be installed on the specified flow table of each switch</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-proactive-flood-mode" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>flood-flow-priority</simpara>
<itemizedlist>
<listitem>
<simpara>The flood flow will be installed with the specified priority</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-proactive-flood-mode" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>flood-flow-idle-timeout</simpara>
<itemizedlist>
<listitem>
<simpara>The flood flow will timeout (removed from the switch) if the flow doesn&#8217;t forward a packet for <emphasis>x</emphasis> seconds</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-proactive-flood-mode" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>flood-flow-hard-timeout</simpara>
<itemizedlist>
<listitem>
<simpara>The flood flow will timeout (removed from the switch) after <emphasis>x</emphasis> seconds, regardless of how many packets it is forwarding</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-proactive-flood-mode" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>arp-flow-table-id</simpara>
<itemizedlist>
<listitem>
<simpara>The ARP flow will be installed on the specified flow table of each switch</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-proactive-flood-mode" is set to "false"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>arp-flow-priority</simpara>
<itemizedlist>
<listitem>
<simpara>The ARP flow will be installed with the specified priority</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-proactive-flood-mode" is set to "false"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>arp-flow-idle-timeout</simpara>
<itemizedlist>
<listitem>
<simpara>The ARP flow will timeout (removed from the switch) if the flow doesn&#8217;t forward a packet for <emphasis>x</emphasis> seconds</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-proactive-flood-mode" is set to "false"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>arp-flow-hard-timeout</simpara>
<itemizedlist>
<listitem>
<simpara>The ARP flow will timeout (removed from the switch) after <emphasis>arp-flow-hard-timeout</emphasis> seconds, regardless of how many packets it is forwarding</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-proactive-flood-mode" is set to "false"</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="_configuring_address_tracker">
<title>Configuring Address Tracker</title>
<itemizedlist>
<listitem>
<simpara>56-addresstracker.xml</simpara>
<itemizedlist>
<listitem>
<simpara>timestamp-update-interval</simpara>
<itemizedlist>
<listitem>
<simpara>A last-seen timestamp is associated with each address.  This last-seen timestamp will only be updated after <emphasis>timestamp-update-interval</emphasis> milliseconds.</simpara>
</listitem>
<listitem>
<simpara>A higher value has the advantage of performing less writes to the database.</simpara>
</listitem>
<listitem>
<simpara>A lower value has the advantage of knowing how fresh an address is.</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>observe-addresses-from</simpara>
<itemizedlist>
<listitem>
<simpara>IP and MAC addresses can be observed/learned from ARP, IPv4, and IPv6 packets.  Set which packets to make these observations from.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="_configuring_l2switch_main">
<title>Configuring L2Switch Main</title>
<itemizedlist>
<listitem>
<simpara>58-l2switchmain.xml</simpara>
<itemizedlist>
<listitem>
<simpara>is-install-dropall-flow</simpara>
<itemizedlist>
<listitem>
<simpara>"true" means a drop-all flow will be installed on each switch, so the default action will be to drop a packet instead of sending it to the controller</simpara>
</listitem>
<listitem>
<simpara>"false" means this flow will not be installed</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>dropall-flow-table-id</simpara>
<itemizedlist>
<listitem>
<simpara>The dropall flow will be installed on the specified flow table of each switch</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-install-dropall-flow" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>dropall-flow-priority</simpara>
<itemizedlist>
<listitem>
<simpara>The dropall flow will be installed with the specified priority</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-install-dropall-flow" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>dropall-flow-idle-timeout</simpara>
<itemizedlist>
<listitem>
<simpara>The dropall flow will timeout (removed from the switch) if the flow doesn&#8217;t forward a packet for <emphasis>x</emphasis> seconds</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-install-dropall-flow" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>dropall-flow-hard-timeout</simpara>
<itemizedlist>
<listitem>
<simpara>The dropall flow will timeout (removed from the switch) after <emphasis>x</emphasis> seconds, regardless of how many packets it is forwarding</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-install-dropall-flow" is set to "true"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>is-learning-only-mode</simpara>
<itemizedlist>
<listitem>
<simpara>"true" means that the L2Switch will only be learning addresses.  No additional flows to optimize network traffic will be installed.</simpara>
</listitem>
<listitem>
<simpara>"false" means that the L2Switch will react to network traffic and install flows on the switches to optimize traffic.  Currently, MAC-to-MAC flows are installed.</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>reactive-flow-table-id</simpara>
<itemizedlist>
<listitem>
<simpara>The reactive flow will be installed on the specified flow table of each switch</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-learning-only-mode" is set to "false"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>reactive-flow-priority</simpara>
<itemizedlist>
<listitem>
<simpara>The reactive flow will be installed with the specified priority</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-learning-only-mode" is set to "false"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>reactive-flow-idle-timeout</simpara>
<itemizedlist>
<listitem>
<simpara>The reactive flow will timeout (removed from the switch) if the flow doesn&#8217;t forward a packet for <emphasis>x</emphasis> seconds</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-learning-only-mode" is set to "false"</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>reactive-flow-hard-timeout</simpara>
<itemizedlist>
<listitem>
<simpara>The reactive flow will timeout (removed from the switch) after <emphasis>x</emphasis> seconds, regardless of how many packets it is forwarding</simpara>
</listitem>
<listitem>
<simpara>This field is only relevant when "is-learning-only-mode" is set to "false"</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="_running_the_l2switch_project">
<title>Running the L2Switch project</title>
<simpara>To run the L2 Switch inside the Lithium OpenDaylight distribution simply install the <literal>odl-l2switch-switch-ui</literal> feature;</simpara>

<literallayout class="monospaced">feature:install odl-l2switch-switch-ui</literallayout>


</section>
<section xml:id="_create_a_network_using_mininet">
<title>Create a network using mininet</title>

<literallayout class="monospaced">sudo mn --controller=remote,ip=&lt;Controller IP&gt; --topo=linear,3 --switch ovsk,protocols=OpenFlow13
sudo mn --controller=remote,ip=127.0.0.1 --topo=linear,3 --switch ovsk,protocols=OpenFlow13</literallayout>


<simpara>The above command will create a virtual network consisting of 3 switches.
Each switch will connect to the controller located at the specified IP, i.e. 127.0.0.1</simpara>

<literallayout class="monospaced">sudo mn --controller=remote,ip=127.0.0.1 --mac --topo=linear,3 --switch ovsk,protocols=OpenFlow13</literallayout>


<simpara>The above command has the "mac" option, which makes it easier to distinguish between Host MAC addresses and Switch MAC addresses.</simpara>
</section>
<section xml:id="_generating_network_traffic_using_mininet">
<title>Generating network traffic using mininet</title>

<literallayout class="monospaced">h1 ping h2</literallayout>


<simpara>The above command will cause host1 (h1) to ping host2 (h2)</simpara>

<literallayout class="monospaced">pingall</literallayout>


<simpara><emphasis>pingall</emphasis> will cause each host to ping every other host.</simpara>
</section>
<section xml:id="_checking_address_observations">
<title>Checking Address Observations</title>
<simpara>Address Observations are added to the Inventory data tree.</simpara>
<simpara>The Address Observations on a Node Connector can be checked through a browser or a REST Client.</simpara>

<literallayout class="monospaced">http://10.194.126.91:8080/restconf/operational/opendaylight-inventory:nodes/node/openflow:1/node-connector/openflow:1:1</literallayout>


<figure>
<title>Address Observations</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/l2switch-address-observations.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>AddressObservations image</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_checking_hosts">
<title>Checking Hosts</title>
<simpara>Host information is added to the Topology data tree.</simpara>
<itemizedlist>
<listitem>
<simpara>Host address</simpara>
</listitem>
<listitem>
<simpara>Attachment point (link) to a node/switch</simpara>
</listitem>
</itemizedlist>

<simpara>This host information and attachment point information can be checked through a browser or a REST Client.</simpara>

<literallayout class="monospaced">http://10.194.126.91:8080/restconf/operational/network-topology:network-topology/topology/flow:1/</literallayout>


<figure>
<title>Hosts</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/l2switch-hosts.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>Hosts image</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_checking_stp_status_of_each_link">
<title>Checking STP status of each link</title>
<simpara>STP Status information is added to the Inventory data tree.</simpara>
<itemizedlist>
<listitem>
<simpara>A status of "forwarding" means the link is active and packets are flowing on it.</simpara>
</listitem>
<listitem>
<simpara>A status of "discarding" means the link is inactive and packets are not sent over it.</simpara>
</listitem>
</itemizedlist>

<simpara>The STP status of a link can be checked through a browser or a REST Client.</simpara>

<literallayout class="monospaced">http://10.194.126.91:8080/restconf/operational/opendaylight-inventory:nodes/node/openflow:1/node-connector/openflow:1:2</literallayout>


<figure>
<title>STP status</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/l2switch-stp-status.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>STPStatus image</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_miscellaneous_mininet_commands">
<title>Miscellaneous mininet commands</title>

<literallayout class="monospaced">link s1 s2 down</literallayout>


<simpara>This will bring the link between switch1 (s1) and switch2 (s2) down</simpara>

<literallayout class="monospaced">link s1 s2 up</literallayout>


<simpara>This will bring the link between switch1 (s1) and switch2 (s2) up</simpara>

<literallayout class="monospaced">link s1 h1 down</literallayout>


<simpara>This will bring the link between switch1 (s1) and host1 (h1) down</simpara>
</section>
</chapter>
<chapter xml:id="_l3vpn_service_user_guide">
<title>L3VPN Service: User Guide</title>
<section xml:id="_overview_18">
<title>Overview</title>
<simpara>L3VPN Service in OpenDaylight provides a framework to create L3VPN based on BGP-MP.  It also helps to create Network Virtualization for DC Cloud environment.</simpara>
</section>
<section xml:id="_modules_interfaces">
<title>Modules &amp; Interfaces</title>
<simpara>L3VPN service can be realized using the following modules -</simpara>
<section xml:id="_vpn_service_modules">
<title>VPN Service Modules</title>
<orderedlist numeration="arabic">
<listitem>
<simpara><emphasis role="strong">VPN Manager</emphasis> : Creates and manages VPNs and VPN Interfaces</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">BGP Manager</emphasis> : Configures BGP routing stack and provides interface to routing services</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">FIB Manager</emphasis> : Provides interface to FIB, creates and manages forwarding rules in Dataplane</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Nexthop Manager</emphasis> : Creates and manages nexthop egress pointer, creates egress rules in Dataplane</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Interface Manager</emphasis> : Creates and manages different type of network interfaces, e.g., VLAN, l3tunnel etc.,</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Id Manager</emphasis> : Provides cluster-wide unique ID for a given key. Used by different modules to get unique IDs for different entities.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">MD-SAL Util</emphasis> : Provides interface to MD-SAL. Used by service modules to access MD-SAL Datastore and services.</simpara>
</listitem>
</orderedlist>

<simpara>All the above modules can function independently and can be utilized by other services as well.</simpara>
</section>
<section xml:id="_configuration_interfaces">
<title>Configuration Interfaces</title>
<simpara>The following modules expose configuration interfaces through which user can configure L3VPN Service.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>BGP Manager</simpara>
</listitem>
<listitem>
<simpara>VPN Manager</simpara>
</listitem>
<listitem>
<simpara>Interface Manager</simpara>
</listitem>
<listitem>
<simpara>FIB Manager</simpara>
</listitem>
</orderedlist>

<section xml:id="_configuration_interface_details">
<title>Configuration Interface Details</title>
<orderedlist numeration="arabic">
<title>BGP Manager Interface</title>
<listitem>
<simpara>Data Node Path : <emphasis>/config/bgp:bgp-router/</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>local-as-identifier</simpara>
</listitem>
<listitem>
<simpara>local-as-number</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Data Node Path : <emphasis>/config/bgp:bgp-neighbors/</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>List of bgp-neighbor</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Data Node Path : <emphasis>/config/bgp:bgp-neighbors/bgp-neighbor/<literal>{as-number}</literal>/</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>as-number</simpara>
</listitem>
<listitem>
<simpara>ip-address</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

<orderedlist numeration="arabic">
<title>VPN Manager Interface</title>
<listitem>
<simpara>Data Node Path : <emphasis>/config/l3vpn:vpn-instances/</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>List of vpn-instance</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Data Node Path : <emphasis>/config/l3vpn:vpn-interfaces/vpn-instance</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>name</simpara>
</listitem>
<listitem>
<simpara>route-distinguisher</simpara>
</listitem>
<listitem>
<simpara>import-route-policy</simpara>
</listitem>
<listitem>
<simpara>export-route-policy</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Data Node Path : <emphasis>/config/l3vpn:vpn-interfaces/</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>List of vpn-interface</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Data Node Path : <emphasis>/config/l3vpn:vpn-interfaces/vpn-interface</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>name</simpara>
</listitem>
<listitem>
<simpara>vpn-instance-name</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Data Node Path : <emphasis>/config/l3vpn:vpn-interfaces/vpn-interface/<literal>{name}</literal>/adjacency</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>ip-address</simpara>
</listitem>
<listitem>
<simpara>mac-address</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

<orderedlist numeration="arabic">
<title>Interface Manager Interface</title>
<listitem>
<simpara>Data Node Path : <emphasis>/config/if:interfaces/interface</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>name</simpara>
</listitem>
<listitem>
<simpara>type</simpara>
</listitem>
<listitem>
<simpara>enabled</simpara>
</listitem>
<listitem>
<simpara>of-port-id</simpara>
</listitem>
<listitem>
<simpara>tenant-id</simpara>
</listitem>
<listitem>
<simpara>base-interface</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>type specific fields</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>when type = <emphasis>l2vlan</emphasis></simpara>
<orderedlist numeration="upperalpha">
<listitem>
<simpara>vlan-id</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>when type = <emphasis>stacked_vlan</emphasis></simpara>
<orderedlist numeration="upperalpha">
<listitem>
<simpara>stacked-vlan-id</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>when type = <emphasis>l3tunnel</emphasis></simpara>
<orderedlist numeration="upperalpha">
<listitem>
<simpara>tunnel-type</simpara>
</listitem>
<listitem>
<simpara>local-ip</simpara>
</listitem>
<listitem>
<simpara>remote-ip</simpara>
</listitem>
<listitem>
<simpara>gateway-ip</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>when type = <emphasis>mpls</emphasis></simpara>
<orderedlist numeration="upperalpha">
<listitem>
<simpara>list labelStack</simpara>
</listitem>
<listitem>
<simpara>num-labels</simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

<orderedlist numeration="arabic">
<title>FIB Manager Interface</title>
<listitem>
<simpara>Data Node Path : <emphasis>/config/odl-fib:fibEntries/vrfTables</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>List of vrfTables</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Data Node Path : <emphasis>/config/odl-fib:fibEntries/vrfTables/<literal>{routeDistinguisher}</literal>/</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>route-distinguisher</simpara>
</listitem>
<listitem>
<simpara>list vrfEntries</simpara>
<orderedlist numeration="upperalpha">
<listitem>
<simpara>destPrefix</simpara>
</listitem>
<listitem>
<simpara>label</simpara>
</listitem>
<listitem>
<simpara>nexthopAddress</simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Data Node Path : <emphasis>/config/odl-fib:fibEntries/ipv4Table</emphasis></simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Fields :</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>list ipv4Entry</simpara>
<orderedlist numeration="upperalpha">
<listitem>
<simpara>destPrefix</simpara>
</listitem>
<listitem>
<simpara>nexthopAddress</simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>REST Methods : GET, PUT, DELETE, POST</simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

</section>
</section>
</section>
<section xml:id="_provisioning_sequence_sample_configurations">
<title>Provisioning Sequence &amp; Sample Configurations</title>
<section xml:id="install">
<title>Installation</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Edit <emphasis>etc/custom.properties</emphasis> and set the following property:
<emphasis>vpnservice.bgpspeaker.host.name = &lt;bgpserver-ip&gt;</emphasis>
<emphasis>&lt;bgpserver-ip&gt;</emphasis> here refers to the IP address of the host where BGP is running.</simpara>
</listitem>
<listitem>
<simpara>Run ODL and install VPN Service
<emphasis>feature:install odl-vpnservice-core</emphasis></simpara>
</listitem>
</orderedlist>

<simpara>Use REST interface to configure L3VPN service</simpara>
</section>
<section xml:id="prer">
<title>Pre-requisites:</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>BGP stack with VRF support needs to installed and configured</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><emphasis>Configure BGP as specified in Step 1 below.</emphasis></simpara>
</listitem>
</orderedlist>

</listitem>
<listitem>
<simpara>Create pairs of GRE/VxLAN Tunnels (using ovsdb/ovs-vsctl) between each switch and between each switch to the Gateway node</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><emphasis>Create <emphasis>l3tunnel</emphasis> interfaces corresponding to each tunnel in interfaces DS as specified in Step 2 below.</emphasis></simpara>
</listitem>
</orderedlist>

</listitem>
</orderedlist>

</section>
<section xml:id="_step_1_configure_bgp">
<title>Step 1 : Configure BGP</title>
<section xml:id="_1_configure_bgp_router">
<title>1. Configure BGP Router</title>
<simpara><emphasis role="strong">REST API</emphasis> : <emphasis>PUT /config/bgp:bgp-router/</emphasis></simpara>
<simpara><emphasis role="strong">Sample JSON Data</emphasis></simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "bgp-router": {
        "local-as-identifier": "10.10.10.10",
        "local-as-number": 108
    }
}</programlisting>

</section>
<section xml:id="_2_configure_bgp_neighbors">
<title>2. Configure BGP Neighbors</title>
<simpara><emphasis role="strong">REST API</emphasis> : <emphasis>PUT /config/bgp:bgp-neighbors/</emphasis></simpara>
<simpara><emphasis role="strong">Sample JSON Data</emphasis></simpara>
<programlisting language="json" linenumbering="unnumbered">  {
     "bgp-neighbor" : [
            {
                "as-number": 105,
                "ip-address": "169.144.42.168"
            }
       ]
   }</programlisting>

</section>
</section>
<section xml:id="_step_2_create_tunnel_interfaces">
<title>Step 2 : Create Tunnel Interfaces</title>
<simpara>Create l3tunnel interfaces corresponding to all GRE/VxLAN tunnels created with ovsdb (<link linkend="prer">refer Prerequisites</link>). Use following REST Interface -</simpara>
<simpara><emphasis role="strong">REST API</emphasis> : <emphasis>PUT /config/if:interfaces/if:interfacce</emphasis></simpara>
<simpara><emphasis role="strong">Sample JSON Data</emphasis></simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "interface": [
        {
            "name" : "GRE_192.168.57.101_192.168.57.102",
            "type" : "odl-interface:l3tunnel",
            "odl-interface:tunnel-type": "odl-interface:tunnel-type-gre",
            "odl-interface:local-ip" : "192.168.57.101",
            "odl-interface:remote-ip" : "192.168.57.102",
            "odl-interface:portId" : "openflow:1:3",
            "enabled" : "true"
        }
    ]
}
</programlisting>

<section xml:id="_following_is_expected_as_a_result_of_these_configurations">
<title>Following is expected as a result of these configurations</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Unique If-index is generated</simpara>
</listitem>
<listitem>
<simpara><emphasis>Interface-state</emphasis> operational DS is updated</simpara>
</listitem>
<listitem>
<simpara>Corresponding Nexthop Group Entry is created</simpara>
</listitem>
</orderedlist>

</section>
</section>
<section xml:id="_step_3_os_create_neutron_ports_and_attach_vms">
<title>Step 3 : OS Create Neutron Ports and attach VMs</title>
<simpara>At this step user creates VMs.</simpara>
</section>
<section xml:id="_step_4_create_vm_interfaces">
<title>Step 4 : Create VM Interfaces</title>
<simpara>Create l2vlan interfaces corresponding to VM created in step 3</simpara>
<simpara><emphasis role="strong">REST API</emphasis> : <emphasis>PUT /config/if:interfaces/if:interface</emphasis></simpara>
<simpara><emphasis role="strong">Sample JSON Data</emphasis></simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "interface": [
        {
            "name" : "dpn1-dp1.2",
            "type" : "l2vlan",
            "odl-interface:of-port-id" : "openflow:1:2",
            "odl-interface:vlan-id" : "1",
            "enabled" : "true"
        }
    ]
}
</programlisting>

</section>
<section xml:id="_step_5_create_vpn_instance">
<title>Step 5: Create VPN Instance</title>
<simpara><emphasis role="strong">REST API</emphasis> : <emphasis>PUT /config/l3vpn:vpn-instances/l3vpn:vpn-instance/</emphasis></simpara>
<simpara><emphasis role="strong">Sample JSON Data</emphasis></simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "vpn-instance": [
    {
        "description": "Test VPN Instance 1",
        "vpn-instance-name": "testVpn1",
        "ipv4-family": {
            "route-distinguisher": "4000:1",
            "export-route-policy": "4000:1,5000:1",
            "import-route-policy": "4000:1,5000:1",
        }
    }
  ]
}
</programlisting>

<section xml:id="_following_is_expected_as_a_result_of_these_configurations_2">
<title>Following is expected as a result of these configurations</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>VPN ID is allocated and updated in data-store</simpara>
</listitem>
<listitem>
<simpara>Corresponding VRF is created in BGP</simpara>
</listitem>
<listitem>
<simpara>If there are vpn-interface configurations for this VPN, corresponding action is taken as defined in step 5</simpara>
</listitem>
</orderedlist>

</section>
</section>
<section xml:id="_step_5_create_vpn_interface_and_local_adjacency">
<title>Step 5 : Create VPN-Interface and Local Adjacency</title>
<simpara><emphasis>this can be done in two steps as well</emphasis></simpara>
<section xml:id="_1_create_vpn_interface">
<title>1. Create vpn-interface</title>
<simpara><emphasis role="strong">REST API</emphasis> : <emphasis>PUT /config/l3vpn:vpn-interfaces/l3vpn:vpn-interface/</emphasis></simpara>
<simpara><emphasis role="strong">Sample JSON Data</emphasis></simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "vpn-interface": [
    {
      "vpn-instance-name": "testVpn1",
      "name": "dpn1-dp1.2",
    }
  ]
}</programlisting>

<note>
<simpara>name here is the name of VM interface created in step 3, 4</simpara>
</note>

</section>
<section xml:id="_2_add_adjacencies_on_vpn_interafce">
<title>2. Add Adjacencies on vpn-interafce</title>
<simpara><emphasis role="strong">REST API</emphasis> : <emphasis>PUT /config/l3vpn:vpn-interfaces/l3vpn:vpn-interface/dpn1-dp1.3/adjacency</emphasis></simpara>
<simpara><emphasis role="strong">Sample JSON Data</emphasis></simpara>
<programlisting language="json" linenumbering="unnumbered">  {
     "adjacency" : [
            {
                "ip-address" : "169.144.42.168",
                "mac-address" : "11:22:33:44:55:66"
            }
       ]
   }</programlisting>

<blockquote>
  
<simpara>its a list, user can define more than one adjacency on a vpn_interface</simpara>
</blockquote>

<simpara>Above steps can be carried out in a single step as following</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "vpn-interface": [
        {
            "vpn-instance-name": "testVpn1",
            "name": "dpn1-dp1.3",
            "odl-l3vpn:adjacency": [
                {
                    "odl-l3vpn:mac_address": "11:22:33:44:55:66",
                    "odl-l3vpn:ip_address": "11.11.11.2",
                }
            ]
        }
    ]
}
</programlisting>

</section>
<section xml:id="_following_is_expected_as_a_result_of_these_configurations_3">
<title>Following is expected as a result of these configurations</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Prefix label is generated and stored in DS</simpara>
</listitem>
<listitem>
<simpara>Ingress table is programmed with flow corresponding to interface</simpara>
</listitem>
<listitem>
<simpara>Local Egress Group is created</simpara>
</listitem>
<listitem>
<simpara>Prefix is added to BGP for advertisement</simpara>
</listitem>
<listitem>
<simpara>BGP pushes route update to FIB YANG Interface</simpara>
</listitem>
<listitem>
<simpara>FIB Entry flow is added to FIB Table in OF pipeline</simpara>
</listitem>
</orderedlist>

</section>
</section>
</section>
</chapter>
<chapter xml:id="_link_aggregation_control_protocol_user_guide">
<title>Link Aggregation Control Protocol User Guide</title>
<section xml:id="_overview_19">
<title>Overview</title>
<simpara>This section contains information about how to use the LACP plugin project with OpenDaylight, including configurations.</simpara>
</section>
<section xml:id="_link_aggregation_control_protocol_architecture">
<title>Link Aggregation Control Protocol Architecture</title>
<simpara>The LACP Project within OpenDaylight implements Link Aggregation Control Protocol (LACP) as an MD-SAL service module and will be used to auto-discover and aggregate multiple links between an OpenDaylight controlled network and LACP-enabled endpoints or switches. The result is the creation of a logical channel, which represents the aggregation of the links. Link aggregation provides link resiliency and bandwidth aggregation. This implementation adheres to IEEE Ethernet specification <link xlink:href="http://www.ieee802.org/3/hssg/public/apr07/frazier_01_0407.pdf">802.3ad</link>.</simpara>
</section>
<section xml:id="_configuring_link_aggregation_control_protocol">
<title>Configuring Link Aggregation Control Protocol</title>
<simpara>This feature can be enabled in the Karaf console of the OpenDaylight Karaf distribution by issuing the following command:</simpara>

<literallayout class="monospaced">feature:install odl-lacp-ui</literallayout>


<note>
<orderedlist numeration="arabic">
<listitem>
<simpara>Ensure that legacy (non-OpenFlow) switches are configured with LACP mode active with a long timeout to allow for the LACP plugin in OpenDaylight to respond to its messages.</simpara>
</listitem>
<listitem>
<simpara>Flows that want to take advantage of LACP-configured Link Aggregation Groups (LAGs) must explicitly use a OpenFlow group table entry created by the LACP plugin. The plugin only creates group table entries, it does not program any flows on its own.</simpara>
</listitem>
</orderedlist>

</note>

</section>
<section xml:id="_administering_or_managing_link_aggregation_control_protocol">
<title>Administering or Managing Link Aggregation Control Protocol</title>
<simpara>LACP-discovered network inventory and network statistics can be viewed using the following REST APIs.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>List of aggregators available for a node:</simpara>

<literallayout class="monospaced">http://&lt;ControllerIP&gt;:8181/restconf/operational/opendaylight-inventory:nodes/node/&lt;node-id&gt;</literallayout>


<simpara>Aggregator information will appear within the <literal>&lt;lacp-aggregators&gt;</literal> XML tag.</simpara>
</listitem>
<listitem>
<simpara>To view only the information of an aggregator:</simpara>

<literallayout class="monospaced">http://&lt;ControllerIP&gt;:8181/restconf/operational/opendaylight-inventory:nodes/node/&lt;node-id&gt;/lacp-aggregators/&lt;agg-id&gt;</literallayout>


<simpara>The group ID associated with the aggregator can be found inside the <literal>&lt;lag-groupid&gt;</literal> XML tag.</simpara>
<simpara>The group table entry information for the <literal>&lt;lag-groupid&gt;</literal> added for the aggregator is also available in the <literal>opendaylight-inventory</literal> node database.</simpara>
</listitem>
<listitem>
<simpara>To view physical port information.</simpara>

<literallayout class="monospaced">http://&lt;ControllerIP&gt;:8181/restconf/operational/opendaylight-inventory:nodes/node/&lt;node-id&gt;/node-connector/&lt;node-connector-id&gt;</literallayout>


<simpara>Ports that are associated with an aggregator will have the tag <literal>&lt;lacp-agg-ref&gt;</literal> updated with valid aggregator information.</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_tutorials_5">
<title>Tutorials</title>
<simpara>The below tutorial demonstrates LACP LAG creation for a sample mininet topology.</simpara>
<section xml:id="_sample_lacp_topology_creation_on_mininet">
<title>Sample LACP Topology creation on Mininet</title>

<literallayout class="monospaced">sudo mn --controller=remote,ip=&lt;Controller IP&gt; --topo=linear,1 --switch ovsk,protocols=OpenFlow13</literallayout>


<simpara>The above command will create a virtual network consisting of a switch and a host. The switch will be connected to the controller.</simpara>
<simpara>Once the topology is discovered, verify the presence of a flow entry with "dl_type" set to "0x8809" to handle LACP packets using the below ovs-ofctl command:</simpara>

<literallayout class="monospaced">ovs-ofctl -O OpenFlow13 dump-flows s1
 OFPST_FLOW reply (OF1.3) (xid=0x2):
 cookie=0x300000000000001e, duration=60.067s, table=0, n_packets=0, n_bytes=0, priority=5,dl_dst=01:80:c2:00:00:02,dl_type=0x8809 actions=CONTROLLER:65535</literallayout>


<simpara>Configure an additional link between the switch (s1) and host (h1) using the below command on mininet shell to aggregate 2 links:</simpara>

<literallayout class="monospaced">mininet&gt; py net.addLink(s1, net.get('h1'))
mininet&gt; py s1.attach('s1-eth2')</literallayout>


<simpara>The LACP module will listen for LACP control packets that are generated from legacy switch (non-OpenFlow enabled). In our example, host (h1) will act as a LACP packet generator.
In order to generate the LACP control packets, a bond interface has to be created on the host (h1) with mode type set to LACP with long-timeout. To configure bond interface, create a new file bonding.conf under the /etc/modprobe.d/ directory and insert the below lines in this new file:</simpara>

<literallayout class="monospaced">alias bond0 bonding
options bonding mode=4</literallayout>


<simpara>Here mode=4 is referred to LACP and the default timeout is set to long.</simpara>
<simpara>Enable bond interface and associate both physical interface h1-eth0 &amp; h1-eth1 as members of the bond interface on host (h1) using the below commands on the mininet shell:</simpara>

<literallayout class="monospaced">mininet&gt; py net.get('h1').cmd('modprobe bonding')
mininet&gt; py net.get('h1').cmd('ip link add bond0 type bond')
mininet&gt; py net.get('h1').cmd('ip link set bond0 address &lt;bond-mac-address&gt;')
mininet&gt; py net.get('h1').cmd('ip link set h1-eth0 down')
mininet&gt; py net.get('h1').cmd('ip link set h1-eth0 master bond0')
mininet&gt; py net.get('h1').cmd('ip link set h1-eth1 down')
mininet&gt; py net.get('h1').cmd('ip link set h1-eth1 master bond0')
mininet&gt; py net.get('h1').cmd('ip link set bond0 up')</literallayout>


<simpara>Once the bond0 interface is up, the host (h1) will send LACP packets to the switch (s1). The LACP Module will then create a LAG through exchange of LACP packets between the host (h1) and switch (s1). To view the bond interface output on the host (h1) side:</simpara>

<literallayout class="monospaced">mininet&gt; py net.get('h1').cmd('cat /proc/net/bonding/bond0')
Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)
Bonding Mode: IEEE 802.3ad Dynamic link aggregation
Transmit Hash Policy: layer2 (0)
MII Status: up
MII Polling Interval (ms): 100
Up Delay (ms): 0
Down Delay (ms): 0
802.3ad info
LACP rate: slow
Min links: 0
Aggregator selection policy (ad_select): stable
Active Aggregator Info:
        Aggregator ID: 1
        Number of ports: 2
        Actor Key: 33
        Partner Key: 27
        Partner Mac Address: 00:00:00:00:01:01</literallayout>



<literallayout class="monospaced">Slave Interface: h1-eth0
MII Status: up
Speed: 10000 Mbps
Duplex: full
Link Failure Count: 0
Permanent HW addr: 00:00:00:00:00:11
Aggregator ID: 1
Slave queue ID: 0</literallayout>



<literallayout class="monospaced">Slave Interface: h1-eth1
MII Status: up
Speed: 10000 Mbps
Duplex: full
Link Failure Count: 0
Permanent HW addr: 00:00:00:00:00:12
Aggregator ID: 1
Slave queue ID: 0</literallayout>


<simpara>A corresponding group table entry would be created on the OpenFlow switch (s1) with "type" set to "select" to perform the LAG functionality. To view the group entries:</simpara>

<literallayout class="monospaced">mininet&gt;ovs-ofctl -O Openflow13 dump-groups s1
OFPST_GROUP_DESC reply (OF1.3) (xid=0x2):
 group_id=60169,type=select,bucket=weight:0,actions=output:1,output:2</literallayout>


<simpara>To apply the LAG functionality on the switches, the flows should be configured with action set to GroupId instead of output port. A sample add-flow configuration with output action set to GroupId:</simpara>

<literallayout class="monospaced">sudo ovs-ofctl -O Openflow13 add-flow s1 dl_type=0x0806,dl_src=SRC_MAC,dl_dst=DST_MAC,actions=group:60169</literallayout>


</section>
</section>
</chapter>
<chapter xml:id="_lisp_flow_mapping_user_guide">
<title>LISP Flow Mapping User Guide</title>
<section xml:id="_overview_20">
<title>Overview</title>
<section xml:id="_locator_id_separation_protocol">
<title>Locator/ID Separation Protocol</title>
<simpara><link xlink:href="http://tools.ietf.org/html/rfc6830">Locator/ID Separation Protocol (LISP)</link> is a
technology that provides a flexible map-and-encap framework that can be used
for overlay network applications such as data center network virtualization and
Network Function Virtualization (NFV).</simpara>
<simpara>LISP provides the following name spaces:</simpara>
<itemizedlist>
<listitem>
<simpara><link xlink:href="http://tools.ietf.org/html/rfc6830#page-6">Endpoint Identifiers (EIDs)</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="http://tools.ietf.org/html/rfc6830#section-3">Routing Locators (RLOCs)</link></simpara>
</listitem>
</itemizedlist>

<simpara>In a virtualization environment EIDs can be viewed as virtual address space and
RLOCs can be viewed as physical network address space.</simpara>
<simpara>The LISP framework decouples network control plane from the forwarding plane by
providing:</simpara>
<itemizedlist>
<listitem>
<simpara>A data plane that specifies how the virtualized network addresses are
encapsulated in addresses from the underlying physical network.</simpara>
</listitem>
<listitem>
<simpara>A control plane that stores the mapping of the virtual-to-physical address
spaces, the associated forwarding policies and serves this information to
the data plane on demand.</simpara>
</listitem>
</itemizedlist>

<simpara>Network programmability is achieved by programming forwarding policies such as
transparent mobility, service chaining, and traffic engineering in the mapping
system; where the data plane elements can fetch these policies on demand as new
flows arrive. This chapter describes the LISP Flow Mapping project in
OpenDaylight and how it can be used to enable advanced SDN and NFV use cases.</simpara>
<simpara>LISP data plane Tunnel Routers are available at
<link xlink:href="http://LISPmob.org/">LISPmob.org</link> in the open source community on the following
platforms:</simpara>
<itemizedlist>
<listitem>
<simpara>Linux</simpara>
</listitem>
<listitem>
<simpara>Android</simpara>
</listitem>
<listitem>
<simpara>OpenWRT</simpara>
</listitem>
</itemizedlist>

<simpara>For more details and support for LISP data plane software please visit
<link xlink:href="http://LISPmob.org/">the LISPmob web site</link>.</simpara>
</section>
<section xml:id="_lisp_flow_mapping_service">
<title>LISP Flow Mapping Service</title>
<simpara>The LISP Flow Mapping service provides LISP Mapping System services. This
includes LISP  Map-Server and LISP Map-Resolver services to store and serve
mapping data to data plane nodes as well as to OpenDaylight applications.
Mapping data can include mapping of virtual addresses to physical network
address where the virtual nodes are reachable or hosted at. Mapping data can
also include a variety of routing policies including traffic engineering and
load balancing. To leverage this service, OpenDaylight applications and
services can use the northbound REST API to define the mappings and policies in
the LISP Mapping Service. Data plane devices capable of LISP control protocol
can leverage this service through a southbound LISP plugin. LISP-enabled
devices must be configured to use this OpenDaylight service as their Map Server
and/or Map Resolver.</simpara>
<simpara>The southbound LISP plugin supports the LISP control protocol (Map-Register,
Map-Request, Map-Reply messages), and can also be used to register mappings in
the OpenDaylight mapping service.</simpara>
</section>
</section>
<section xml:id="_lisp_flow_mapping_architecture">
<title>LISP Flow Mapping Architecture</title>
<simpara>The following figure shows the various LISP Flow Mapping modules.</simpara>
<figure>
<title>LISP Mapping Service Internal Architecture</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/ODL_lfm_Be_component.jpg" contentwidth="460"/>
    </imageobject>
    <textobject><phrase>LISP Mapping Service Internal Architecture</phrase></textobject>
  </mediaobject>
</figure>

<simpara>A brief description of each module is as follows:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">DAO (Data Access Object):</emphasis> This layer separates the LISP logic from the
database, so that we can separate the map server and map resolver from the
specific implementation of the mapping database. Currently we have an
implementation of this layer with an in-memory HashMap, but it can be switched
to any other key/value store and you only need to implement the ILispDAO
interface.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Map Server:</emphasis> This module processes the adding or registration of
authentication tokens (keys) and mappings. For a detailed specification of
LISP Map Server, see <link xlink:href="http://tools.ietf.org/search/rfc6830">LISP</link>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Map Resolver:</emphasis> This module receives and processes the mapping lookup queries
and provides the mappings to requester. For a detailed specification of LISP
Map Server, see <link xlink:href="http://tools.ietf.org/search/rfc6830">LISP</link>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">RPC/RESTCONF:</emphasis> This is the auto-generated RESTCONF-based northbound API. This
module enables defining key-EID associations as well as adding mapping
information through the Map Server. Key-EID associations and mappings can also
be queried via this API.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">GUI:</emphasis> This module enables adding and querying the mapping service through a
GUI based on ODL DLUX.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Neutron:</emphasis> This module implements the OpenDaylight Neutron Service APIs. It
provides integration between the LISP service and the OpenDaylight Neutron
service, and thus OpenStack.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Java API:</emphasis> The API module exposes the Map Server and Map Resolver
capabilities via a Java API.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">LISP Proto:</emphasis> This module includes LISP protocol dependent data types and
associated processing.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">In Memory DB:</emphasis> This module includes the in memory database implementation of
the mapping service.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">LISP Southbound Plugin:</emphasis> This plugin enables data plane devices that support
LISP control plane protocol (see <link xlink:href="http://tools.ietf.org/search/rfc6830">LISP</link>)
to register and query mappings to the
LISP Flow Mapping via the LISP control plane protocol.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_configuring_lisp_flow_mapping">
<title>Configuring LISP Flow Mapping</title>
<simpara>In order to use the LISP mapping service for registering EID to RLOC mappings
from northbound or southbound, keys have to be defined for the EID prefixes first. Once a key
is defined for an EID prefix, it can be used to add mappings for that EID
prefix multiple times. If the service is going to be used to process Map-Register
messages from the southbound LISP plugin, the same key must be used by
the data plane device to create the authentication data in the Map-Register
messages for the associated EID prefix.</simpara>
<simpara>The <literal>etc/custom.properties</literal> file in the Karaf distribution allows configuration
of several OpenDaylight parameters.  The LISP service has the following properties
that can be adjusted:</simpara>
<variablelist>
<varlistentry>
<term><emphasis role="strong">lisp.mappingOverwrite</emphasis> (default: <emphasis>true</emphasis>)</term>
<listitem>
<simpara>Configures handling of mapping updates.  When set to <emphasis>true</emphasis> (default) a
mapping update (either through the southbound plugin via a Map-Register
message or through a northbound API PUT REST call) the existing RLOC set
associated to an EID prefix is overwritten.  When set to <emphasis>false</emphasis>, the RLOCs
of the update are merged to the existing set.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">lisp.smr</emphasis> (default: <emphasis>false</emphasis>)</term>
<listitem>
<simpara>Enables/disables the
<link xlink:href="http://tools.ietf.org/html/rfc6830#section-6.6.2">Solicit-Map-Request (SMR)</link>
functionality.  SMR is a method to notify changes in an EID-to-RLOC mapping
to "subscribers".  The LISP service considers all Map-Request&#8217;s source RLOC
as a subscriber to the requested EID prefix, and will send an SMR control
message to that RLOC if the mapping changes.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">lisp.elpPolicy</emphasis> (default: <emphasis>default</emphasis>)</term>
<listitem>
<simpara>Configures how to build a Map-Reply southbound message from a mapping
containing an Explicit Locator Path (ELP) RLOC.  It is used for
compatibility with dataplane devices that don&#8217;t understand the ELP LCAF
format.  The <emphasis>default</emphasis> setting doesn&#8217;t alter the mapping, returning all
RLOCs unmodified.  The <emphasis>both</emphasis> setting adds a new RLOC to the mapping, with
a lower priority than the ELP, that is the next hop in the service chain.
To determine the next hop, it searches the source RLOC of the Map-Request
in the ELP, and chooses the next hop, if it exists, otherwise it chooses
the first hop.  The <emphasis>replace</emphasis> setting adds a new RLOC using the same
algorithm as the <emphasis>both</emphasis> setting, but using the origin priority of the ELP
RLOC, which is removed from the mapping.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">lisp.lookupPolicy</emphasis> (default: <emphasis>northboundFirst</emphasis>)</term>
<listitem>
<simpara>Configures the mapping lookup algorithm. When set to <emphasis>northboundFirst</emphasis>
mappings programmed through the northbound API will take precedence. If
no northbound programmed mappings exist, then the mapping service will
return mappings registered through the southbound plugin, if any exists.
When set to <emphasis>northboundAndSouthbound</emphasis> the mapping programmed by the
northbound is returned, updated by the up/down status of these mappings
as reported by the southbound (if existing).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">lisp.mappingMerge</emphasis> (default: <emphasis>false</emphasis>)</term>
<listitem>
<simpara>Configures the merge policy on the southbound registrations through the
LISP SB Plugin. When set to <emphasis>false</emphasis>, only the latest mapping registered
through the SB plugin is valid in the southbound mapping database,
independent of which device it came from. When set to <emphasis>true</emphasis>, mappings
for the same EID registered by different devices are merged together and
a union of the locators is maintained as the valid mapping for that EID.</simpara>
</listitem>
</varlistentry>
</variablelist>

</section>
<section xml:id="_textual_conventions_for_lisp_address_formats">
<title>Textual Conventions for LISP Address Formats</title>
<simpara>In addition to the more common IPv4, IPv6 and MAC address data types, the LISP
control plane supports arbitrary
<link xlink:href="http://www.iana.org/assignments/address-family-numbers">Address Family
Identifiers</link> assigned by IANA, and in addition to those the
<link xlink:href="https://tools.ietf.org/html/draft-ietf-lisp-lcaf">LISP Canoncal Address Format
(LCAF)</link>.</simpara>
<simpara>The LISP Flow Mapping project in OpenDaylight implements support for many of
these different address formats, the full list being summarized in the
following table.  While some of the address formats have well defined and
widely used textual representation, many don&#8217;t.  It became necessary to define
a convention to use for text rendering of all implemented address types in
logs, URLs, input fields, etc.  The below table lists the supported formats,
along with their AFI number and LCAF type, including the prefix used for
disambiguation of potential overlap, and examples output.</simpara>
<table frame="all"
    rowsep="1" colsep="1">
<title>LISP Address Formats</title>
  
  <tgroup cols="5">
    
    <colspec colname="col_1" colwidth="22*"/>
    
    <colspec colname="col_2" colwidth="11*"/>
    
    <colspec colname="col_3" colwidth="11*"/>
    
    <colspec colname="col_4" colwidth="11*"/>
    
    <colspec colname="col_5" colwidth="44*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Name</entry>
        
        <entry align="right" valign="top">AFI</entry>
        
        <entry align="right" valign="top">LCAF</entry>
        
        <entry align="left" valign="top">Prefix</entry>
        
        <entry align="left" valign="top">Text Rendering</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">No Address</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>0</simpara></entry>
        
        <entry align="right" valign="top"><simpara>-</simpara></entry>
        
        <entry align="left" valign="top"><simpara>no:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">No Address Present</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">IPv4 Prefix</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>1</simpara></entry>
        
        <entry align="right" valign="top"><simpara>-</simpara></entry>
        
        <entry align="left" valign="top"><simpara>ipv4:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">192.0.2.0/24</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">IPv6 Prefix</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>2</simpara></entry>
        
        <entry align="right" valign="top"><simpara>-</simpara></entry>
        
        <entry align="left" valign="top"><simpara>ipv6:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">2001:db8::/32</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">MAC Address</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>16389</simpara></entry>
        
        <entry align="right" valign="top"><simpara>-</simpara></entry>
        
        <entry align="left" valign="top"><simpara>mac:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">00:00:5E:00:53:00</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Distinguished Name</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>17</simpara></entry>
        
        <entry align="right" valign="top"><simpara>-</simpara></entry>
        
        <entry align="left" valign="top"><simpara>dn:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">stringAsIs</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">AS Number</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>18</simpara></entry>
        
        <entry align="right" valign="top"><simpara>-</simpara></entry>
        
        <entry align="left" valign="top"><simpara>as:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">AS64500</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">AFI List</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>16387</simpara></entry>
        
        <entry align="right" valign="top"><simpara>1</simpara></entry>
        
        <entry align="left" valign="top"><simpara>list:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">{192.0.2.1,192.0.2.2,2001:db8::1}</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Instance ID</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>16387</simpara></entry>
        
        <entry align="right" valign="top"><simpara>2</simpara></entry>
        
        <entry align="left" valign="top"><simpara>-</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">[223] 192.0.2.0/24</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Application Data</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>16387</simpara></entry>
        
        <entry align="right" valign="top"><simpara>4</simpara></entry>
        
        <entry align="left" valign="top"><simpara>appdata:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">192.0.2.1!128!17!80-81!6667-7000</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Explicit Locator Path</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>16387</simpara></entry>
        
        <entry align="right" valign="top"><simpara>10</simpara></entry>
        
        <entry align="left" valign="top"><simpara>elp:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">{192.0.2.1&#8594;192.0.2.2|lps&#8594;192.0.2.3}</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Source/Destination Key</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>16387</simpara></entry>
        
        <entry align="right" valign="top"><simpara>12</simpara></entry>
        
        <entry align="left" valign="top"><simpara>srcdst:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">192.0.2.1/32|192.0.2.2/32</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Key/Value Address Pair</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>16387</simpara></entry>
        
        <entry align="right" valign="top"><simpara>15</simpara></entry>
        
        <entry align="left" valign="top"><simpara>kv:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">192.0.2.1&#8658;192.0.2.2</literallayout></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">Service Path</emphasis></simpara></entry>
        
        <entry align="right" valign="top"><simpara>16387</simpara></entry>
        
        <entry align="right" valign="top"><simpara>N/A</simpara></entry>
        
        <entry align="left" valign="top"><simpara>sp:</simpara></entry>
        
        <entry align="left" valign="top"><literallayout class="monospaced">42(3)</literallayout></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

<simpara>Please note that the forward slash character <literal>/</literal> typically separating IPv4 and
IPv6 addresses from the mask length is transformed into <literal>%2f</literal> when used in a
URL.</simpara>
</section>
<section xml:id="_karaf_commands">
<title>Karaf commands</title>
<simpara>In this section we will discuss two types of Karaf commands: built-in, and
LISP specific. Some built-in commands are quite useful, and are needed for the
tutorial, so they will be discussed here. A reference of all LISP specific
commands, added by the LISP Flow Mapping project is also included. They are
useful mostly for debugging.</simpara>
<section xml:id="_useful_built_in_commands">
<title>Useful built-in commands</title>
<variablelist>
<varlistentry>
<term><literal>help</literal></term>
<listitem>
<simpara>Lists all available command, with a short description of each.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>help &lt;command_name&gt;</literal></term>
<listitem>
<simpara>Show detailed help about a specific command.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>feature:list [-i]</literal></term>
<listitem>
<simpara>Show all locally available features in the Karaf container. The <literal>-i</literal>
option lists only features that are currently installed. It is possible to
use <literal>| grep</literal> to filter the output (for all commands, not just this one).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>feature:install &lt;feature_name&gt;</literal></term>
<listitem>
<simpara>Install feature <literal>feature_name</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>log:set &lt;level&gt; &lt;class&gt;</literal></term>
<listitem>
<simpara>Set the log level for <literal>class</literal> to <literal>level</literal>. The default log level for all
classes is INFO. For debugging, or learning about LISP internals it is
useful to run <literal>log:set TRACE org.opendaylight.lispflowmapping</literal> right after
Karaf starts up.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>log:display</literal></term>
<listitem>
<simpara>Outputs the log file to the console, and returns control to the user.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>log:tail</literal></term>
<listitem>
<simpara>Continuously shows log output, requires <literal>Ctrl+C</literal> to return to the console.</simpara>
</listitem>
</varlistentry>
</variablelist>

</section>
<section xml:id="_lisp_specific_commands">
<title>LISP specific commands</title>
<simpara>The available lisp commands can always be obtained by <literal>help mappingservice</literal>.
Currently they are:</simpara>
<variablelist>
<varlistentry>
<term><literal>mappingservice:addkey</literal></term>
<listitem>
<simpara>Add the default password <literal>password</literal> for the IPv4 EID prefix 0.0.0.0/0 (all
addresses). This is useful when experimenting with southbound devices,
and using the REST interface would be combersome for whatever reason.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>mappingservice:mappings</literal></term>
<listitem>
<simpara>Show the list of all mappings stored in the internal non-persistent data
store (the DAO), listing the full data structure. The output is not human
friendly, but can be used for debugging.</simpara>
</listitem>
</varlistentry>
</variablelist>

</section>
</section>
<section xml:id="_lisp_flow_mapping_karaf_features">
<title>LISP Flow Mapping Karaf Features</title>
<simpara>LISP Flow Mapping has the following Karaf features that can be installed from
the Karaf console:</simpara>
<variablelist>
<varlistentry>
<term><literal>odl-lispflowmapping-msmr</literal></term>
<listitem>
<simpara>This includes the core features required to use the LISP Flow Mapping Service
such as mapping service and the LISP southbound plugin.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>odl-lispflowmapping-ui</literal></term>
<listitem>
<simpara>This includes the GUI module for the LISP Mapping Service.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>odl-lispflowmapping-neutron</literal></term>
<listitem>
<simpara>This is the experimental Neutron provider module for LISP mapping service.</simpara>
</listitem>
</varlistentry>
</variablelist>

</section>
<section xml:id="_tutorials_6">
<title>Tutorials</title>
<simpara>This section provides a tutorial demonstrating various features in this service.</simpara>
<section xml:id="_creating_a_lisp_overlay">
<title>Creating a LISP overlay</title>
<simpara>This section provides instructions to set up a LISP network of three nodes (one
"client" node and two "server" nodes) using LISPmob as data plane LISP nodes
and the LISP Flow Mapping project from OpenDaylight as the LISP programmable
mapping system for the LISP network.</simpara>
<section xml:id="_overview_21">
<title>Overview</title>
<simpara>The steps shown below will demonstrate setting up a LISP network between a
client and two servers, then performing a failover between the two "server"
nodes.</simpara>
</section>
<section xml:id="_prerequisites_5">
<title>Prerequisites</title>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">OpenDaylight Beryllium</emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">The Postman Chrome App</emphasis>: the most convenient way to follow along this
tutorial is to use the
<link xlink:href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en">Postman
Chrome App</link> to edit and send the requests. The project git repository hosts
a collection of the requests that are used in this tutorial in the
<literal>resources/tutorial/Beryllium_Tutorial.json.postman_collection</literal> file. You can
import this file to Postman by clicking <emphasis>Import</emphasis> at the top, choosing
<emphasis>Download from link</emphasis> and then entering the following URL:
<literal><link xlink:href="https://git.opendaylight.org/gerrit/gitweb?p=lispflowmapping.git;a=blob_plain;f=resources/tutorial/Beryllium_Tutorial.json.postman_collection;hb=refs/heads/stable/beryllium">https://git.opendaylight.org/gerrit/gitweb?p=lispflowmapping.git;a=blob_plain;f=resources/tutorial/Beryllium_Tutorial.json.postman_collection;hb=refs/heads/stable/beryllium</link></literal>.
Alternatively, you can save the file on your machine, or if you have the
repository checked out, you can import from there. You will need to create a
new Postman Environment and define some variables within: <literal>controllerHost</literal>
set to the hostname or IP address of the machine running the ODL instance,
and <literal>restconfPort</literal> to 8181, if you didn&#8217;t modify the default controller
settings.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">LISPmob version 0.5.x</emphasis>  The README.md lists the dependencies needed to
build it from source.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">A virtualization platform</emphasis></simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_target_environment_4">
<title>Target Environment</title>
<simpara>The three LISP data plane nodes and the LISP mapping system are assumed to be
running in Linux virtual machines, which have the <literal>eth0</literal> interface in NAT mode
to allow outside internet access and <literal>eth1</literal> connected to a host-only network,
with the following IP addresses (please adjust configuration files, JSON
examples, etc. accordingly if you&#8217;re using another addressing scheme):</simpara>
<table frame="all"
    rowsep="1" colsep="1">
<title>Nodes in the tutorial</title>
  
  <tgroup cols="3">
    
    <colspec colname="col_1" colwidth="33*"/>
    
    <colspec colname="col_2" colwidth="33*"/>
    
    <colspec colname="col_3" colwidth="33*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Node</entry>
        
        <entry align="left" valign="top">Node Type</entry>
        
        <entry align="left" valign="top">IP Address</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">controller</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>OpenDaylight</simpara></entry>
        
        <entry align="left" valign="top"><simpara>192.168.16.11</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">client</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>LISPmob</simpara></entry>
        
        <entry align="left" valign="top"><simpara>192.168.16.30</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">server1</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>LISPmob</simpara></entry>
        
        <entry align="left" valign="top"><simpara>192.168.16.31</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">server2</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>LISPmob</simpara></entry>
        
        <entry align="left" valign="top"><simpara>192.168.16.32</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara><emphasis role="strong">service-node</emphasis></simpara></entry>
        
        <entry align="left" valign="top"><simpara>LISPmob</simpara></entry>
        
        <entry align="left" valign="top"><simpara>192.168.16.33</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

<note>
<simpara>While the tutorial uses LISPmob as the data plane, it could be any
      LISP-enabled hardware or software router (commercial/open source).</simpara>
</note>

</section>
<section xml:id="_instructions_5">
<title>Instructions</title>
<simpara>The below steps use the command line tool cURL to talk to the LISP Flow
Mapping RPC REST API. This is so that you can see the actual request URLs and
body content on the page.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Install and run OpenDaylight Beryllium release on the controller VM. Please
follow the general OpenDaylight Beryllium Installation Guide for this step.
Once the OpenDaylight controller is running install the
<emphasis>odl-lispflowmapping-msmr</emphasis> feature from the Karaf CLI:</simpara>

<literallayout class="monospaced">feature:install odl-lispflowmapping-msmr</literallayout>


<simpara>It takes quite a while to load and initialize all features and their
dependencies. It&#8217;s worth running the command <literal>log:tail</literal> in the Karaf console
to see when the log output is winding down, and continue with the tutorial
after that.</simpara>
</listitem>
<listitem>
<simpara>Install LISPmob on the <emphasis role="strong">client</emphasis>, <emphasis role="strong">server1</emphasis>, <emphasis role="strong">server2</emphasis>, and <emphasis role="strong">service-node</emphasis>
VMs following the installation instructions
<link xlink:href="https://github.com/LISPmob/lispmob#software-prerequisites">from the LISPmob
README file</link>.</simpara>
</listitem>
<listitem>
<simpara>Configure the LISPmob installations from the previous step. Starting from
the <literal>lispd.conf.example</literal> file in the distribution, set the EID in each
<literal>lispd.conf</literal> file from the IP address space selected for your virtual/LISP
network. In this tutorial the EID of the <emphasis role="strong">client</emphasis> is set to 1.1.1.1/32, and
that of <emphasis role="strong">server1</emphasis> and <emphasis role="strong">server2</emphasis> to 2.2.2.2/32.</simpara>
</listitem>
<listitem>
<simpara>Set the RLOC interface to <literal>eth1</literal> in each <literal>lispd.conf</literal> file. LISP will
determine the RLOC (IP address of the corresponding VM) based on this
interface.</simpara>
</listitem>
<listitem>
<simpara>Set the Map-Resolver address to the IP address of the <emphasis role="strong">controller</emphasis>, and on
the <emphasis role="strong">client</emphasis> the Map-Server too. On <emphasis role="strong">server1</emphasis> and <emphasis role="strong">server2</emphasis> set the
Map-Server to something else, so that it doesn&#8217;t interfere with the
mappings on the controller, since we&#8217;re going to program them manually.</simpara>
</listitem>
<listitem>
<simpara>Modify the "key" parameter in each <literal>lispd.conf</literal> file to a key/password of
your choice (<emphasis>password</emphasis> in this tutorial).</simpara>
<note>
<simpara>The <literal>resources/tutorial</literal> directory in the <emphasis>stable/beryllium</emphasis> branch of the
      project git repository has the files used in the tutorial
      <link xlink:href="https://git.opendaylight.org/gerrit/gitweb?p=lispflowmapping.git;a=tree;f=resources/tutorial;hb=refs/heads/stable/beryllium">checked
      in</link>, so you can just copy the files to <literal>/root/lispd.conf</literal> on the
      respective VMs. You will also find the JSON files referenced below in
      the same directory.</simpara>
</note>

</listitem>
<listitem>
<simpara>Define a key and EID prefix association in OpenDaylight using the RPC REST
API for the <emphasis role="strong">client</emphasis> EID (1.1.1.1/32) to allow registration from the
southbound. Since the mappings for the server EID will be configured from
the REST API, no such association is necessary. Run the below command on
the <emphasis role="strong">controller</emphasis> (or any machine that can reach <emphasis role="strong">controller</emphasis>, by replacing
<emphasis>localhost</emphasis> with the IP address of <emphasis role="strong">controller</emphasis>).</simpara>

<literallayout class="monospaced">curl -u "admin":"admin" -H "Content-type: application/json" -X POST \
    http://localhost:8181/restconf/operations/odl-mappingservice:add-key \
    --data @add-key.json</literallayout>


<simpara>where the content of the <emphasis>add-key.json</emphasis> file is the following:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "input": {
        "eid": {
            "address-type": "ietf-lisp-address-types:ipv4-prefix-afi",
            "ipv4-prefix": "1.1.1.1/32"
        },
        "mapping-authkey": {
            "key-string": "password",
            "key-type": 1
        }
    }
}</programlisting>

</listitem>
<listitem>
<simpara>Verify that the key is added properly by requesting the following URL:</simpara>

<literallayout class="monospaced">curl -u "admin":"admin" -H "Content-type: application/json" -X POST \
    http://localhost:8181/restconf/operations/odl-mappingservice:get-key \
    --data @get1.json</literallayout>


<simpara>where the content of the <emphasis>get1.json</emphasis> file can be derived from the
<emphasis>add-key.json</emphasis> file by removing the <emphasis>mapping-authkey</emphasis> field.  The output the
above invocation should look like this:</simpara>

<literallayout class="monospaced">{"output":{"mapping-authkey":{"key-type":1,"key-string":"password"}}}</literallayout>


</listitem>
<listitem>
<simpara>Run the <literal>lispd</literal> LISPmob daemon on all VMs:</simpara>

<literallayout class="monospaced">lispd -f /root/lispd.conf</literallayout>


</listitem>
<listitem>
<simpara>The <emphasis role="strong">client</emphasis> LISPmob node should now register its EID-to-RLOC mapping in
OpenDaylight. To verify you can lookup the corresponding EIDs via the REST
API</simpara>

<literallayout class="monospaced">curl -u "admin":"admin" -H "Content-type: application/json" -X POST \
    http://localhost:8181/restconf/operations/odl-mappingservice:get-mapping \
    --data @get1.json</literallayout>


<simpara>An alternative way for retrieving mappings from ODL using the southbound
interface is using the <link xlink:href="https://github.com/davidmeyer/lig"><literal>lig</literal></link> open source
tool.</simpara>
</listitem>
<listitem>
<simpara>Register the EID-to-RLOC mapping of the server EID 2.2.2.2/32 to the
controller, pointing to <emphasis role="strong">server1</emphasis> and <emphasis role="strong">server2</emphasis> with a higher priority for
<emphasis role="strong">server1</emphasis></simpara>

<literallayout class="monospaced">curl -u "admin":"admin" -H "Content-type: application/json" -X POST \
    http://localhost:8181/restconf/operations/odl-mappingservice:add-mapping \
    --data @mapping.json</literallayout>


<simpara>where the <emphasis>mapping.json</emphasis> file looks like this:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "input": {
        "mapping-record": {
            "recordTtl": 1440,
            "action": "NoAction",
            "authoritative": true,
            "eid": {
                "address-type": "ietf-lisp-address-types:ipv4-prefix-afi",
                "ipv4-prefix": "2.2.2.2/32"
            },
            "LocatorRecord": [
                {
                    "locator-id": "server1",
                    "priority": 1,
                    "weight": 1,
                    "multicastPriority": 255,
                    "multicastWeight": 0,
                    "localLocator": true,
                    "rlocProbed": false,
                    "routed": true,
                    "rloc": {
                        "address-type": "ietf-lisp-address-types:ipv4-afi",
                        "ipv4": "192.168.16.31"
                    }
                },
                {
                    "locator-id": "server2",
                    "priority": 2,
                    "weight": 1,
                    "multicastPriority": 255,
                    "multicastWeight": 0,
                    "localLocator": true,
                    "rlocProbed": false,
                    "routed": true,
                    "rloc": {
                        "address-type": "ietf-lisp-address-types:ipv4-afi",
                        "ipv4": "192.168.16.32"
                    }
                }
            ]
        }
    }
}</programlisting>

<simpara>Here the priority of the second RLOC (192.168.16.32 - <emphasis role="strong">server2</emphasis>) is 2, a higher
numeric value than the priority of 192.168.16.31, which is 1. This policy is
saying that <emphasis role="strong">server1</emphasis> is preferred to <emphasis role="strong">server2</emphasis> for reaching EID 2.2.2.2/32.
Note that lower priority value has higher preference in LISP.</simpara>
</listitem>
<listitem>
<simpara>Verify the correct registration of the 2.2.2.2/32 EID:</simpara>

<literallayout class="monospaced">curl -u "admin":"admin" -H "Content-type: application/json" -X POST \
    http://localhost:8181/restconf/operations/odl-mappingservice:get-mapping \
    --data @get2.json</literallayout>


<simpara>where <emphasis>get2.json</emphasis> can be derived from <emphasis>get1.json</emphasis> by changing the content of
the <emphasis>Ipv4Address</emphasis> field from <emphasis>1.1.1.1</emphasis> to <emphasis>2.2.2.2</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Now the LISP network is up. To verify, log into the <emphasis role="strong">client</emphasis> VM and ping the server EID:</simpara>

<literallayout class="monospaced">ping 2.2.2.2</literallayout>


</listitem>
<listitem>
<simpara>Let&#8217;s test fail-over now. Suppose you had a service on <emphasis role="strong">server1</emphasis> which
became unavailable, but <emphasis role="strong">server1</emphasis> itself is still reachable. LISP will not
automatically fail over, even if the mapping for 2.2.2.2/32 has two
locators, since both locators are still reachable and uses the one with the
higher priority (lowest priority value). To force a failover, we need to
set the priority of <emphasis role="strong">server2</emphasis> to a lower value. Using the file mapping.json
above, swap the priority values between the two locators (lines 14 and 28
in <emphasis>mapping.json</emphasis>) and repeat the request from step 11.  You can also
repeat step 12 to see if the mapping is correctly registered.  If you leave
the ping on, and monitor the traffic using wireshark, you can see that the
ping traffic to 2.2.2.2 will be diverted from the <emphasis role="strong">server1</emphasis> RLOC to the
<emphasis role="strong">server2</emphasis> RLOC.</simpara>
<simpara>With the default OpenDaylight configuration the failover should be near
instantaneous (we observed 3 lost pings in the worst case), because of the
LISP <link xlink:href="http://tools.ietf.org/html/rfc6830#section-6.6.2">Solicit-Map-Request
(SMR) mechanism</link> that can ask a LISP data plane element to update its mapping
for a certain EID (enabled by default). It is controlled by the <literal>lisp.smr</literal>
variable in <literal>etc/custom.porperties</literal>. When enabled, any mapping change from the
RPC interface will trigger an SMR packet to all data plane elements that have
requested the mapping in the last 24 hours (this value was chosen because it&#8217;s
the default TTL of Cisco IOS xTR mapping registrations). If disabled, ITRs
keep their mappings until the TTL specified in the Map-Reply expires.</simpara>
</listitem>
<listitem>
<simpara>To add a service chain into the path from the client to the server, we can
use an Explicit Locator Path, specifying the <emphasis role="strong">service-node</emphasis> as the first
hop and <emphasis role="strong">server1</emphasis> (or <emphasis role="strong">server2</emphasis>) as the second hop. The following will
achieve that:</simpara>

<literallayout class="monospaced">curl -u "admin":"admin" -H "Content-type: application/json" -X POST \
    http://localhost:8181/restconf/operations/odl-mappingservice:add-mapping \
    --data @elp.json</literallayout>


<simpara>where the <emphasis>elp.json</emphasis> file is as follows:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "input": {
        "mapping-record": {
            "recordTtl": 1440,
            "action": "NoAction",
            "authoritative": true,
            "eid": {
                "address-type": "ietf-lisp-address-types:ipv4-prefix-afi",
                "ipv4-prefix": "2.2.2.2/32"
            },
            "LocatorRecord": [
                {
                    "locator-id": "ELP",
                    "priority": 1,
                    "weight": 1,
                    "multicastPriority": 255,
                    "multicastWeight": 0,
                    "localLocator": true,
                    "rlocProbed": false,
                    "routed": true,
                    "rloc": {
                        "address-type": "ietf-lisp-address-types:explicit-locator-path-lcaf",
                        "explicit-locator-path": {
                            "hop": [
                                {
                                    "hop-id": "service-node",
                                    "address": "192.168.16.33",
                                    "lrs-bits": "strict"
                                },
                                {
                                    "hop-id": "server1",
                                    "address": "192.168.16.31",
                                    "lrs-bits": "strict"
                                }
                            ]
                        }
                    }
                }
            ]
        }
    }
}</programlisting>

<simpara>After the mapping for 2.2.2.2/32 is updated with the above, the ICMP traffic
from <emphasis role="strong">client</emphasis> to <emphasis role="strong">server1</emphasis> will flow through the <emphasis role="strong">service-node</emphasis>. You can
confirm this in the LISPmob logs, or by sniffing the traffic on either the
<emphasis role="strong">service-node</emphasis> or <emphasis role="strong">server1</emphasis>. Note that service chains are unidirectional, so
unless another ELP mapping is added for the return traffic, packets will go
from <emphasis role="strong">server1</emphasis> to <emphasis role="strong">client</emphasis> directly.</simpara>
</listitem>
<listitem>
<simpara>Suppose the <emphasis role="strong">service-node</emphasis> is actually a firewall, and traffic is diverted
there to support access control lists (ACLs). In this tutorial that can be
emulated by using <literal>iptables</literal> firewall rules in the <emphasis role="strong">service-node</emphasis> VM. To
deny traffic on the service chain defined above, the following rule can be
added:</simpara>

<literallayout class="monospaced">iptables -A OUTPUT --dst 192.168.16.31 -j DROP</literallayout>


<simpara>The ping from the <emphasis role="strong">client</emphasis> should now have stopped.</simpara>
<simpara>In this case the ACL is done on the destination RLOC. There is an effort underway in the LISPmob
community to allow filtering on EIDs, which is the more logical place to apply
ACLs.</simpara>
</listitem>
<listitem>
<simpara>To delete the rule and restore connectivity on the service chain, delete
the ACL by issuing the following command:</simpara>

<literallayout class="monospaced">iptables -D OUTPUT --dst 192.168.16.31 -j DROP</literallayout>


<simpara>which should restore connectivity.</simpara>
</listitem>
</orderedlist>

</section>
</section>
</section>
<section xml:id="_lisp_flow_mapping_support">
<title>LISP Flow Mapping Support</title>
<simpara>For support the lispflowmapping project can be reached by emailing the
developer mailing list: <link xlink:href="mailto:lispflowmapping-dev@lists.opendaylight.org">lispflowmapping-dev@lists.opendaylight.org</link> or on the
#opendaylight-lispflowmapping IRC channel on irc.freenode.net.</simpara>
<simpara>Additional information is also available on the <link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Lisp_Flow_Mapping:Main">Lisp Flow Mapping wiki</link></simpara>
</section>
</chapter>
<chapter xml:id="_messaging4transport_user_guide">
<title>Messaging4Transport User Guide</title>
<section xml:id="_overview_22">
<title>Overview</title>
<simpara>The OpenDaylight controller is based on an MD-SAL allows the modeling of data, RPCs, and notifications. Because of this model basis, adding new northbound bindings to the controller is simple, and everything modeled becomes exposed automatically. Currently the MD-SAL has RESTCONF northbound bindings, while more bindings such as AMQP and XMPP can easily be implemented and integrated. Messaging4Transport attempts to build more northbound interfaces to MD-SAL, with message-oriented middleware protocols. Messaging4Transport Beryllium offers an AMQP northbound to MD-SAL.</simpara>
</section>
<section xml:id="_architecture">
<title>Architecture</title>
<simpara><link xlink:href="http://www.amqp.org">Advanced Message Queuing Protocol (AMQP)</link> is an open standard application layer protocol for message-oriented middleware. Messaging4Transport adds AMQP bindings to the MD-SAL, which would automatically make all MD-SAL APIs available via that mechanism. Messaging4Transport is built as an independent Karaf feature, that exposes the MD-SAL data tree, RPCs, and notifications via AMQP, when installed. While AMQP is the focus for the Beryllium Release, other message-oriented transport protocols will be considered for future releases.</simpara>
<simpara>A message broker internal or external to OpenDaylight receives the messages that are published by the MD-SAL, and sends them to the subscribers. Hence, the broker functions as an intermediary in messages from the controller to the listeners, and vice versa. ActiveMQ has been chosen as the default external broker in the Messaging4Transport Beryllium.</simpara>
<section xml:id="_installing_karaf_features">
<title>Installing Karaf Features</title>
<simpara>Install Messaging4Transport by using the karaf console.</simpara>

<literallayout class="monospaced">feature:install odl-mdsal-all odl-messaging4transport-api odl-messaging4transport</literallayout>


</section>
<section xml:id="_activemq_integration_with_karaf">
<title>ActiveMQ Integration with Karaf</title>
<simpara>ActiveMQ broker can be integrated into the Karaf environment. The <link xlink:href="http://activemq.apache.org/osgi-integration.html">ActiveMQ OSGi integration instructions page</link> is for Karaf 2.x. Please see the <link xlink:href="http://karaf.apache.org/manual/latest/update-notes.html">Karaf updates page</link> for further updates.</simpara>
<simpara>Since OpenDaylight Beryllium is built on Karaf 3.x, the instructions are given below to install and activate ActiveMQ OSGi bundle into Karaf.</simpara>
<itemizedlist>
<listitem>
<simpara>Installing ActiveMQ in Karaf
feature:repo-add activemq 5.9.0</simpara>

<literallayout class="monospaced">feature:install activemq-broker</literallayout>


</listitem>
<listitem>
<simpara>Installing <link xlink:href="http://hawt.io/getstarted/index.html">hawtio</link> in Karaf.</simpara>
</listitem>
</itemizedlist>

<simpara>hawtio provides a user-friendly web user interface, that can be installed optionally to work with the project.</simpara>

<literallayout class="monospaced">feature:repo-add hawtio 1.4.51</literallayout>



<literallayout class="monospaced">feature:install hawtio</literallayout>


</section>
</section>
<section xml:id="_administering_or_managing_messaging4transport">
<title>Administering or Managing Messaging4Transport</title>
<simpara>The broker can be a stand-alone or a Karaf-based broker integrated into OpenDaylight. Just install the bundles as shown below for Karaf based integration. In such a case, broker will start with OpenDaylight. The publisher publishes the data tree. At least a dummy listener should be started before the publisher to receive the published messages.</simpara>
<simpara>You may further configure the broker by modifying the ActiveMQ configuration file in ODL_INSTALLATION_DIR/karaf/target/assembly/etc/org.apache.activemq.server-default.cfg</simpara>
<simpara>Make sure to set the transport connections in karaf/target/assembly/etc/activemq.xml, which is set by default in ActiveMQ stand-alone implementation; but not in the Karaf implementation.</simpara>
<simpara>It is suggested to limit concurrent connections to just 1000. However, probably we will need more concurrency, based on the requirements. Setting it to 100,000 for now.</simpara>

<literallayout class="monospaced">&lt;transportConnectors&gt;
&lt;!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB --&gt;
&lt;!-- Uncomment whatever necessary. --&gt;
&lt;transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=100000&amp;amp;wireFormat.maxFrameSize=104857600"/&gt;
&lt;transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=100000&amp;amp;wireFormat.maxFrameSize=104857600"/&gt;
&lt;!--transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=100000&amp;amp;wireFormat.maxFrameSize=104857600"/ --&gt;
&lt;!--transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=100000&amp;amp;wireFormat.maxFrameSize=104857600"/ --&gt;
&lt;!--transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=100000&amp;amp;wireFormat.maxFrameSize=104857600"/ --&gt;
&lt;/transportConnectors&gt;</literallayout>


<simpara>You may need to install/re-install the bundle after that and restart the container for the changes to take effort.</simpara>
<simpara>The MD-SAL will be the publisher that publishes the MD-SAL data tree, RPCs, and notifications via AMQP. The listener can be any consumer that consumes the data tree and the other data published by MD-SAL via the AMQP binding.</simpara>
<simpara>Once configured, the ActiveMQ console can be accessed from the <link xlink:href="http://localhost:8181/hawtio/">hawtio web console</link> with the credentials karaf/karaf.</simpara>
<simpara>Messaging4Transport can hence be configured to publish MD-SAL notifications to an external AMQP listener application through the broker. A simple listener application is included in the org.opendaylight.messaging4transport.sample package.</simpara>
</section>
</chapter>
<chapter xml:id="_network_modeling_nemo">
<title>NEtwork MOdeling (NEMO)</title>
<simpara>This section describes how to use the NEMO feature in OpenDaylight
and contains contains configuration, administration, and management
sections for the feature.</simpara>
<section xml:id="_overview_23">
<title>Overview</title>
<simpara>TBD: An overview of the NEMO feature and the use case and the
audience who will use the feature.</simpara>
</section>
<section xml:id="_nemo_engine_architecture">
<title>NEMO Engine Architecture</title>
<simpara>TBD: Information about NEMO Engine components and how they work together.
Also include information about how the feature integrates with
OpenDaylight.</simpara>
</section>
<section xml:id="_configuring_nemo_engine">
<title>Configuring NEMO Engine</title>
<simpara>TBD: Describe how to configure the NEMO Engine after installation.</simpara>
</section>
<section xml:id="_administering_or_managing_nemo_engine">
<title>Administering or Managing NEMO Engine</title>
<simpara>TBD: Include related command reference or  operations
for using the NEMO Engine.</simpara>
</section>
<section xml:id="_tutorials_7">
<title>Tutorials</title>
<simpara>Below are tutorials for NEMO Engine.</simpara>
<section xml:id="_using_nemo_engine">
<title>Using NEMO Engine</title>
<simpara>TBD: State the purpose of tutorial</simpara>
<section xml:id="_overview_24">
<title>Overview</title>
<simpara>TBD: An overview of the NEMO tutorial</simpara>
</section>
<section xml:id="_prerequisites_6">
<title>Prerequisites</title>
<simpara>TBD: Provide any prerequisite information, assumed knowledge, or environment
required to execute the use case.</simpara>
</section>
<section xml:id="_target_environment_5">
<title>Target Environment</title>
<simpara>TBD: Include any topology requirement for the use case.</simpara>
</section>
<section xml:id="_instructions_6">
<title>Instructions</title>
<simpara>TBD: Step by step procedure for using NEMO Engine.</simpara>
</section>
</section>
</section>
</chapter>
<chapter xml:id="_netide_user_guide">
<title>NetIDE User Guide</title>
<section xml:id="_overview_25">
<title>Overview</title>
<simpara>OpenDaylight&#8217;s NetIDE project allows users to run SDN applications written for different
SDN controllers, e.g., Floodlight or Ryu, on top of OpenDaylight managed infrastructure. The NetIDE
Network Engine integrates a client controller layer that executes the modules that
compose a Network Application and interfaces with a server SDN controller layer that drives
the underlying infrastructure. In addition, it provides a uniform interface to common tools
that are intended to allow the inspection/debug of the control channel and the management of the
network resources.</simpara>
<simpara>The Network Engine provides a compatibility layer capable of translating calls of the network
applications running on top of the client controllers, into calls for the server controller framework. The
communication between the client and the server layers is achieved through the NetIDE
intermediate protocol, which is an application-layer protocol on top of TCP that transmits the
network control/management messages from the client to the server controller and vice-versa.
Between client and server controller sits the Core Layer which also speaks the intermediate protocol.</simpara>
</section>
<section xml:id="_netide_api">
<title>NetIDE API</title>
<section xml:id="_architecture_and_design">
<title>Architecture and Design</title>
<simpara>The NetIDE engine follows the ONF&#8217;s proposed Client/Server SDN Application architecture.</simpara>
<figure>
<title>NetIDE Network Engine Architecture</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/netide/netidearch.jpg" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>netidearch</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_core">
<title>Core</title>
<simpara>The NetIDE Core is a message-based system that allows for the exchange of messages between
OpenDaylight and subscribed Client SDN Controllers</simpara>
</section>
<section xml:id="_handling_reply_messages_correctly">
<title>Handling reply messages correctly</title>
<simpara>When an application module sends a request to the network (e.g. flow statistics, features, etc.),
the Network Engine must be able to correctly drive the corresponding reply to such a module. This is
not a trivial task, as many modules may compose the network application running on top of the
Network Engine, and there is no way for the Core to pair replies and requests. The transaction
IDs (xid) in the OpenFlow header are unusable in this case, as it may happen that different modules
use the same values.</simpara>
<simpara>In the proposed approach, represented in the figure below, the task of pairing replies with requests is
performed by the Shim Layer which replaces the original xid of the OpenFlow requests coming
from the core with new unique xid values. The Shim also saves the original OpenFlow xid value
and the module id it finds in the NetIDE header. As the network elements must use the same xid
values in the replies, the Shim layer can easily pair a reply with the correct request as it is using
unique xid values.</simpara>
<simpara>The below figure shows how the Network Engine should handle the controller-to-switch OpenFlow messages.
The diagram shows the case of a request message sent by an application module to a network
element where the Backend inserts the module id of the module in the NetIDE header (X in the
Figure). For other messages generated by the client controller platform (e.g. echo requests) or by
the Backend, the module id of the Backend is used (Y in the Figure).</simpara>
<figure>
<title>NetIDE Communication Flow</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/netide/netide-flow.jpg" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>netide flow</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_configuration">
<title>Configuration</title>
<simpara>Below are the configuration items which can be edited, including their default values.</simpara>
<itemizedlist>
<listitem>
<simpara>core-address: This is the ip address of the NetIDE Core, default is 127.0.0.1</simpara>
</listitem>
<listitem>
<simpara>core-port: The port of on which the NetIDE core is listening on</simpara>
</listitem>
<listitem>
<simpara>address: IP address where the controller listens for switch connections, default is 127.0.0.1</simpara>
</listitem>
<listitem>
<simpara>port: Port where controller listens for switch connections, default: 6644</simpara>
</listitem>
<listitem>
<simpara>transport-protocol: default is TCP</simpara>
</listitem>
<listitem>
<simpara>switch-idle-timeout: default is 15000ms</simpara>
</listitem>
</itemizedlist>

</section>
</section>
</chapter>
<chapter xml:id="_network_intent_composition_nic_user_guide">
<title>Network Intent Composition (NIC) User Guide</title>
<section xml:id="_overview_26">
<title>Overview</title>
<simpara>Network Intent Composition (NIC) is an interface that allows clients to
express a desired state in an implementation-neutral form that will be
enforced via modification of available resources under the control of
the OpenDaylight system.</simpara>
<simpara>This description is purposely abstract as an intent interface might
encompass network services, virtual devices, storage, etc.</simpara>
<simpara>The intent interface is meant to be a controller-agnostic interface
so that "intents" are portable across implementations, such as OpenDaylight
and ONOS. Thus an intent specification should not contain implementation
or technology specifics.</simpara>
<simpara>The intent specification will be implemented by decomposing the intent
and augmenting it with implementation specifics that are driven by
local implementation rules, policies, and/or settings.</simpara>
</section>
<section xml:id="_network_intent_composition_nic_architecture">
<title>Network Intent Composition (NIC) Architecture</title>
<simpara>The core of the NIC architecture is the intent model, which specifies
the details of the desired state. It is the responsibility of the NIC
implementation transforms this desired state to the resources under
the control of OpenDaylight. The component that transforms the
intent to the implementation is typically referred to as a renderer.</simpara>
<simpara>For the Lithium release, multiple, simultaneous renderers will not be supported.
Instead either the VTN or GBP renderer feature can be installed, but
not both.</simpara>
<simpara>For the Litium release, the only actions supported are "ALLOW" and
"BLOCK". The "ALLOW" action indicates that traffic can flow between
the source and destination end points, while "BLOCK" prevents that
flow; although it is possible that an given implementation may augment
the available actions with additional actions.</simpara>
<simpara>Besides transforming a desired state to an actual state it is the
responsibility of a renderer to update the operational state tree for
the NIC data model in OpenDaylight to reflect the intent which the
renderer implemented.</simpara>
</section>
<section xml:id="_configuring_network_intent_composition_nic">
<title>Configuring Network Intent Composition (NIC)</title>
<simpara>For the Litium release there is no default implementation of a renderer,
thus without an additional module installed the NIC will not function.</simpara>
</section>
<section xml:id="_administering_or_managing_network_intent_composition_nic">
<title>Administering or Managing Network Intent Composition (NIC)</title>
<simpara>There is no additional administration of management capabilities
related to the Network Intent Composition features.</simpara>
</section>
<section xml:id="_interactions">
<title>Interactions</title>
<simpara>A user can interact with the Network Intent Composition (NIC) either
through the RESTful interface using standard RESTCONF operations and
syntax or via the Karaf console CLI.</simpara>
<section xml:id="_rest">
<title>REST</title>
<section xml:id="_configuration_2">
<title>Configuration</title>
<simpara>The Network Intent Composition (NIC) feature supports the following REST
operations against the configuration data store.</simpara>
<itemizedlist>
<listitem>
<simpara>POST - creates a new instance of an intent in the configuration store,
which will trigger the realization of that intent. An ID <emphasis>must</emphasis> be specified
as part of this request as an attribute of the intent.</simpara>
</listitem>
<listitem>
<simpara>PUT - creates or updates an instance of an intent in the configuration store,
which will trigger the realization of that intent.</simpara>
</listitem>
<listitem>
<simpara>GET - fetches a list of all configured intents or a specific configured
intent.</simpara>
</listitem>
<listitem>
<simpara>DETELE - removes a configured intent from the configuration store, which
triggers the removal of the intent from the network.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_operational">
<title>Operational</title>
<simpara>The Network Intent Composition (NIC) feature supports the following REST
operations against the operational data store.</simpara>
<itemizedlist>
<listitem>
<simpara>GET - fetches a list of all operational intents or a specific operational
intent.</simpara>
</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_karaf_console_cli">
<title>Karaf Console CLI</title>
<simpara>Using the Karaf console CLI intents can be manipulated. The following Karaf
console CLI commands are available.</simpara>
<itemizedlist>
<listitem>
<simpara>intent:add &lt;intent-data&gt; - creates a new intent</simpara>
</listitem>
<listitem>
<simpara>intent:update &lt;id&gt; &lt;intent-data&gt; - updates an existing intent</simpara>
</listitem>
<listitem>
<simpara>intent:list - lists all intents in the system</simpara>
</listitem>
<listitem>
<simpara>intent:show &lt;id&gt; - display the details of a specific intent</simpara>
</listitem>
<listitem>
<simpara>intent:delete &lt;id&gt; - removes an intent from the system</simpara>
</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_nic_usage_examples">
<title>NIC Usage Examples</title>
<section xml:id="_how_to_configure_vtn_renderer">
<title>How to configure VTN Renderer</title>
<simpara>The NIC Model provides an abstract model for expressing the desired state and operation of the network.</simpara>
<section xml:id="_requirement">
<title>Requirement</title>
<itemizedlist>
<listitem>
<simpara>Configure mininet and create a topology:</simpara>
</listitem>
</itemizedlist>

<simpara>Replace &lt;Controller IP&gt; based on your environment</simpara>
<screen>$  mininet@mininet-vm:~$ sudo mn --controller=remote,ip=&lt;Controller IP&gt; --topo tree,2</screen>

<screen> mininet&gt; net
 h1 h1-eth0:s2-eth1
 h2 h2-eth0:s2-eth2
 h3 h3-eth0:s3-eth1
 h4 h4-eth0:s3-eth2
 s1 lo:  s1-eth1:s2-eth3 s1-eth2:s3-eth3
 s2 lo:  s2-eth1:h1-eth0 s2-eth2:h2-eth0 s2-eth3:s1-eth1
 s3 lo:  s3-eth1:h3-eth0 s3-eth2:h4-eth0 s3-eth3:s1-eth2
 c0</screen>

</section>
<section xml:id="_downloading_and_deploy_karaf_distribution">
<title>Downloading and deploy Karaf distribution</title>
<itemizedlist>
<listitem>
<simpara>Get the Lithium Distribution.</simpara>
</listitem>
<listitem>
<simpara>Unzip the  downloaded zip distribution</simpara>
</listitem>
<listitem>
<simpara>To run the Karaf</simpara>
</listitem>
</itemizedlist>

<screen>./bin/karaf</screen>

<itemizedlist>
<listitem>
<simpara>Once the console is up, type as below to install feature.</simpara>
</listitem>
</itemizedlist>

<screen>feature:install odl-nic-renderer-vtn</screen>

</section>
<section xml:id="_configuration_3">
<title>Configuration</title>
<simpara>Please execute the following curl commands to test network intent using mininet:</simpara>
<itemizedlist>
<listitem>
<simpara>Create Intent</simpara>
</listitem>
</itemizedlist>

<screen>curl -v --user "admin":"admin" -H "Accept: application/json" -H "Content-type: application/json" -X PUT http://localhost:8181/restconf/config/intent:intents/intent/b9a13232-525e-4d8c-be21-cd65e3436034 -d '{ "intent:intent" : { "intent:id": "b9a13232-525e-4d8c-be21-cd65e3436034", "intent:actions" : [ { "order" : 2, "allow" : {} } ], "intent:subjects" : [ { "order":1 , "end-point-group" : {"name":"10.0.0.1"} }, { "order":2 , "end-point-group" : {"name":"10.0.0.2"}} ] } }'</screen>

<screen>curl -v --user "admin":"admin" -H "Accept: application/json" -H "Content-type: application/json" -X PUT http://localhost:8181/restconf/config/intent:intents/intent/b9a13232-525e-4d8c-be21-cd65e3436035 -d '{ "intent:intent" : { "intent:id": "b9a13232-525e-4d8c-be21-cd65e3436035", "intent:actions" : [ { "order" : 2, "allow" : {} } ], "intent:subjects" : [ { "order":1 , "end-point-group" : {"name":"10.0.0.2"} }, { "order":2 , "end-point-group" : {"name":"10.0.0.3"}} ] } }'</screen>

<formalpara>
<title>Verification</title>
<para>
<screen> mininet&gt; pingall
 Ping: testing ping reachability
 h1 -&gt; h2 X X
 h2 -&gt; h1 h3 X
 h3 -&gt; X h2 X
 h4 -&gt; X X X</screen>
</para>
</formalpara>

<itemizedlist>
<listitem>
<simpara>Update an Intent</simpara>
</listitem>
</itemizedlist>

<screen>curl -v --user "admin":"admin" -H "Accept: application/json" -H "Content-type: application/json" -X PUT http://localhost:8181/restconf/config/intent:intents/intent/b9a13232-525e-4d8c-be21-cd65e3436034 -d '{ "intent:intent" : { "intent:id": "b9a13232-525e-4d8c-be21-cd65e3436034", "intent:actions" : [ { "order" : 2, "block" : {} } ], "intent:subjects" : [ { "order":1 , "end-point-group" : {"name":"10.0.0.1"} }, { "order":2 , "end-point-group" : {"name":"10.0.0.2"}} ] } }'</screen>

<formalpara>
<title>Verification</title>
<para>
<screen> mininet&gt; pingall
 Ping: testing ping reachability
 h1 -&gt; X X X
 h2 -&gt; X h3 X
 h3 -&gt; X h2 X
 h4 -&gt; X X X</screen>
</para>
</formalpara>

<note>
<simpara>Old actions and hosts are replaced by the new action and hosts.</simpara>
</note>

<itemizedlist>
<listitem>
<simpara>Delete an Intent</simpara>
</listitem>
</itemizedlist>

<screen>curl -v --user "admin":"admin" -H "Accept: application/json" -H     "Content-type: application/json" -X DELETE http://localhost:8181/restconf/config/intent:intents/intent/b9a13232-525e-4d8c-be21-cd65e3436035</screen>

<formalpara>
<title>Verification</title>
<para>
<screen> mininet&gt; pingall
 Ping: testing ping reachability
 h1 -&gt; X X X
 h2 -&gt; X X X
 h3 -&gt; X X X
 h4 -&gt; X X X</screen>
</para>
</formalpara>

<note>
<simpara>Ping between two hosts can also be done using MAC Address</simpara>
</note>

<screen>curl -v --user "admin":"admin" -H "Accept: application/json" -H "Content-type: application/json" -X PUT http://localhost:8181/restconf/config/intent:intents/intent/b9a13232-525e-4d8c-be21-cd65e3436035 -d '{ "intent:intent" : { "intent:id": "b9a13232-525e-4d8c-be21-cd65e3436035", "intent:actions" : [ { "order" : 2, "allow" : {} } ], "intent:subjects" : [ { "order":1 , "end-point-group" : {"name":"6e:4f:f7:27:15:c9"} }, { "order":2 , "end-point-group" : {"name":"aa:7d:1f:4a:70:81"}} ] } }'</screen>

</section>
</section>
</section>
</chapter>
<chapter xml:id="_odl_sdni_user_guide">
<title>ODL-SDNi User Guide</title>
<section xml:id="_introduction">
<title>Introduction</title>
<simpara>This user guide will help to setup the ODL-SDNi application for lithium release and contains the examples configuration using ODL-BGPCEP.</simpara>
</section>
<section xml:id="_components">
<title>Components</title>
<simpara>SDNiAggregator(controller), SDNi REST API(controller) and SDNiWrapper(bgpcep) are the three components in ODL-SDNi App</simpara>
<itemizedlist>
<listitem>
<simpara>SDNiAggregator: Connects with switch, topology, hosttracker managers of controller to get the topology and other related data.</simpara>
</listitem>
<listitem>
<simpara>SDNi REST API: It is a part of controller northbound, which gives the required information by quering SDNiAggregator through RESTCONF.</simpara>
</listitem>
<listitem>
<simpara>SDNiWrapper: This component uses the SDNi REST API and gathers the information required to be shared among controllers.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_troubleshooting">
<title>Troubleshooting</title>
<simpara>To work with multiple controllers, change some of the configuration in config.ini file. For example change the listening port of one controller to 6653 and other controller to 6663 in /root/controller/opendaylight/distribution/opendaylight/target/distribution.opendaylight-osgipackage/opendaylight/configuration/config.ini (i.e of.listenPort=6653).</simpara>
<formalpara>
<title>OpenFlow related system parameters</title>
<para>TCP port on which the controller is listening (default 6633) of.listenPort=6653</para>
</formalpara>
</section>
</chapter>
<chapter xml:id="_openflow_plugin_project_user_guide">
<title>OpenFlow Plugin Project User Guide</title>
<section xml:id="_overview_and_architecture">
<title>Overview and Architecture</title>
<section xml:id="_overview_and_architecture_2">
<title>Overview and Architecture</title>
<section xml:id="_overview_27">
<title>Overview</title>
<simpara>OpenFlow is a vendor-neutral standard communications interface defined
to enable interaction between the control and forwarding layers of an
SDN architecture. The OpenFlow plugin project intends to develop a
plugin to support implementations of the OpenFlow specification as it
develops and evolves. Specifically the project has developed a plugin
aiming to support OpenFlow 1.0 and 1.3.x. It can be extended to add
support for subsequent OpenFlow specifications. The plugin is based on
the Model Driven Service Abstraction Layer (MD-SAL) architecture
(<link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Controller:MD-SAL">https://wiki.opendaylight.org/view/OpenDaylight_Controller:MD-SAL</link>).
This new OpenFlow 1.0/1.3 MD-SAL based plugin is distinct from the old
OpenFlow 1.0 plugin which was based on the API driven SAL (AD-SAL)
architecture.</simpara>
</section>
<section xml:id="_scope">
<title>Scope</title>
<itemizedlist>
<listitem>
<simpara>Southbound plugin and integration of OpenFlow 1.0/1.3.x library
project</simpara>
</listitem>
<listitem>
<simpara>Ongoing support and integration of the OpenFlow specification</simpara>
</listitem>
<listitem>
<simpara>The plugin should be implemented in an easily extensibile manner</simpara>
</listitem>
<listitem>
<simpara>Protocol verification activities will be performed on supported
OpenFlow specifications</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_architecture_and_design_2">
<title>Architecture and Design</title>
<section xml:id="_functionality">
<title>Functionality</title>
<simpara>OpenFlow 1.3 Plugin will support the following functionality</simpara>
<itemizedlist>
<listitem>
<simpara>Connection Handling</simpara>
</listitem>
<listitem>
<simpara>Session Management</simpara>
</listitem>
<listitem>
<simpara>State Management.</simpara>
</listitem>
<listitem>
<simpara>Error Handling.</simpara>
</listitem>
<listitem>
<simpara>Mapping function(Infrastructure to OF structures).</simpara>
</listitem>
<listitem>
<simpara>Connection establishment will be handled by OpenFlow library using
opensource netty.io library.</simpara>
</listitem>
<listitem>
<simpara>Message handling(Ex: Packet in).</simpara>
</listitem>
<listitem>
<simpara>Event handling and propagation to upper layers.</simpara>
</listitem>
<listitem>
<simpara>Plugin will support both MD-SAL and Hard SAL.</simpara>
</listitem>
<listitem>
<simpara>Will be backward compatible with OF 1.0.</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">Activities in OF plugin module</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>New OF plugin bundle will support both OF 1.0 and OF 1.3.</simpara>
</listitem>
<listitem>
<simpara>Integration with OpenFlow library.</simpara>
</listitem>
<listitem>
<simpara>Integration with corresponding MD-SAL infrastructure.</simpara>
</listitem>
<listitem>
<simpara>Hard SAL will be supported as adapter on top of MD-SAL plugin.</simpara>
</listitem>
<listitem>
<simpara>OF 1.3 and OF 1.0 plugin will be integrated as single bundle.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_design">
<title>Design</title>
<simpara><emphasis role="strong">Overall Architecture</emphasis></simpara>
<figure>
<title>overal architecture</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/openflowplugin/plugin_design.jpg" contentwidth="389" contentdepth="289"/>
    </imageobject>
    <textobject><phrase>Overal architecture</phrase></textobject>
  </mediaobject>
</figure>

</section>
</section>
</section>
<section xml:id="_coverage">
<title>Coverage</title>
<section xml:id="_intro">
<title>Intro</title>
<simpara>This page is to catalog the things that have been tested and confirmed
to work:</simpara>
</section>
<section xml:id="_coverage_2">
<title>Coverage</title>
<simpara>Coverage has been moved to a <link xlink:href="https://docs.google.com/spreadsheet/ccc?key=0AtpUuSEP8OyMdHNTZjBoM0VjOE9BcGhHMzk3N19uamc&amp;usp=sharing%23gid=2#gid=0">GoogleDoc Spreadshee</link></simpara>
</section>
<section xml:id="_of_1_3_considerations">
<title>OF 1.3 Considerations</title>
<simpara>The baseline model is a OF 1.3 model, and the coverage tables primarily
deal with OF 1.3. However for OF 1.0, we have a column to indicate
either N/A if it doesn&#8217;t apply, or whether its been confirmed working.</simpara>
</section>
<section xml:id="_of_1_0_considerations">
<title>OF 1.0 Considerations</title>
<simpara>OF 1.0 is being considered as a switch with:
* 1 Table
* 0 Groups
* 0 Meters
* 1 Instruction (Apply Actions)
* and a limited vocabulary of matches and actions.</simpara>
</section>
</section>
</section>
<section xml:id="_tutorial_how_to">
<title>Tutorial / How-To</title>
<section xml:id="_running_the_controller_with_the_new_openflow_plugin">
<title>Running the controller with the new OpenFlow Plugin</title>
<section xml:id="_opendaylight_controller_plugin_options">
<title>Opendaylight Controller Plugin Options</title>
<itemizedlist xml:id="odl-ofp-running-controller-with-the-new-of-plugin_top">
<listitem>
<simpara>Run OpenDaylight controller with the new OpenFlow 1.0/1.3 plugin</simpara>
</listitem>
</itemizedlist>

<simpara>There are 2 ways. In integration project the plugin version is
controlled by startup parameter. Or there is distribution build
available directly in openflowplugin project.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>use <emphasis role="strong">integration</emphasis> project</simpara>
<itemizedlist>
<listitem>
<simpara>download and unzip latest build from
<link xlink:href="https://nexus.opendaylight.org/content/repositories/opendaylight.snapshot/org/opendaylight/integration/distribution-karaf/0.2.2-SNAPSHOT/">https://nexus.opendaylight.org/content/repositories/opendaylight.snapshot/org/opendaylight/integration/distribution-karaf/0.2.2-SNAPSHOT/</link></simpara>

<literallayout class="monospaced">cd &lt;extracted directory&gt;/bin
./karaf</literallayout>


</listitem>
<listitem>
<simpara>or clone and build <emphasis role="strong">integration</emphasis> project:</simpara>

<literallayout class="monospaced">git clone https://git.opendaylight.org/gerrit/p/integration.git
cd integration/distributions/extra/karaf
mvn clean install
cd ./target/assembly/bin</literallayout>


</listitem>
<listitem>
<simpara>and finally run</simpara>

<literallayout class="monospaced">./karaf</literallayout>


</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>use <emphasis role="strong">openflowplugin</emphasis> project</simpara>
<itemizedlist>
<listitem>
<simpara>download and unzip latest build from
<link xlink:href="https://nexus.opendaylight.org/content/repositories/opendaylight.snapshot/org/opendaylight/openflowplugin/openflowplugin-karaf/0.1.0-SNAPSHOT/">https://nexus.opendaylight.org/content/repositories/opendaylight.snapshot/org/opendaylight/openflowplugin/openflowplugin-karaf/0.1.0-SNAPSHOT/</link></simpara>

<literallayout class="monospaced">cd &lt;extracted directory&gt;/bin
./karaf</literallayout>


</listitem>
<listitem>
<simpara>or clone and build <emphasis role="strong">openflowplugin</emphasis> project:</simpara>

<literallayout class="monospaced">git clone https://git.opendaylight.org/gerrit/p/openflowplugin.git
cd openflowplugin
mvn clean install
cd ./distribution/karaf/target/assembly/bin/</literallayout>


</listitem>
<listitem>
<simpara>or build whole distribution localy from folder distribution/karaf</simpara>

<literallayout class="monospaced">mvn clean install -DskipTests</literallayout>


</listitem>
<listitem>
<simpara>and run</simpara>

<literallayout class="monospaced">./karaf</literallayout>


</listitem>
</itemizedlist>

</listitem>
</orderedlist>

<simpara><emphasis role="strong">How to start</emphasis></simpara>
<simpara>There are all helium features (from features-openflowplugin) duplicated into features-openflowplugin-li. The duplicates got suffix <emphasis>-li</emphasis> and provide Lithium codebase functionality.</simpara>
<simpara>These are most used:</simpara>
<itemizedlist>
<listitem>
<simpara>odl-openflowplugin-app-lldp-speaker-li</simpara>
</listitem>
<listitem>
<simpara>odl-openflowplugin-flow-services-rest-li</simpara>
</listitem>
<listitem>
<simpara>odl-openflowplugin-drop-test-li</simpara>
</listitem>
</itemizedlist>

<simpara>In case topology is required then the first one should be installed.</simpara>

<literallayout class="monospaced">feature:install odl-openflowplugin-app-lldp-speaker-li</literallayout>


<simpara>The Li-southbound currently provides:</simpara>
<itemizedlist>
<listitem>
<simpara>flow management</simpara>
</listitem>
<listitem>
<simpara>group management</simpara>
</listitem>
<listitem>
<simpara>meter management</simpara>
</listitem>
<listitem>
<simpara>statistics polling</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">What to log</emphasis></simpara>
<simpara>In order to see really low level messages enter these in karaf console:</simpara>

<literallayout class="monospaced">log:set TRACE org.opendaylight.openflowplugin.openflow.md.core
log:set TRACE org.opendaylight.openflowplugin.impl</literallayout>


<simpara><emphasis role="strong">How enable topology</emphasis></simpara>
<simpara>In order for topology to work (fill dataStore/operational with links) there must be LLDP responses delivered back to controller. This requires table-miss-entries. Table-miss-entry is a flow in table.id=0 with low priority, empty match and one output action = send to controller. Having this flow installed on every node will enable for gathering and exporting links between nodes into dataStore/operational. This is done if you use for example l2 switch application.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
   &lt;barrier&gt;false&lt;/barrier&gt;
   &lt;cookie&gt;54&lt;/cookie&gt;
   &lt;flags&gt;SEND_FLOW_REM&lt;/flags&gt;
   &lt;flow-name&gt;FooXf54&lt;/flow-name&gt;
   &lt;hard-timeout&gt;0&lt;/hard-timeout&gt;
   &lt;id&gt;4242&lt;/id&gt;
   &lt;idle-timeout&gt;0&lt;/idle-timeout&gt;
   &lt;installHw&gt;false&lt;/installHw&gt;
   &lt;instructions&gt;
       &lt;instruction&gt;
           &lt;apply-actions&gt;
               &lt;action&gt;
                   &lt;output-action&gt;
                       &lt;max-length&gt;65535&lt;/max-length&gt;
                       &lt;output-node-connector&gt;CONTROLLER&lt;/output-node-connector&gt;
                   &lt;/output-action&gt;
                   &lt;order&gt;0&lt;/order&gt;
               &lt;/action&gt;
           &lt;/apply-actions&gt;
           &lt;order&gt;0&lt;/order&gt;
       &lt;/instruction&gt;
   &lt;/instructions&gt;
   &lt;match/&gt;
   &lt;priority&gt;0&lt;/priority&gt;
   &lt;strict&gt;false&lt;/strict&gt;
   &lt;table_id&gt;0&lt;/table_id&gt;
&lt;/flow&gt;</programlisting>

<simpara><emphasis role="strong">Enable RESTCONF and Controller GUI</emphasis></simpara>
<simpara>If you want to use RESTCONF with openflowplugin project, you have to
install <emphasis>odl-restconf</emphasis> feature to enable that. To install <emphasis>odl-restconf</emphasis>
feature run the following command</simpara>
<screen>karaf#&gt;feature:install odl-restconf</screen>

<simpara>If you want to access the Controller GUI, you have to install
<emphasis>odl-dlux-core</emphasis> feature to enable that. Run following command to install
it</simpara>
<screen>karaf#&gt;feature:install odl-dlux-core</screen>

<simpara>Once you enable the feature, access the Controller GUI using following
URL</simpara>
<screen>http://&lt;controller-ip&gt;:8181/dlux/index.html</screen>

<simpara><emphasis role="strong">Run OpenDaylight controller with the old OpenFlow 1.0-only (old) plugin</emphasis></simpara>
<simpara>There are 2 ways. In integration project the plugin version is
controlled by startup parameter. Or there is distribution build
available directly in controller project.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>use <emphasis role="strong">integration/distributions/base</emphasis> project</simpara>
<itemizedlist>
<listitem>
<simpara>use the instructions from
OpenDaylight_OpenFlow_Plugin::Running_controller_with_the_new_OF_plugin#To_run_the_OpenDaylight_controller_with_the_new_OpenFlow_1.0/1.3_(new)_plugin[
1.0/1.3 plugin], but skip the plugin version parameter:</simpara>
<screen>./run.sh</screen>

</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>use <emphasis role="strong">controller/distribution/opendaylight</emphasis> project</simpara>
<itemizedlist>
<listitem>
<simpara>download and unzip latest build from
<link xlink:href="https://nexus.opendaylight.org/content/repositories/opendaylight.snapshot/org/opendaylight/controller/distribution.opendaylight/">https://nexus.opendaylight.org/content/repositories/opendaylight.snapshot/org/opendaylight/controller/distribution.opendaylight/</link></simpara>

<literallayout class="monospaced">cd opendaylight</literallayout>


</listitem>
<listitem>
<simpara>or clone and build <emphasis role="strong">controller</emphasis> project:</simpara>

<literallayout class="monospaced">git clone https://git.opendaylight.org/gerrit/p/controller.git
cd controller/opendaylight/distribution/opendaylight
mvn clean install
cd target/distribution.opendaylight-osgipackage/opendaylight</literallayout>


</listitem>
<listitem>
<simpara>and finally run (there is no version specific option, because the</simpara>
<simpara>1.0/1.3 (new) plugin is not available here at all)</simpara>
</listitem>
</itemizedlist>

</listitem>
</orderedlist>

<simpara><emphasis role="strong">Give it a minute to come up :)</emphasis></simpara>
</section>
</section>
<section xml:id="_openflow_1_3_enabled_software_switches_environment">
<title>OpenFlow 1.3 Enabled Software Switches / Environment</title>
<section xml:id="odl-ofp-test-environment_top">
<title>Getting Mininet with OF 1.3</title>
<simpara><link xlink:href="https://www.dropbox.com/s/dbf9a372elqs1s1/mininet-of-1.3.zip">Download
Mininet VM Upgraded to OF 1.3</link> (or the
<link xlink:href="https://www.dropbox.com/s/t66vqfqx57a7nhk/mininet-2.1.0-of1.3.zip">newer
mininet-2.1.0 with OVS-2.0</link> that works with VMware Player. For using
this on VirtualBox, import this to VMware Player and then export the
.vmdk ) or you could build one yourself
Openflow Protocol Library:OpenVirtualSwitch[Instructions for setting up
Mininet with OF 1.3].</simpara>
<section xml:id="_installing_under_virtualbox">
<title>Installing under VirtualBox</title>
<figure>
<title>configuring a host-only adapter</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/openflowplugin/host-only-vbox.png" contentwidth="400" contentdepth="335"/>
    </imageobject>
    <textobject><phrase>configuring a host-only adapter</phrase></textobject>
  </mediaobject>
</figure>

<simpara>For whatever reason, at least on the Mac, NATed interfaces in VirtualBox
don&#8217;t actually seem to allow for connections from the host to the VM.
Instead, you need to configure a host-only network and set it up. Do
this by:</simpara>
<itemizedlist>
<listitem>
<simpara>Go to the VM&#8217;s settings in VirtualBox then to network and add a second
adapter attached to "Host-only Adapter" (see the screenshot to the
right)</simpara>
</listitem>
<listitem>
<simpara>Edit the /etc/network/interfaces file to configure the adapter
properly by adding these two lines</simpara>
</listitem>
</itemizedlist>

<screen>auto eth1
iface eth1 inet dhcp</screen>

<itemizedlist>
<listitem>
<simpara>Reboot the VM</simpara>
</listitem>
</itemizedlist>

<simpara>At this point you should have two interfaces one which gives you NATed
access to the internet and another that gives you access between your
mac and the VMs. At least for me, the NATed interface gets a 10.0.2.x
address and the the host-only interface gets a 192.168.56.x address.</simpara>
</section>
<section xml:id="_your_simplest_choice_use_vagrant">
<title>Your simplest choice: Use Vagrant</title>
<simpara><link xlink:href="https://www.virtualbox.org/">Download Virtual Box</link> and install it
<link xlink:href="http://www.vagrantup.com/">Download Vagrant</link> and install it</simpara>
<screen>cd openflowplugin/vagrant/mininet-2.1.0-of-1.3/
vagrant up
vagrant ssh</screen>

<simpara>This will leave you sshed into a fully provisioned Ubuntu Trusty box
with mininet-2.1.0 and OVS 2.0 patches to work with OF 1.3.</simpara>
</section>
</section>
<section xml:id="_setup_cpqd_openflow_1_3_soft_switch">
<title>Setup CPqD Openflow 1.3 Soft Switch</title>
<simpara>Latest version of Openvswitch (v2.0.0) doesn&#8217;t support all the openflow
1.3 features, e.g group multipart statistics request. Alternate options
is CPqD Openflow 1.3 soft switch, It supports most of the openflow 1.3
features.</simpara>
<itemizedlist>
<listitem>
<simpara>You can setup the switch as per the instructions given on the
following URL</simpara>
</listitem>
</itemizedlist>

<simpara><link xlink:href="https://github.com/CPqD/ofsoftswitch13"><literal>https://github.com/CPqD/ofsoftswitch13</literal></link></simpara>
<itemizedlist>
<listitem>
<simpara>Fire following command to start the switch</simpara>
</listitem>
</itemizedlist>

<simpara>Start the datapath :</simpara>
<screen>$ sudo udatapath/ofdatapath --datapath-id=&lt;dpid&gt; --interfaces=&lt;if-list&gt; ptcp:&lt;port&gt;
 e.g $ sudo udatapath/ofdatapath --datapath-id=000000000001 --interfaces=ethX ptcp:6680</screen>

<simpara>ethX should not be associated with ip address and ipv6 should be
disabled on it. If you are installing the switch on your local machine,
you can use following command (for Ubuntu) to create virtual interface.</simpara>
<screen>ip link add link ethX address 00:19:d1:29:d2:58 macvlan0 type macvlan</screen>

<simpara>ethX - Any existing interface.</simpara>
<simpara>Or if you are using mininet VM for installing this switch, you can
simply add one more adaptor to your VM.</simpara>
<simpara>Start Openflow protocol agent:</simpara>
<screen>$secchan/ofprotocol tcp:&lt;switch-host&gt;:&lt;switch-port&gt; tcp:&lt;ctrl-host&gt;:&lt;ctrl-port&gt;
 e.g $secchan/ofprotocol tcp:127.0.0.1:6680 tcp:127.0.0.1:6653</screen>

<section xml:id="commands-to-add-entries-to-various-tables-of-the-switch">
<title>Commands to add entries to various tables of the switch</title>
<itemizedlist>
<listitem>
<simpara>Add meter</simpara>
</listitem>
</itemizedlist>

<screen>$utilities/dpctl tcp:&lt;switch-host&gt;:&lt;switch-port&gt; meter-mod cmd=add,meter=1 drop:rate=50</screen>

<itemizedlist>
<listitem>
<simpara>Add Groups</simpara>
</listitem>
</itemizedlist>

<screen>$utilities/dpctl tcp:127.0.0.1:6680 group-mod cmd=add,type=all,group=1</screen>

<screen>$utilities/dpctl tcp:127.0.0.1:6680 group-mod cmd=add,type=sel,group=2 weight=10 output:1</screen>

<itemizedlist>
<listitem>
<simpara>Create queue</simpara>
</listitem>
</itemizedlist>

<screen>$utilities/dpctl tcp:&lt;ip&gt;:&lt;switch port&gt; queue-mod &lt;port-number&gt; &lt;queue-number&gt; &lt;minimum-bandwidth&gt;
  e.g - $utilities/dpctl tcp:127.0.0.1:6680 queue-mod 1 1 23</screen>

<simpara>"dpctl" --help is not very intuitive, so please keep adding any new
command you figured out while your experiment with the switch.</simpara>
</section>
<section xml:id="using-the-built-in-wireshark">
<title>Using the built-in Wireshark</title>
<simpara>Mininet comes with pre-installed Wireshark, but for some reason it does
not include the Openflow protocol dissector. You may want to get and
install it in the <emphasis>/.wireshark/plugins/</emphasis> directory.</simpara>
<simpara>First login to your mininet VM</simpara>
<screen> ssh mininet@&lt;your mininet vm ip&gt; -X</screen>

<simpara>The -X option in ssh will enable x-session over ssh so that the
wireshark window can be shown on your host machine&#8217;s display. when
prompted, enter the password (mininet).</simpara>
<simpara>From the mininet vm shell, set the wireshark capture privileges
(<link xlink:href="http://wiki.wireshark.org/CaptureSetup/CapturePrivileges">http://wiki.wireshark.org/CaptureSetup/CapturePrivileges</link>):</simpara>
<screen>sudo chgrp mininet /usr/bin/dumpcap
sudo chmod 754 /usr/bin/dumpcap
sudo setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap</screen>

<simpara>Finally, start wireshark:</simpara>
<screen> wireshark</screen>

<simpara>The wireshark window should show up.</simpara>
<simpara>To see only Openflow packets, you may want to apply the following filter
in the Filter window:</simpara>
<screen> tcp.port == 6633 and tcp.flags.push == 1</screen>

<simpara>Start the capture on <emphasis>any</emphasis> port.</simpara>
</section>
</section>
<section xml:id="running-mininet-with-of-1.3">
<title>Running Mininet with OF 1.3</title>
<simpara>From within the Mininet VM, run:</simpara>
<screen> sudo mn --topo single,3  --controller 'remote,ip=&lt;your controller ip&gt;,port=6653' --switch ovsk,protocols=OpenFlow13</screen>

</section>
</section>
<section xml:id="_end_to_end_inventory">
<title>End to End Inventory</title>
<section xml:id="odl-ofp-end-to-end-inventory_introduction-introduction">
<title>Introduction</title>
<simpara>The purpose of this page is to walk you through how to see the Inventory
Manager working end to end with the openflowplugin using OpenFlow 1.3.</simpara>
<simpara>Basically, you will learn how to:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Run the Base/Virtualization/Service provider Edition with the new
openflowplugin:
OpenDaylight_OpenFlow_Plugin::Running_controller_with_the_new_OF_plugin[Running
the controller with the new OpenFlow Plugin]</simpara>
</listitem>
<listitem>
<simpara>Start mininet to use OF 1.3:
OpenDaylight_OpenFlow_Plugin::Test_Environment[OpenFlow 1.3 Enabled
Software Switches / Environment]</simpara>
</listitem>
<listitem>
<simpara>Use RESTCONF to see the nodes appear in inventory.</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="odl-ofp-end-to-end-flows_restconf-for-inventory">
<title>Restconf for Inventory</title>
<simpara>The REST url for listing all the nodes is:</simpara>
<screen>http://localhost:8181/restconf/operational/opendaylight-inventory:nodes/</screen>

<simpara>You will need to set the Accept header:</simpara>
<screen>Accept: application/xml</screen>

<simpara>You will also need to use HTTP Basic Auth with username: admin password:
admin.</simpara>
<simpara>Alternately, if you have a node&#8217;s id you can address it as</simpara>
<screen>http://localhost:8181/restconf/operational/opendaylight-inventory:nodes/node/&lt;id&gt;</screen>

<simpara>for example</simpara>
<screen>http://localhost:8181/restconf/operational/opendaylight-inventory:nodes/node/openflow:1</screen>

<section xml:id="odl-ofp-end-to-end-flows_how-to-hit-restconf-with-postman">
<title>How to hit RestConf with Postman</title>
<simpara><link xlink:href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en">Install
Postman for Chrome</link></simpara>
<simpara>In the chrome browser bar enter</simpara>
<screen>chrome://apps/</screen>

<simpara>And click on Postman.</simpara>
<simpara>Enter the URL. Click on the Headers button on the far right. Enter the
Accept: header. Click on the Basic Auth Tab at the top and setup the
username and password. Send.</simpara>
</section>
</section>
<section xml:id="odl-ofp-end-to-end-flows_known-bug">
<title>Known Bug</title>
<simpara>If you have not had any switches come up, and though no children for
<link xlink:href="http://localhost:8080/restconf/datastore/opendaylight-inventory:nodes/">http://localhost:8080/restconf/datastore/opendaylight-inventory:nodes/</link>
and exception will be thrown. I&#8217;m pretty sure I know how to fix this
bug, just need to get to it :)</simpara>
</section>
</section>
<section xml:id="_end_to_end_flows">
<title>End to End Flows</title>
<section xml:id="instructions">
<title>Instructions</title>
<section xml:id="learn-end-to-end-for-inventory">
<title>Learn End to End for Inventory</title>
<simpara><link linkend="odl-ofp-end-to-end-inventory_introduction-introduction">End to End Inventory</link></simpara>
</section>
<section xml:id="check-inventory">
<title>Check inventory</title>
<itemizedlist>
<listitem>
<simpara>Run mininet with support for OF 1.3 as described in
<link linkend="odl-ofp-end-to-end-inventory_introduction-introduction">End to End Inventory</link></simpara>
</listitem>
<listitem>
<simpara>Make sure you see the openflow:1 node come up as described in
<link linkend="odl-ofp-end-to-end-inventory_introduction-introduction">End to End Inventory</link></simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="flow-strategy">
<title>Flow Strategy</title>
<simpara>Current way to flush a flow to switch looks like this:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Create MD-SAL modeled flow and commit it into dataStore using two
phase commit <link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Controller:MD-SAL:FAQ">MD-SAL FAQ</link></simpara>
</listitem>
<listitem>
<simpara>FRM gets notified and invokes corresponding rpc (addFlow) on
particular service provider (if suitable provider for given node
registered)</simpara>
</listitem>
<listitem>
<simpara>The provider (plugin in this case) transforms MD-SAL modeled flow
into OF-API modeled flow</simpara>
</listitem>
<listitem>
<simpara>OF-API modeled flow is then flushed into OFLibrary</simpara>
</listitem>
<listitem>
<simpara>OFLibrary encodes flow into particular version of wire protocol and
sends it to particular switch</simpara>
</listitem>
<listitem>
<simpara>Check on mininet side if flow is set</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="push-your-flow">
<title>Push your flow</title>
<itemizedlist>
<listitem>
<simpara>With PostMan:</simpara>
<itemizedlist>
<listitem>
<simpara>Set headers:</simpara>
<itemizedlist>
<listitem>
<simpara>Content-Type: application/xml</simpara>
</listitem>
<listitem>
<simpara>Accept: application/xml</simpara>
</listitem>
<listitem>
<simpara>Authentication</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Use URL: "http://&lt;controller IP&gt;:8181/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/0/flow/1"</simpara>
</listitem>
<listitem>
<simpara>PUT</simpara>
</listitem>
<listitem>
<simpara>Use Body:</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;flow-name&gt;Foo&lt;/flow-name&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-destination&gt;10.0.10.2/24&lt;/ipv4-destination&gt;
    &lt;/match&gt;
    &lt;id&gt;1&lt;/id&gt;
    &lt;table_id&gt;0&lt;/table_id&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                   &lt;order&gt;0&lt;/order&gt;
                   &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
&lt;/flow&gt;</programlisting>

<simpara><emphasis role="strong">*Note</emphasis>: If you want to try a different flow id or a different table,
make sure the URL and the body stay in sync. For example, if you wanted
to try: table 2 flow 20 you&#8217;d change the URL to:</simpara>
<simpara>"http://&lt;controller
IP&gt;:8181/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/flow/20"</simpara>
<simpara>but you would also need to update the 20 and 2 in the body of the XML.</simpara>
<simpara>Other caveat, we have a known bug with updates, so please only write to
a given flow id and table id on a given node once at this time until we
resolve it. Or you can use the DELETE method with the same URL in
PostMan to delete the flow information on switch and controller cache.</simpara>
</section>
<section xml:id="check-for-your-flow-on-the-switch">
<title>Check for your flow on the switch</title>
<itemizedlist>
<listitem>
<simpara>See your flow on your mininet:</simpara>
</listitem>
</itemizedlist>

<screen>mininet@mininet-vm:~$ sudo ovs-ofctl -O OpenFlow13 dump-flows s1
OFPST_FLOW reply (OF1.3) (xid=0x2):
cookie=0x0, duration=7.325s, table=0, n_packets=0, n_bytes=0, idle_timeout=300, hard_timeout=600, send_flow_rem priority=2,ip,nw_dst=10.0.10.0/24 actions=dec_ttl</screen>

<simpara>If you want to see the above information from the mininet prompt - use
"sh" instead of "sudo" i.e. use "sh ovs-ofctl -O OpenFlow13 dump-flows
s1".</simpara>
</section>
<section xml:id="check-for-your-flow-in-the-controller-config-via-restconf">
<title>Check for your flow in the controller config via RESTCONF</title>
<itemizedlist>
<listitem>
<simpara>See your configured flow in POSTMAN with</simpara>
<itemizedlist>
<listitem>
<simpara>URL <link xlink:href="http://&lt;controller">http://&lt;controller</link>
IP&gt;:8181/restconf/operational/opendaylight-inventory:nodes/node/openflow:1/table/0/</simpara>
</listitem>
<listitem>
<simpara>GET</simpara>
</listitem>
<listitem>
<simpara>You no longer need to set Accept header</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<simpara>Return Response:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "flow-node-inventory:table": [
    {
      "flow-node-inventory:id": 0,
      "flow-node-inventory:flow": [
        {
          "flow-node-inventory:priority": 1,
          "flow-node-inventory:id": "10b1a23c-5299-4f7b-83d6-563bab472754",
          "flow-node-inventory:table_id": 0,
          "flow-node-inventory:hard-timeout": 0,
          "flow-node-inventory:idle-timeout": 0,
          "flow-node-inventory:instructions": {
            "flow-node-inventory:instruction": [
              {
                "flow-node-inventory:apply-actions": {
                  "flow-node-inventory:action": [
                    {
                      "flow-node-inventory:output-action": {
                        "flow-node-inventory:output-node-connector": "openflow:1:1"
                      },
                      "flow-node-inventory:order": 0
                    }
                  ]
                },
                "flow-node-inventory:order": 0
              }
            ]
          },
          "flow-node-inventory:match": {
            "flow-node-inventory:ethernet-match": {
              "flow-node-inventory:ethernet-type": {
                "flow-node-inventory:type": 2048
              }
            },
            "flow-node-inventory:ipv4-destination": "10.0.0.2"
          },
          "flow-node-inventory:cookie": 0
        },
        {
          "flow-node-inventory:priority": 1,
          "flow-node-inventory:id": "020bf359-1299-4da6-b4f7-368bd83b5841",
          "flow-node-inventory:table_id": 0,
          "flow-node-inventory:hard-timeout": 0,
          "flow-node-inventory:idle-timeout": 0,
          "flow-node-inventory:instructions": {
            "flow-node-inventory:instruction": [
              {
                "flow-node-inventory:apply-actions": {
                  "flow-node-inventory:action": [
                    {
                      "flow-node-inventory:output-action": {
                        "flow-node-inventory:output-node-connector": "openflow:1:1"
                      },
                      "flow-node-inventory:order": 0
                    }
                  ]
                },
                "flow-node-inventory:order": 0
              }
            ]
          },
          "flow-node-inventory:match": {
            "flow-node-inventory:ethernet-match": {
              "flow-node-inventory:ethernet-type": {
                "flow-node-inventory:type": 2048
              }
            },
            "flow-node-inventory:ipv4-destination": "10.0.0.1"
          },
          "flow-node-inventory:cookie": 0
        },
        {
          "flow-node-inventory:priority": 1,
          "flow-node-inventory:id": "42172bfc-9142-4a92-9e90-ee62529b1e85",
          "flow-node-inventory:table_id": 0,
          "flow-node-inventory:hard-timeout": 0,
          "flow-node-inventory:idle-timeout": 0,
          "flow-node-inventory:instructions": {
            "flow-node-inventory:instruction": [
              {
                "flow-node-inventory:apply-actions": {
                  "flow-node-inventory:action": [
                    {
                      "flow-node-inventory:output-action": {
                        "flow-node-inventory:output-node-connector": "openflow:1:1"
                      },
                      "flow-node-inventory:order": 0
                    }
                  ]
                },
                "flow-node-inventory:order": 0
              }
            ]
          },
          "flow-node-inventory:match": {
            "flow-node-inventory:ethernet-match": {
              "flow-node-inventory:ethernet-type": {
                "flow-node-inventory:type": 2048
              }
            },
            "flow-node-inventory:ipv4-destination": "10.0.0.3"
          },
          "flow-node-inventory:cookie": 0
        },
        {
          "flow-node-inventory:priority": 1,
          "flow-node-inventory:id": "99bf566e-89f3-4c6f-ae9e-e26012ceb1e4",
          "flow-node-inventory:table_id": 0,
          "flow-node-inventory:hard-timeout": 0,
          "flow-node-inventory:idle-timeout": 0,
          "flow-node-inventory:instructions": {
            "flow-node-inventory:instruction": [
              {
                "flow-node-inventory:apply-actions": {
                  "flow-node-inventory:action": [
                    {
                      "flow-node-inventory:output-action": {
                        "flow-node-inventory:output-node-connector": "openflow:1:1"
                      },
                      "flow-node-inventory:order": 0
                    }
                  ]
                },
                "flow-node-inventory:order": 0
              }
            ]
          },
          "flow-node-inventory:match": {
            "flow-node-inventory:ethernet-match": {
              "flow-node-inventory:ethernet-type": {
                "flow-node-inventory:type": 2048
              }
            },
            "flow-node-inventory:ipv4-destination": "10.0.0.4"
          },
          "flow-node-inventory:cookie": 0
        },
        {
          "flow-node-inventory:priority": 1,
          "flow-node-inventory:id": "019dcc2e-5b4f-44f0-90cc-de490294b862",
          "flow-node-inventory:table_id": 0,
          "flow-node-inventory:hard-timeout": 0,
          "flow-node-inventory:idle-timeout": 0,
          "flow-node-inventory:instructions": {
            "flow-node-inventory:instruction": [
              {
                "flow-node-inventory:apply-actions": {
                  "flow-node-inventory:action": [
                    {
                      "flow-node-inventory:output-action": {
                        "flow-node-inventory:output-node-connector": "openflow:1:2"
                      },
                      "flow-node-inventory:order": 0
                    }
                  ]
                },
                "flow-node-inventory:order": 0
              }
            ]
          },
          "flow-node-inventory:match": {
            "flow-node-inventory:ethernet-match": {
              "flow-node-inventory:ethernet-type": {
                "flow-node-inventory:type": 2048
              }
            },
            "flow-node-inventory:ipv4-destination": "10.0.0.5"
          },
          "flow-node-inventory:cookie": 0
        },
        {
          "flow-node-inventory:priority": 1,
          "flow-node-inventory:id": "968cf81e-3f16-42f1-8b16-d01ff719c63c",
          "flow-node-inventory:table_id": 0,
          "flow-node-inventory:hard-timeout": 0,
          "flow-node-inventory:idle-timeout": 0,
          "flow-node-inventory:instructions": {
            "flow-node-inventory:instruction": [
              {
                "flow-node-inventory:apply-actions": {
                  "flow-node-inventory:action": [
                    {
                      "flow-node-inventory:output-action": {
                        "flow-node-inventory:output-node-connector": "openflow:1:2"
                      },
                      "flow-node-inventory:order": 0
                    }
                  ]
                },
                "flow-node-inventory:order": 0
              }
            ]
          },
          "flow-node-inventory:match": {
            "flow-node-inventory:ethernet-match": {
              "flow-node-inventory:ethernet-type": {
                "flow-node-inventory:type": 2048
              }
            },
            "flow-node-inventory:ipv4-destination": "10.0.0.8"
          },
          "flow-node-inventory:cookie": 0
        },
        {
          "flow-node-inventory:priority": 1,
          "flow-node-inventory:id": "1c14ea3c-9dcc-4434-b566-7e99033ea252",
          "flow-node-inventory:table_id": 0,
          "flow-node-inventory:hard-timeout": 0,
          "flow-node-inventory:idle-timeout": 0,
          "flow-node-inventory:instructions": {
            "flow-node-inventory:instruction": [
              {
                "flow-node-inventory:apply-actions": {
                  "flow-node-inventory:action": [
                    {
                      "flow-node-inventory:output-action": {
                        "flow-node-inventory:output-node-connector": "openflow:1:2"
                      },
                      "flow-node-inventory:order": 0
                    }
                  ]
                },
                "flow-node-inventory:order": 0
              }
            ]
          },
          "flow-node-inventory:match": {
            "flow-node-inventory:ethernet-match": {
              "flow-node-inventory:ethernet-type": {
                "flow-node-inventory:type": 2048
              }
            },
            "flow-node-inventory:ipv4-destination": "10.0.0.6"
          },
          "flow-node-inventory:cookie": 0
        },
        {
          "flow-node-inventory:priority": 1,
          "flow-node-inventory:id": "ed9deeb2-be8f-4b84-bcd8-9d12049383d6",
          "flow-node-inventory:table_id": 0,
          "flow-node-inventory:hard-timeout": 0,
          "flow-node-inventory:idle-timeout": 0,
          "flow-node-inventory:instructions": {
            "flow-node-inventory:instruction": [
              {
                "flow-node-inventory:apply-actions": {
                  "flow-node-inventory:action": [
                    {
                      "flow-node-inventory:output-action": {
                        "flow-node-inventory:output-node-connector": "openflow:1:2"
                      },
                      "flow-node-inventory:order": 0
                    }
                  ]
                },
                "flow-node-inventory:order": 0
              }
            ]
          },
          "flow-node-inventory:match": {
            "flow-node-inventory:ethernet-match": {
              "flow-node-inventory:ethernet-type": {
                "flow-node-inventory:type": 2048
              }
            },
            "flow-node-inventory:ipv4-destination": "10.0.0.7"
          },
          "flow-node-inventory:cookie": 0
        }
      ]
    }
  ]
}

</programlisting>

</section>
<section xml:id="look-for-your-flow-stats-in-the-controller-operational-data-via-restconf">
<title>Look for your flow stats in the controller operational data via</title>
<simpara>RESTCONF</simpara>
<itemizedlist>
<listitem>
<simpara>See your operational flow stats in POSTMAN with</simpara>
<itemizedlist>
<listitem>
<simpara>URL "http://&lt;controller
IP&gt;:8181/restconf/operational/opendaylight-inventory:nodes/node/openflow:1/table/0/"</simpara>
</listitem>
<listitem>
<simpara>GET</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<simpara>Return Response:</simpara>
<programlisting language="json" linenumbering="unnumbered">
{
  "flow-node-inventory:table": [
    {
      "flow-node-inventory:id": 0,
      "flow-node-inventory:flow": [
        {
          "flow-node-inventory:id": "10b1a23c-5299-4f7b-83d6-563bab472754",
          "opendaylight-flow-statistics:flow-statistics": {
            "opendaylight-flow-statistics:cookie": 0,
            "opendaylight-flow-statistics:duration": {
              "opendaylight-flow-statistics:nanosecond": 886000000,
              "opendaylight-flow-statistics:second": 2707
            },
            "opendaylight-flow-statistics:hard-timeout": 0,
            "opendaylight-flow-statistics:byte-count": 784,
            "opendaylight-flow-statistics:match": {
              "opendaylight-flow-statistics:ethernet-match": {
                "opendaylight-flow-statistics:ethernet-type": {
                  "opendaylight-flow-statistics:type": 2048
                }
              },
              "opendaylight-flow-statistics:ipv4-destination": "10.0.0.2/32"
            },
            "opendaylight-flow-statistics:priority": 1,
            "opendaylight-flow-statistics:packet-count": 8,
            "opendaylight-flow-statistics:table_id": 0,
            "opendaylight-flow-statistics:idle-timeout": 0,
            "opendaylight-flow-statistics:instructions": {
              "opendaylight-flow-statistics:instruction": [
                {
                  "opendaylight-flow-statistics:order": 0,
                  "opendaylight-flow-statistics:apply-actions": {
                    "opendaylight-flow-statistics:action": [
                      {
                        "opendaylight-flow-statistics:order": 0,
                        "opendaylight-flow-statistics:output-action": {
                          "opendaylight-flow-statistics:output-node-connector": "1",
                          "opendaylight-flow-statistics:max-length": 0
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "flow-node-inventory:id": "020bf359-1299-4da6-b4f7-368bd83b5841",
          "opendaylight-flow-statistics:flow-statistics": {
            "opendaylight-flow-statistics:cookie": 0,
            "opendaylight-flow-statistics:duration": {
              "opendaylight-flow-statistics:nanosecond": 826000000,
              "opendaylight-flow-statistics:second": 2711
            },
            "opendaylight-flow-statistics:hard-timeout": 0,
            "opendaylight-flow-statistics:byte-count": 1568,
            "opendaylight-flow-statistics:match": {
              "opendaylight-flow-statistics:ethernet-match": {
                "opendaylight-flow-statistics:ethernet-type": {
                  "opendaylight-flow-statistics:type": 2048
                }
              },
              "opendaylight-flow-statistics:ipv4-destination": "10.0.0.1/32"
            },
            "opendaylight-flow-statistics:priority": 1,
            "opendaylight-flow-statistics:packet-count": 16,
            "opendaylight-flow-statistics:table_id": 0,
            "opendaylight-flow-statistics:idle-timeout": 0,
            "opendaylight-flow-statistics:instructions": {
              "opendaylight-flow-statistics:instruction": [
                {
                  "opendaylight-flow-statistics:order": 0,
                  "opendaylight-flow-statistics:apply-actions": {
                    "opendaylight-flow-statistics:action": [
                      {
                        "opendaylight-flow-statistics:order": 0,
                        "opendaylight-flow-statistics:output-action": {
                          "opendaylight-flow-statistics:output-node-connector": "1",
                          "opendaylight-flow-statistics:max-length": 0
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "flow-node-inventory:id": "42172bfc-9142-4a92-9e90-ee62529b1e85",
          "opendaylight-flow-statistics:flow-statistics": {
            "opendaylight-flow-statistics:cookie": 0,
            "opendaylight-flow-statistics:duration": {
              "opendaylight-flow-statistics:nanosecond": 548000000,
              "opendaylight-flow-statistics:second": 2708
            },
            "opendaylight-flow-statistics:hard-timeout": 0,
            "opendaylight-flow-statistics:byte-count": 784,
            "opendaylight-flow-statistics:match": {
              "opendaylight-flow-statistics:ethernet-match": {
                "opendaylight-flow-statistics:ethernet-type": {
                  "opendaylight-flow-statistics:type": 2048
                }
              },
              "opendaylight-flow-statistics:ipv4-destination": "10.0.0.3/32"
            },
            "opendaylight-flow-statistics:priority": 1,
            "opendaylight-flow-statistics:packet-count": 8,
            "opendaylight-flow-statistics:table_id": 0,
            "opendaylight-flow-statistics:idle-timeout": 0,
            "opendaylight-flow-statistics:instructions": {
              "opendaylight-flow-statistics:instruction": [
                {
                  "opendaylight-flow-statistics:order": 0,
                  "opendaylight-flow-statistics:apply-actions": {
                    "opendaylight-flow-statistics:action": [
                      {
                        "opendaylight-flow-statistics:order": 0,
                        "opendaylight-flow-statistics:output-action": {
                          "opendaylight-flow-statistics:output-node-connector": "1",
                          "opendaylight-flow-statistics:max-length": 0
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "flow-node-inventory:id": "99bf566e-89f3-4c6f-ae9e-e26012ceb1e4",
          "opendaylight-flow-statistics:flow-statistics": {
            "opendaylight-flow-statistics:cookie": 0,
            "opendaylight-flow-statistics:duration": {
              "opendaylight-flow-statistics:nanosecond": 296000000,
              "opendaylight-flow-statistics:second": 2710
            },
            "opendaylight-flow-statistics:hard-timeout": 0,
            "opendaylight-flow-statistics:byte-count": 1274,
            "opendaylight-flow-statistics:match": {
              "opendaylight-flow-statistics:ethernet-match": {
                "opendaylight-flow-statistics:ethernet-type": {
                  "opendaylight-flow-statistics:type": 2048
                }
              },
              "opendaylight-flow-statistics:ipv4-destination": "10.0.0.4/32"
            },
            "opendaylight-flow-statistics:priority": 1,
            "opendaylight-flow-statistics:packet-count": 13,
            "opendaylight-flow-statistics:table_id": 0,
            "opendaylight-flow-statistics:idle-timeout": 0,
            "opendaylight-flow-statistics:instructions": {
              "opendaylight-flow-statistics:instruction": [
                {
                  "opendaylight-flow-statistics:order": 0,
                  "opendaylight-flow-statistics:apply-actions": {
                    "opendaylight-flow-statistics:action": [
                      {
                        "opendaylight-flow-statistics:order": 0,
                        "opendaylight-flow-statistics:output-action": {
                          "opendaylight-flow-statistics:output-node-connector": "1",
                          "opendaylight-flow-statistics:max-length": 0
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "flow-node-inventory:id": "019dcc2e-5b4f-44f0-90cc-de490294b862",
          "opendaylight-flow-statistics:flow-statistics": {
            "opendaylight-flow-statistics:cookie": 0,
            "opendaylight-flow-statistics:duration": {
              "opendaylight-flow-statistics:nanosecond": 392000000,
              "opendaylight-flow-statistics:second": 2711
            },
            "opendaylight-flow-statistics:hard-timeout": 0,
            "opendaylight-flow-statistics:byte-count": 1470,
            "opendaylight-flow-statistics:match": {
              "opendaylight-flow-statistics:ethernet-match": {
                "opendaylight-flow-statistics:ethernet-type": {
                  "opendaylight-flow-statistics:type": 2048
                }
              },
              "opendaylight-flow-statistics:ipv4-destination": "10.0.0.5/32"
            },
            "opendaylight-flow-statistics:priority": 1,
            "opendaylight-flow-statistics:packet-count": 15,
            "opendaylight-flow-statistics:table_id": 0,
            "opendaylight-flow-statistics:idle-timeout": 0,
            "opendaylight-flow-statistics:instructions": {
              "opendaylight-flow-statistics:instruction": [
                {
                  "opendaylight-flow-statistics:order": 0,
                  "opendaylight-flow-statistics:apply-actions": {
                    "opendaylight-flow-statistics:action": [
                      {
                        "opendaylight-flow-statistics:order": 0,
                        "opendaylight-flow-statistics:output-action": {
                          "opendaylight-flow-statistics:output-node-connector": "2",
                          "opendaylight-flow-statistics:max-length": 0
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "flow-node-inventory:id": "968cf81e-3f16-42f1-8b16-d01ff719c63c",
          "opendaylight-flow-statistics:flow-statistics": {
            "opendaylight-flow-statistics:cookie": 0,
            "opendaylight-flow-statistics:duration": {
              "opendaylight-flow-statistics:nanosecond": 344000000,
              "opendaylight-flow-statistics:second": 2707
            },
            "opendaylight-flow-statistics:hard-timeout": 0,
            "opendaylight-flow-statistics:byte-count": 784,
            "opendaylight-flow-statistics:match": {
              "opendaylight-flow-statistics:ethernet-match": {
                "opendaylight-flow-statistics:ethernet-type": {
                  "opendaylight-flow-statistics:type": 2048
                }
              },
              "opendaylight-flow-statistics:ipv4-destination": "10.0.0.8/32"
            },
            "opendaylight-flow-statistics:priority": 1,
            "opendaylight-flow-statistics:packet-count": 8,
            "opendaylight-flow-statistics:table_id": 0,
            "opendaylight-flow-statistics:idle-timeout": 0,
            "opendaylight-flow-statistics:instructions": {
              "opendaylight-flow-statistics:instruction": [
                {
                  "opendaylight-flow-statistics:order": 0,
                  "opendaylight-flow-statistics:apply-actions": {
                    "opendaylight-flow-statistics:action": [
                      {
                        "opendaylight-flow-statistics:order": 0,
                        "opendaylight-flow-statistics:output-action": {
                          "opendaylight-flow-statistics:output-node-connector": "2",
                          "opendaylight-flow-statistics:max-length": 0
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "flow-node-inventory:id": "ed9deeb2-be8f-4b84-bcd8-9d12049383d6",
          "opendaylight-flow-statistics:flow-statistics": {
            "opendaylight-flow-statistics:cookie": 0,
            "opendaylight-flow-statistics:duration": {
              "opendaylight-flow-statistics:nanosecond": 577000000,
              "opendaylight-flow-statistics:second": 2706
            },
            "opendaylight-flow-statistics:hard-timeout": 0,
            "opendaylight-flow-statistics:byte-count": 784,
            "opendaylight-flow-statistics:match": {
              "opendaylight-flow-statistics:ethernet-match": {
                "opendaylight-flow-statistics:ethernet-type": {
                  "opendaylight-flow-statistics:type": 2048
                }
              },
              "opendaylight-flow-statistics:ipv4-destination": "10.0.0.7/32"
            },
            "opendaylight-flow-statistics:priority": 1,
            "opendaylight-flow-statistics:packet-count": 8,
            "opendaylight-flow-statistics:table_id": 0,
            "opendaylight-flow-statistics:idle-timeout": 0,
            "opendaylight-flow-statistics:instructions": {
              "opendaylight-flow-statistics:instruction": [
                {
                  "opendaylight-flow-statistics:order": 0,
                  "opendaylight-flow-statistics:apply-actions": {
                    "opendaylight-flow-statistics:action": [
                      {
                        "opendaylight-flow-statistics:order": 0,
                        "opendaylight-flow-statistics:output-action": {
                          "opendaylight-flow-statistics:output-node-connector": "2",
                          "opendaylight-flow-statistics:max-length": 0
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "flow-node-inventory:id": "1c14ea3c-9dcc-4434-b566-7e99033ea252",
          "opendaylight-flow-statistics:flow-statistics": {
            "opendaylight-flow-statistics:cookie": 0,
            "opendaylight-flow-statistics:duration": {
              "opendaylight-flow-statistics:nanosecond": 659000000,
              "opendaylight-flow-statistics:second": 2705
            },
            "opendaylight-flow-statistics:hard-timeout": 0,
            "opendaylight-flow-statistics:byte-count": 784,
            "opendaylight-flow-statistics:match": {
              "opendaylight-flow-statistics:ethernet-match": {
                "opendaylight-flow-statistics:ethernet-type": {
                  "opendaylight-flow-statistics:type": 2048
                }
              },
              "opendaylight-flow-statistics:ipv4-destination": "10.0.0.6/32"
            },
            "opendaylight-flow-statistics:priority": 1,
            "opendaylight-flow-statistics:packet-count": 8,
            "opendaylight-flow-statistics:table_id": 0,
            "opendaylight-flow-statistics:idle-timeout": 0,
            "opendaylight-flow-statistics:instructions": {
              "opendaylight-flow-statistics:instruction": [
                {
                  "opendaylight-flow-statistics:order": 0,
                  "opendaylight-flow-statistics:apply-actions": {
                    "opendaylight-flow-statistics:action": [
                      {
                        "opendaylight-flow-statistics:order": 0,
                        "opendaylight-flow-statistics:output-action": {
                          "opendaylight-flow-statistics:output-node-connector": "2",
                          "opendaylight-flow-statistics:max-length": 0
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      ],
      "opendaylight-flow-table-statistics:flow-table-statistics": {
        "opendaylight-flow-table-statistics:active-flows": 8,
        "opendaylight-flow-table-statistics:packets-matched": 97683,
        "opendaylight-flow-table-statistics:packets-looked-up": 101772
      }
    }
  ]
}
</programlisting>

</section>
</section>
<section xml:id="discovering-and-testing-new-flow-types">
<title>Discovering and testing new Flow Types</title>
<simpara>Currently, the openflowplugin has a test-provider that allows you to
push various flows through the system from the OSGI command line. Once
those flows have been pushed through, you can see them as examples and
then use them to see in the config what a particular flow example looks
like.</simpara>
<section xml:id="using-addmdflow">
<title>Using addMDFlow</title>
<simpara>From the</simpara>
<screen>cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</screen>

<simpara>Point your mininet at the controller as described above.</simpara>
<simpara>once you can see your node (probably openflow:1 if you&#8217;ve been following
along) in the inventory, at the OSGI command line try running:</simpara>
<screen>addMDFlow openflow:1 f#</screen>

<simpara>Where # is a number between 1 and 80. This will create one of 80
possible flows. You can go confirm they were created on the switch.</simpara>
<simpara>Once you&#8217;ve done that, use</simpara>
<itemizedlist>
<listitem>
<simpara>GET</simpara>
</listitem>
<listitem>
<simpara>Accept: application/xml</simpara>
</listitem>
<listitem>
<simpara>URL:
"http://192.168.195.157:8181/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/"</simpara>
</listitem>
</itemizedlist>

<simpara>To see a full listing of the flows in table 2 (where they will be put).
If you want to see a particular flow, look at</simpara>
<itemizedlist>
<listitem>
<simpara>URL:
"http://192.168.195.157:8181/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/flow/#"</simpara>
</listitem>
</itemizedlist>

<simpara>Where # is 123 + the f# you used. So for example, for f22, your url
would be</simpara>
<itemizedlist>
<listitem>
<simpara>URL:
"http://192.168.195.157:8181/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/flow/145"</simpara>
</listitem>
</itemizedlist>

<simpara>Note: You may have to trim out some of the sections like that contain
bitfields and binary types that are not correctly modeled.</simpara>
<simpara>Note: Before attempting to PUT a flow you have created via addMDFlow,
please change its URL and body to, for example, use table 1 instead of
table 2 or another Flow Id, so you don&#8217;t collide.</simpara>
<simpara>Note: There are several test command providers and the one handling
flows is <emphasis role="strong">OpenflowpluginTestCommandProvider</emphasis>. Methods, which can be use
as <emphasis role="strong">commands in OSGI-console</emphasis> have prefix <emphasis>_</emphasis>.</simpara>
</section>
</section>
<section xml:id="example-flows">
<title>Example Flows</title>
<simpara>Examples for XML for various flow matches, instructions &amp; actions can be
found in following section
<link linkend="odl-ofp-example-flows_overview">here</link></simpara>
</section>
</section>
<section xml:id="_end_to_end_topology">
<title>End to End Topology</title>
<section xml:id="introduction">
<title>Introduction</title>
<simpara>The purpose of this page is to walk you through how to see the Topology
Manager working end to end with the openflowplugin using OpenFlow 1.3.</simpara>
<simpara>Basically, you will learn how to:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Run the Base/Virtualization/Service provider Edition with the new
openflowplugin:
<link linkend="odl-ofp-running-controller-with-the-new-of-plugin_top">Running the controller with the new OpenFlow Plugin</link></simpara>
</listitem>
<listitem>
<simpara>Start mininet to use OF 1.3:
<link linkend="odl-ofp-test-environment_top">OpenFlow 1.3 Enabled Software Switches / Environment</link></simpara>
</listitem>
<listitem>
<simpara>Use RESTCONF to see the topology information.</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="restconf-for-topology">
<title>Restconf for Topology</title>
<simpara>The REST url for listing all the nodes is:</simpara>
<screen>http://localhost:8080/restconf/operational/network-topology:network-topology/</screen>

<simpara>You will need to set the Accept header:</simpara>
<screen>Accept: application/xml</screen>

<simpara>You will also need to use HTTP Basic Auth with username: admin password:
admin.</simpara>
<simpara>Alternately, if you have a node&#8217;s id you can address it as</simpara>
<screen>http://localhost:8080/restconf/operational/network-topology:network-topology/topology/&lt;id&gt;</screen>

<simpara>for example</simpara>
<screen>http://localhost:8080/restconf/operational/network-topology:network-topology/topology/flow:1/</screen>

<section xml:id="how-to-hit-restconf-with-postman">
<title>How to hit RestConf with Postman</title>
<simpara>Install <link xlink:href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en">postman</link> for Chrome</simpara>
<simpara>In the chrome browser bar enter</simpara>
<screen>chrome://apps/</screen>

<simpara>And click on Postman.</simpara>
<simpara>Enter the URL. Click on the Headers button on the far right. Enter the
Accept: header. Click on the Basic Auth Tab at the top and setup the
username and password. Send.</simpara>
</section>
</section>
</section>
<section xml:id="_end_to_end_groups">
<title>End to End Groups</title>
<section xml:id="note">
<title>NOTE</title>
<simpara>Groups are NOT SUPPORTED in current (2.0.0) version of
<link xlink:href="http://www.openvswitch.org/download">openvswitch</link>. See</simpara>
<itemizedlist>
<listitem>
<simpara><link xlink:href="http://openvswitch.org/releases/NEWS-2.0.0">http://openvswitch.org/releases/NEWS-2.0.0</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="http://comments.gmane.org/gmane.linux.network.openvswitch.general/3251">http://comments.gmane.org/gmane.linux.network.openvswitch.general/3251</link></simpara>
</listitem>
</itemizedlist>

<simpara>For testing group feature please use for example <link linkend="odl-ofp-end-to-end-inventory_introduction-introduction">CPQD</link> virtual switch.</simpara>
</section>
<section xml:id="_instructions_7">
<title>Instructions</title>
<section xml:id="_learn_end_to_end_for_inventory">
<title>Learn End to End for Inventory</title>
<simpara><link linkend="odl-ofp-end-to-end-inventory_introduction-introduction">End to End Inventory</link></simpara>
</section>
<section xml:id="_check_inventory">
<title>Check inventory</title>
<simpara>Run CPqD with support for OF 1.3 as described in <link linkend="odl-ofp-end-to-end-inventory_introduction-introduction">End to End Inventory</link></simpara>
<simpara>Make sure you see the openflow:1 node come up as described in <link linkend="odl-ofp-end-to-end-inventory_introduction-introduction">End to End Inventory</link></simpara>
</section>
<section xml:id="_group_strategy">
<title>Group Strategy</title>
<simpara>Current way to flush a group to switch looks like this:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>create MD-SAL modeled group and commit it into dataStore using two phase commit</simpara>
</listitem>
<listitem>
<simpara>FRM gets notified and invokes corresponding rpc (addGroup) on particular service provider (if suitable provider for given node registered)</simpara>
</listitem>
<listitem>
<simpara>the provider (plugin in this case) transforms MD-SAL modeled group into OF-API modeled group</simpara>
</listitem>
<listitem>
<simpara>OF-API modeled group is then flushed into OFLibrary</simpara>
</listitem>
<listitem>
<simpara>OFLibrary encodes group into particular version of wire protocol and sends it to particular switch</simpara>
</listitem>
<listitem>
<simpara>check on CPqD if group is installed</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_push_your_group">
<title>Push your Group</title>
<itemizedlist>
<listitem>
<simpara>With PostMan:</simpara>
<itemizedlist>
<listitem>
<simpara>Set</simpara>
<itemizedlist>
<listitem>
<simpara>Content-Type: application/xml</simpara>
</listitem>
<listitem>
<simpara>Accept: application/xml</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Use URL: "http://&lt;ip-address&gt;:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/group/1"</simpara>
</listitem>
<listitem>
<simpara>PUT</simpara>
</listitem>
<listitem>
<simpara>Use Body:</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;group xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;group-type&gt;group-all&lt;/group-type&gt;
    &lt;buckets&gt;
        &lt;bucket&gt;
            &lt;action&gt;
                &lt;pop-vlan-action/&gt;
                &lt;order&gt;0&lt;/order&gt;
            &lt;/action&gt;
            &lt;bucket-id&gt;12&lt;/bucket-id&gt;
            &lt;watch_group&gt;14&lt;/watch_group&gt;
            &lt;watch_port&gt;1234&lt;/watch_port&gt;
        &lt;/bucket&gt;
        &lt;bucket&gt;
            &lt;action&gt;
                &lt;set-field&gt;
                    &lt;ipv4-source&gt;100.1.1.1&lt;/ipv4-source&gt;
                &lt;/set-field&gt;
                &lt;order&gt;0&lt;/order&gt;
            &lt;/action&gt;
            &lt;action&gt;
                &lt;set-field&gt;
                    &lt;ipv4-destination&gt;200.71.9.5210&lt;/ipv4-destination&gt;
                &lt;/set-field&gt;
                &lt;order&gt;1&lt;/order&gt;
            &lt;/action&gt;
            &lt;bucket-id&gt;13&lt;/bucket-id&gt;
            &lt;watch_group&gt;14&lt;/watch_group&gt;
            &lt;watch_port&gt;1234&lt;/watch_port&gt;
        &lt;/bucket&gt;
    &lt;/buckets&gt;
    &lt;barrier&gt;false&lt;/barrier&gt;
    &lt;group-name&gt;Foo&lt;/group-name&gt;
    &lt;group-id&gt;1&lt;/group-id&gt;
&lt;/group&gt;</programlisting>

<note>
<simpara>If you want to try a different group id, make sure the URL and the body stay in sync. For example, if you wanted to try: group-id 20 you&#8217;d change the URL to "http://&lt;ip-address&gt;:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/group/20" but you would also need to update the &lt;group-id&gt;20&lt;/group-id&gt; in the body to match.</simpara>
</note>

<note>
<simpara>&lt;ip-address&gt; :Provide the IP Address of the machine on which the controller is running.</simpara>
</note>

</section>
<section xml:id="_check_for_your_group_on_the_switch">
<title>Check for your group on the switch</title>
<itemizedlist>
<listitem>
<simpara>See your group on your cpqd switch:</simpara>
</listitem>
</itemizedlist>

<screen>COMMAND: sudo dpctl tcp:127.0.0.1:6000 stats-group

SENDING:
stat_req{type="grp", flags="0x0", group="all"}


RECEIVED:
stat_repl{type="grp", flags="0x0", stats=[
{group="1", ref_cnt="0", pkt_cnt="0", byte_cnt="0", cntrs=[{pkt_cnt="0", byte_cnt="0"}, {pkt_cnt="0", byte_cnt="0"}]}]}</screen>

</section>
<section xml:id="_check_for_your_group_in_the_controller_config_via_restconf">
<title>Check for your group in the controller config via RESTCONF</title>
<itemizedlist>
<listitem>
<simpara>See your configured group in POSTMAN with</simpara>
<itemizedlist>
<listitem>
<simpara>URL <link xlink:href="http://&lt;ip-address&gt;:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/group/1">http://&lt;ip-address&gt;:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/group/1</link></simpara>
</listitem>
<listitem>
<simpara>GET</simpara>
</listitem>
<listitem>
<simpara>You should no longer need to set Accept</simpara>
</listitem>
<listitem>
<simpara>Note: &lt;ip-address&gt; :Provide the IP Address of the machine on which the controller is running.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="_look_for_your_group_stats_in_the_controller_operational_data_via_restconf">
<title>Look for your group stats in the controller operational data via RESTCONF</title>
<itemizedlist>
<listitem>
<simpara>See your operational group stats in POSTMAN with</simpara>
<itemizedlist>
<listitem>
<simpara>URL <link xlink:href="http://&lt;ip-address&gt;:8080/restconf/operational/opendaylight-inventory:nodes/node/openflow:1/group/1">http://&lt;ip-address&gt;:8080/restconf/operational/opendaylight-inventory:nodes/node/openflow:1/group/1</link></simpara>
</listitem>
<listitem>
<simpara>GET</simpara>
</listitem>
<listitem>
<simpara>Note: &lt;ip-address&gt; :Provide the IP Address of the machine on which the controller is running.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_discovering_and_testing_group_types">
<title>Discovering and testing Group Types</title>
<simpara>Currently, the openflowplugin has a test-provider that allows you to push various groups through the system from the OSGI command line. Once those groups have been pushed through, you can see them as examples and then use them to see in the config what a particular group example looks like.</simpara>
</section>
<section xml:id="_using_addgroup">
<title>Using addGroup</title>
<simpara>From the</simpara>
<screen>cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</screen>

<simpara>Point your CPqD at the controller as described above.</simpara>
<simpara>once you can see your node (probably openflow:1 if you&#8217;ve been following along) in the inventory, at the OSGI command line try running:</simpara>
<screen>addGroup openflow:1</screen>

<simpara>This will install a group in the switch. You can check whether the group is installed or not.</simpara>
<simpara>Once you&#8217;ve done that, use</simpara>
<itemizedlist>
<listitem>
<simpara>GET</simpara>
</listitem>
<listitem>
<simpara>Accept: application/xml</simpara>
</listitem>
<listitem>
<simpara>URL: "http://&lt;ip-address&gt;:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/group/1"</simpara>
<itemizedlist>
<listitem>
<simpara>Note: &lt;ip-address&gt; :Provide the IP Address of the machine on which the controller is running.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<note>
<simpara>Before attempting to PUT a group you have created via addGroup, please change its URL and body to, for example, use group 1 instead of group 2 or another Group Id, so that they don&#8217;t collide.</simpara>
</note>

<note>
<simpara>There are several test command providers and the one handling groups is OpenflowpluginGroupTestCommandProvider. Methods, which can be use as commands in OSGI-console have prefix <emphasis>_</emphasis>.</simpara>
</note>

</section>
<section xml:id="_example_group">
<title>Example Group</title>
<simpara>Examples for XML for various Group Types can be found in the test-scripts bundle of the plugin code with names g1.xml, g2.xml and g3.xml.</simpara>
</section>
</section>
<section xml:id="_end_to_end_meters">
<title>End to End Meters</title>
<section xml:id="_instructions_8">
<title>Instructions</title>
<section xml:id="_learn_end_to_end_for_inventory_2">
<title>Learn End to End for Inventory</title>
<itemizedlist>
<listitem>
<simpara><link linkend="odl-ofp-end-to-end-inventory_introduction-introduction">End to End Inventory</link></simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_check_inventory_2">
<title>Check inventory</title>
<itemizedlist>
<listitem>
<simpara>Run mininet with support for OF 1.3 as described in
<link linkend="odl-ofp-end-to-end-inventory_introduction-introduction">End to End Inventory</link></simpara>
</listitem>
<listitem>
<simpara>Make sure you see the openflow:1 node come up as described in
<link linkend="odl-ofp-end-to-end-inventory_introduction-introduction">End to End Inventory</link></simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="meter-strategy">
<title>Meter Strategy</title>
<simpara>Current way to flush a meter to switch looks like this:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>create MD-SAL modeled flow and commit it into dataStore using two
phase commit</simpara>
</listitem>
<listitem>
<simpara>FRM gets notified and invokes corresponding rpc (addMeter) on
particular service provider (if suitable provider for given node
registered)</simpara>
</listitem>
<listitem>
<simpara>the provider (plugin in this case) transforms MD-SAL modeled meter
into OF-API modeled meter</simpara>
</listitem>
<listitem>
<simpara>OF-API modeled meter is then flushed into OFLibrary</simpara>
</listitem>
<listitem>
<simpara>OFLibrary encodes meter into particular version of wire protocol and
sends it to particular switch</simpara>
</listitem>
<listitem>
<simpara>check on mininet side if meter is installed</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="push-your-meter">
<title>Push your Meter</title>
<itemizedlist>
<listitem>
<simpara>Using PostMan:</simpara>
<itemizedlist>
<listitem>
<simpara>Set Request Headers</simpara>
<itemizedlist>
<listitem>
<simpara>Content-Type: application/xml</simpara>
</listitem>
<listitem>
<simpara>Accept: application/xml</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Use URL:
"http://:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/meter/1"</simpara>
</listitem>
<listitem>
<simpara>Method:PUT</simpara>
</listitem>
<listitem>
<simpara>Request Body:</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;meter xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;container-name&gt;abcd&lt;/container-name&gt;
    &lt;flags&gt;meter-burst&lt;/flags&gt;
    &lt;meter-band-headers&gt;
        &lt;meter-band-header&gt;
            &lt;band-burst-size&gt;444&lt;/band-burst-size&gt;
            &lt;band-id&gt;0&lt;/band-id&gt;
            &lt;band-rate&gt;234&lt;/band-rate&gt;
            &lt;dscp-remark-burst-size&gt;5&lt;/dscp-remark-burst-size&gt;
            &lt;dscp-remark-rate&gt;12&lt;/dscp-remark-rate&gt;
            &lt;prec_level&gt;1&lt;/prec_level&gt;
            &lt;meter-band-types&gt;
                &lt;flags&gt;ofpmbt-dscp-remark&lt;/flags&gt;
            &lt;/meter-band-types&gt;
        &lt;/meter-band-header&gt;
    &lt;/meter-band-headers&gt;
    &lt;meter-id&gt;1&lt;/meter-id&gt;
    &lt;meter-name&gt;Foo&lt;/meter-name&gt;
&lt;/meter&gt;</programlisting>

<note>
<simpara>If you want to try a different meter id, make sure the URL
and the body stay in sync. For example, if you wanted to try: meter-id
20 you&#8217;d change the URL to "http://:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/meter/20" but you would also need to update the 20 in the body to match.</simpara>
</note>

<note>
<simpara>:Provide the IP Address of the machine on which the
controller is running.</simpara>
</note>

</section>
</section>
</section>
<section xml:id="check-for-your-meter-on-the-switch">
<title>Check for your meter on the switch</title>
<itemizedlist>
<listitem>
<simpara>See your meter on your CPqD switch:</simpara>
</listitem>
</itemizedlist>

<screen>COMMAND: $ sudo dpctl tcp:127.0.0.1:6000 meter-config

SENDING:
stat_req{type="mconf", flags="0x0"{meter_id= ffffffff"}


RECEIVED:
stat_repl{type="mconf", flags="0x0", stats=[{meter= c"", flags="4", bands=[{type = dscp_remark, rate="12", burst_size="5", prec_level="1"}]}]}</screen>

<section xml:id="check-for-your-meter-in-the-controller-config-via-restconf">
<title>Check for your meter in the controller config via RESTCONF</title>
<itemizedlist>
<listitem>
<simpara>See your configured flow in POSTMAN with</simpara>
<itemizedlist>
<listitem>
<simpara>URL
"http://:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/meter/1"</simpara>
</listitem>
<listitem>
<simpara>Method: GET</simpara>
</listitem>
<listitem>
<simpara>You should no longer need to set Request Headers for Accept</simpara>
</listitem>
<listitem>
<simpara>Note: :Provide the IP Address of the machine on which the controller
is running.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="look-for-your-meter-stats-in-the-controller-operational-data-via-restconf">
<title>Look for your meter stats in the controller operational data via RESTCONF</title>
<itemizedlist>
<listitem>
<simpara>See your operational meter stats in POSTMAN with</simpara>
<itemizedlist>
<listitem>
<simpara>URL
"http://:8080/restconfig/operational/opendaylight-inventory:nodes/node/openflow:1/meter/1"</simpara>
</listitem>
<listitem>
<simpara>Method: GET</simpara>
</listitem>
<listitem>
<simpara>Note: :Provide the IP Address of the machine on which the controller
is running.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="discovering-and-testing-meter-types">
<title>Discovering and testing Meter Types</title>
<simpara>Currently, the openflowplugin has a test-provider that allows you to
push various meters through the system from the OSGI command line. Once
those meters have been pushed through, you can see them as examples and
then use them to see in the config what a particular meter example looks
like.</simpara>
<section xml:id="using-addmeter">
<title>Using addMeter</title>
<simpara>From the</simpara>
<screen>cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</screen>

<simpara>Point your CPqD at the controller as described above.</simpara>
<simpara>Once you can see your CPqD connected to the controller, at the OSGI
command line try running:</simpara>
<screen>addMeter openflow:1</screen>

<simpara>Once you&#8217;ve done that, use</simpara>
<itemizedlist>
<listitem>
<simpara>GET</simpara>
</listitem>
<listitem>
<simpara>Accept: application/xml</simpara>
</listitem>
<listitem>
<simpara>URL:
"http://:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/meter/12"</simpara>
<itemizedlist>
<listitem>
<simpara>Note: :Provide the IP Address of the machine on which the controller
is running.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<note>
<simpara>Before attempting to PUT a meter you have created via addMeter,
please change its URL and body to, for example, use meter 1 instead of
meter 2 or another Meter Id, so you don&#8217;t collide.</simpara>
</note>

<note>
<simpara>There are several test command providers and the one handling
Meter is <emphasis role="strong">OpenflowpluginMeterTestCommandProvider</emphasis>. Methods, which can be
used as <emphasis role="strong">commands in OSGI-console</emphasis> have prefix <emphasis>_</emphasis>. Examples: addMeter,
modifyMeter and removeMeter.</simpara>
</note>

</section>
</section>
<section xml:id="example-meter">
<title>Example Meter</title>
<simpara>Examples for XML for various Meter Types can be found in the
test-scripts bundle of the plugin code with names m1.xml, m2.xml and
m3.xml.</simpara>
</section>
</section>
<section xml:id="_statistics">
<title>Statistics</title>
<section xml:id="overview">
<title>Overview</title>
<simpara>This page contains high level detail about the statistics collection
mechanism in new OpenFlow plugin.</simpara>
<section xml:id="statistics-collection-in-new-openflow-plugin">
<title>Statistics collection in new OpenFlow plugin</title>
<simpara>New OpenFlow plugin collects following statistics from OpenFlow enabled node(switch):</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Individual Flow Statistics</simpara>
</listitem>
<listitem>
<simpara>Aggregate Flow Statistics</simpara>
</listitem>
<listitem>
<simpara>Flow Table Statistics</simpara>
</listitem>
<listitem>
<simpara>Port Statistics</simpara>
</listitem>
<listitem>
<simpara>Group Description</simpara>
</listitem>
<listitem>
<simpara>Group Statistics</simpara>
</listitem>
<listitem>
<simpara>Meter Configuration</simpara>
</listitem>
<listitem>
<simpara>Meter Statistics</simpara>
</listitem>
<listitem>
<simpara>Queue Statistics</simpara>
</listitem>
<listitem>
<simpara>Node Description</simpara>
</listitem>
<listitem>
<simpara>Flow Table Features</simpara>
</listitem>
<listitem>
<simpara>Port Description</simpara>
</listitem>
<listitem>
<simpara>Group Features</simpara>
</listitem>
<listitem>
<simpara>Meter Features</simpara>
</listitem>
</orderedlist>

<simpara>At a high level statistics collection mechanism is divided into
following three parts</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Statistics related
<link xlink:href="https://git.opendaylight.org/gerrit/gitweb?p=controller.git;a=tree;f=opendaylight/md-sal/model/model-flow-statistics;h=3488133625ccf18d023bc59aa35c38e922b17d8d;hb=HEAD">YANG
models, service APIs and notification interfaces</link> are defined in the
MD-SAL.</simpara>
</listitem>
<listitem>
<simpara>Service APIs (RPCs) defined in yang models are implemented by
OpenFlow plugin. Notification interfaces are wired up by OpenFlow plugin
to MD-SAL.</simpara>
</listitem>
<listitem>
<simpara>Statistics Manager Module: This module use service APIs implemented by OpenFlow
plugin to send statistics requests to all the connected OpenFlow enabled
nodes. Module also implements notification interfaces to receive
statistics response from nodes. Once it receives statistics response, it
augment all the statistics data to the relevant element of the node
(like node-connector, flow, table,group, meter) and store it in MD-SAL
operational data store.</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="details-of-statistics-collection">
<title>Details of statistics collection</title>
<itemizedlist>
<listitem>
<simpara>Current implementation collects above mentioned statistics (except
10-14) at a periodic interval of 15 seconds.</simpara>
</listitem>
<listitem>
<simpara>Statistics mentioned in 10 to 14 are only fetched when any node
connects to the controller because these statistics are just static
details about the respective elements.</simpara>
</listitem>
<listitem>
<simpara>Whenever any new element is added to node (like flow, group, meter,
queue) it sends statistics request immediately to fetch the latest
statistics and store it in the operational data store.</simpara>
</listitem>
<listitem>
<simpara>Whenever any element is deleted from the node, it immediately remove
the relevant statistics from operational data store.</simpara>
</listitem>
<listitem>
<simpara>Statistics data are augmented to their respective element stored in
the configuration data store. E.g Controller installed flows are stored
in configuration data store. Whenever Statistics Manager receive
statistics data related to these flow, it search the corresponding flow
in the configuration data store and augment statistics in the
corresponding location in operational data store. Similar approach is
used for other elements of the node.</simpara>
</listitem>
<listitem>
<simpara>Statistics Manager stores flow statistics as an unaccounted flow
statistics in operational data store if there is no corresponding flow
exist in configuration data store. ID format of unaccounted flow
statistics is as follows - [#UF$TABLE**Unaccounted-flow-count - e.g
#UF$TABLE*2*1].</simpara>
</listitem>
<listitem>
<simpara>All the unaccounted flows will be cleaned up periodically after every
two cycle of flow statistics collection, given that there is no update
for these flows in the last two cycles.</simpara>
</listitem>
<listitem>
<simpara>Statistics Manager only entertains statistics response for the request
sent by itself. User can write its own statistics collector using the
statistics service APIs and notification defined in yang models, it
won&#8217;t effect the functioning of Statistics Manager.</simpara>
</listitem>
<listitem>
<simpara>OpenFlow 1.0 don&#8217;t have concept of Meter and Group, so Statistics
Manager don&#8217;t send any group &amp; meter related statistics request to
OpenFlow 1.0 enabled switch.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="restconf-uris-to-access-statistics-of-various-node-elements">
<title>RESTCONF Uris to access statistics of various node elements</title>
<itemizedlist>
<listitem>
<simpara>Aggregate Flow Statistics &amp; Flow Table Statistics</simpara>
</listitem>
</itemizedlist>

<screen>GET  http://&lt;controller-ip&gt;:8080/restconf/operational/opendaylight-inventory:nodes/node/{node-id}/table/{table-id}</screen>

<itemizedlist>
<listitem>
<simpara>Individual Flow Statistics from specific table</simpara>
</listitem>
</itemizedlist>

<screen>GET  http://&lt;controller-ip&gt;:8080/restconf/operational/opendaylight-inventory:nodes/node/{node-id}/table/{table-id}/flow/{flow-id}</screen>

<itemizedlist>
<listitem>
<simpara>Group Features &amp; Meter Features Statistics</simpara>
</listitem>
</itemizedlist>

<screen>GET  http://&lt;controller-ip&gt;:8080/restconf/operational/opendaylight-inventory:nodes/node/{node-id}</screen>

<itemizedlist>
<listitem>
<simpara>Group Description &amp; Group Statistics</simpara>
</listitem>
</itemizedlist>

<screen>GET  http://&lt;controller-ip&gt;:8080/restconf/operational/opendaylight-inventory:nodes/node/{node-id}/group/{group-id}</screen>

<itemizedlist>
<listitem>
<simpara>Meter Configuration &amp; Meter Statistics</simpara>
</listitem>
</itemizedlist>

<screen>GET  http://&lt;controller-ip&gt;:8080/restconf/operational/opendaylight-inventory:nodes/node/{node-id}/meter/{meter-id}</screen>

<itemizedlist>
<listitem>
<simpara>Node Connector Statistics</simpara>
</listitem>
</itemizedlist>

<screen>GET  http://&lt;controller-ip&gt;:8080/restconf/operational/opendaylight-inventory:nodes/node/{node-id}/node-connector/{node-connector-id}</screen>

<itemizedlist>
<listitem>
<simpara>Queue Statistics</simpara>
</listitem>
</itemizedlist>

<screen>GET  http://&lt;controller-ip&gt;:8080/restconf/operational/opendaylight-inventory:nodes/node/{node-id}/node-connector/{node-connector-id}/queue/{queue-id}</screen>

</section>
<section xml:id="bugs">
<title>Bugs</title>
<simpara>For more details and queuries, please send mail to <link xlink:href="mailto:openflowplugin-dev@lists.opendaylight.org">openflowplugin-dev@lists.opendaylight.org</link> or <link xlink:href="mailto:avishnoi@in.ibm.com">avishnoi@in.ibm.com</link> If you want to report any bug in statistics collection, please use <link xlink:href="https://bugs.opendaylight.org">bugzilla</link>.</simpara>
</section>
</section>
</section>
</section>
<section xml:id="_web_graphical_interface">
<title>Web / Graphical Interface</title>
<simpara>In the Hydrogen &amp; Helium release, the current Web UI does not support
the new OpenFlow 1.3 constructs such as groups, meters, new fields in
the flows, multiple flow tables, etc.</simpara>
</section>
<section xml:id="_command_line_interface">
<title>Command Line Interface</title>
<simpara>The following is not exactly CLI - just a set of test commands which can
be executed on the OSGI console testing various features in OpenFlow 1.3
spec.</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="odl-ofp-test-provider-flows_test-provider">OSGI Console Test Provider Commands: Flows</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="odl-ofp-test-provider-groups_test-provider">OSGI Console Test Provider Commands: Groups</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="odl-ofp-test-provider-meters_test-provider">OSGI Console Test Provider Commands: Meters</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="odl-ofp-test-provider-topoogy_test-provider">OSGI Console Test Provider Commands: Topology Events</link></simpara>
</listitem>
</itemizedlist>

<section xml:id="odl-ofp-test-provider-flows_test-provider">
<title>Flows : Test Provider</title>
<simpara>Currently, the openflowplugin has a test-provider that allows you to
push various flows through the system from the OSGI command line. Once
those flows have been pushed through, you can see them as examples and
then use them to see in the config what a particular flow example looks
like.</simpara>
<section xml:id="_addflow_addmdflow">
<title>AddFlow : addMDFlow</title>
<simpara>Run the controller by executing:</simpara>
<screen>cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</screen>

<simpara>Point your mininet to the controller by giving the parameters
--controller=remote,ip=.</simpara>
<simpara>Once you see your node (probably openflow:1 if you&#8217;ve been following
along) in the inventory, at the OSGI command line try running:</simpara>
<screen>addMDFlow openflow:1 f#</screen>

<simpara>Where # is a number between 1 and 80 and openflow:1 is the of the
switch. This will create one of 80 possible flows. You can confirm that
they were created on the switch.</simpara>
</section>
<section xml:id="_removeflow_removemdflow">
<title>RemoveFlow : removeMDFlow</title>
<simpara>Similar to addMDFlow, from the controller OSGi prompt, while your switch
is connected to the controller, try running:</simpara>
<screen>removeMDFlow openflow:1 f#</screen>

<simpara>where # is a number between 1 and 80 and openflow:1 is the of the
switch. The flow to be deleted should have same flowid and Nodeid as
used for flow add.</simpara>
</section>
<section xml:id="_modifyflow_modifymdflow">
<title>ModifyFlow : modifyMDFlow</title>
<simpara>Similar to addMDFlow, from the controller OSGi prompt, while your switch
is connected to the controller, try running:</simpara>
<screen>modifyMDFlow openflow:1 f#</screen>

<simpara>where # is a number between 1 and 80 and openflow:1 is the of the
switch. The flow to be deleted should have same flowid and Nodeid as
used for flow add.</simpara>
</section>
</section>
<section xml:id="odl-ofp-test-provider-groups_test-provider">
<title>Group : Test Provider</title>
<simpara>Currently, the openflowplugin has a test-provider that allows you to
push various flows through the system from the OSGI command line. Once
those flows have been pushed through, you can see them as examples and
then use them to see in the config what a particular flow example looks
like.</simpara>
<section xml:id="addgroup-addgroup">
<title>AddGroup : addGroup</title>
<simpara>Run the controller by executing:</simpara>
<screen>cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</screen>

<simpara>Point your mininet to the controller by giving the parameters
--controller=remote,ip=.</simpara>
<simpara>Once you see your node (probably openflow:1 if you&#8217;ve been following
along) in the inventory, at the OSGI command line try running:</simpara>
<screen>addGroup openflow:1 a# g#</screen>

<simpara>Where # is a number between 1 and 4 for grouptype(g#) and 1 and 28 for
actiontype(a#). You can confirm that they were created on the switch.</simpara>
</section>
<section xml:id="removegroup-removegroup">
<title>RemoveGroup : removeGroup</title>
<simpara>Run the controller by executing:</simpara>
<screen>cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</screen>

<simpara>Point your mininet at the controller as described above.</simpara>
<simpara>Once you see your node (probably openflow:1 if you&#8217;ve been following
along) in the inventory, at the OSGI command line try running:</simpara>
<screen>removeGroup openflow:1 a# g#</screen>

<simpara>Where # is a number between 1 and 4 for grouptype(g#) and 1 and 28 for
actiontype(a#). GroupId should be same as that used for adding the flow.
You can confirm that it was removed from the switch.</simpara>
</section>
<section xml:id="modifygroup-modifygroup">
<title>ModifyGroup : modifyGroup</title>
<simpara>Run the controller by executing:</simpara>
<screen>cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</screen>

<simpara>Point your mininet at the controller as described above.</simpara>
<simpara>Once you see your node (probably openflow:1 if you&#8217;ve been following
along) in the inventory, at the OSGI command line try running:</simpara>
<screen>modifyGroup openflow:1 a# g#</screen>

<simpara>Where # is a number between 1 and 4 for grouptype(g#) and 1 and 28 for
actiontype(a#). GroupId should be same as that used for adding the flow.
You can confirm that it was modified on the switch.</simpara>
</section>
</section>
<section xml:id="odl-ofp-test-provider-meters_test-provider">
<title>Meters : Test Provider</title>
<simpara>Currently, the openflowplugin has a test-provider that allows you to
push various flows through the system from the OSGI command line. Once
those flows have been pushed through, you can see them as examples and
then use them to see in the config what a particular flow example looks
like.</simpara>
<section xml:id="_addmeter_addmeter">
<title>AddMeter : addMeter</title>
<simpara>Run the controller by executing:</simpara>
<screen>cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</screen>

<simpara>Point your mininet to the controller by giving the parameters
--controller=remote,ip=.</simpara>
<simpara>Once you see your node (probably openflow:1 if you&#8217;ve been following
along) in the inventory, at the OSGI command line try running:</simpara>
<screen>addMeter openflow:1</screen>

<simpara>You can now confirm that meter has been created on the switch.</simpara>
</section>
<section xml:id="_removemeter_removemeter">
<title>RemoveMeter : removeMeter</title>
<simpara>Run the controller by executing:</simpara>
<screen>cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</screen>

<simpara>Point your mininet to the controller by giving the parameters
--controller=remote,ip=.</simpara>
<simpara>Once you see your node (probably openflow:1 if you&#8217;ve been following
along) in the inventory, at the OSGI command line try running:</simpara>
<screen>removeMeter openflow:1</screen>

<simpara>The CLI takes care of using the same meterId and nodeId as used for
meter add. You can confirm that it was removed from the switch.</simpara>
</section>
<section xml:id="_modifymeter_modifymeter">
<title>ModifyMeter : modifyMeter</title>
<simpara>Run the controller by executing:</simpara>
<screen>cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</screen>

<simpara>Point your mininet to the controller by giving the parameters
--controller=remote,ip=.</simpara>
<simpara>Once you see your node (probably openflow:1 if you&#8217;ve been following
along) in the inventory, at the OSGI command line try running:</simpara>
<screen>modifyMeter openflow:1</screen>

<simpara>The CLI takes care of using the same meterId and nodeId as used for
meter add. You can confirm that it was modified on the switch.</simpara>
</section>
</section>
<section xml:id="odl-ofp-test-provider-topoogy_test-provider">
<title>Topology : Notification</title>
<simpara>Currently, the openflowplugin has a test-provider that allows you to get
notifications for the topology related events like Link-Discovered ,
Link-Removed events.</simpara>
<section xml:id="_link_discovered_event_testing">
<title>Link Discovered Event : Testing</title>
<simpara>Run the controller by executing:</simpara>
<screen>cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</screen>

<simpara>Point your mininet to the controller by giving the parameters
--controller=remote,ip=. Once the controller is connected to the switch,
Link-Discovered event can be tested by initially configuring the
specific flows on the switch. For Link Discovered event either
table-miss flow or LLDP ether-type flow can be configured.</simpara>
<simpara>Configuring Table-Miss flow using OpenflowpluginTestCommandProvider</simpara>
<screen>addMDFlow Openflow:1 fTM</screen>

<simpara>as per this
OpenDaylight_OpenFlow_Plugin:Test_Provider#Flows_:_Test_Provider[link].
<emphasis>fTM</emphasis> is the table-miss scenario here.</simpara>
<simpara>Once the table-miss flow is configured through above command, we can see
the Link-Discovered event in the debug logs on the controller console.</simpara>
<simpara>Configuring LLDP ether-type flow using OpenflowpluginTestCommandProvider</simpara>
<screen>addMDFlow Openflow:1 0(table-id) f81</screen>

<simpara>You can confirm that they were created on the switch.</simpara>
<simpara>Once the LLDP ether-type flow is configured through above command, we
can see the Link-Discovered event in the debug logs on the controller
console.</simpara>
</section>
<section xml:id="_link_removed_event_testing">
<title>Link Removed Event : Testing</title>
<simpara>Having configured either table-miss or lldp ether-type flow on switch,
once the switch is disconnected we see the Link-Removed event</simpara>
</section>
</section>
</section>
<section xml:id="_programmatic_interface">
<title>Programmatic Interface</title>
<simpara>The API is documented in the model documentation under the section
OpenFlow Services at:</simpara>
<itemizedlist>
<listitem>
<simpara><link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Controller:Config:Model_Reference">Models Documentation (OpenFlow Services Section)</link></simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_example_flows">
<title>Example flows</title>
<section xml:id="odl-ofp-example-flows_overview">
<title>Overview</title>
<simpara>The flow examples on this page are tested to work with OVS.</simpara>
<simpara>Use, for example, POSTMAN with the following parameters:</simpara>
<screen>PUT http://&lt;ctrl-addr&gt;:8080/restconf/config/opendaylight-inventory:nodes/node/&lt;Node-id&gt;/table/&lt;Table-#&gt;/flow/&lt;Flow-#&gt;

- Accept: application/xml
- Content-Type: application/xml</screen>

<simpara>For example:</simpara>
<screen>PUT http://localhost:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/flow/127</screen>

<simpara>Make sure that the Table-# and Flow-# in the URL and in the XML match.</simpara>
<simpara>The format of the flow-programming XML is determined by by the grouping
<emphasis>flow</emphasis> in the opendaylight-flow-types yang model: MISSING LINK.</simpara>
</section>
<section xml:id="match-examples">
<title>Match Examples</title>
<simpara>The format of the XML that describes OpenFlow matches is determined by
the opendaylight-match-types yang model: .</simpara>
<simpara>The RESTCONF documentation for the match-types yang model can be found
at
<link xlink:href="https://jenkins.opendaylight.org/controller/job/controller-merge/lastSuccessfulBuild/artifact/opendaylight/md-sal/model/model-flow-base/target/site/models/opendaylight-match-types.html">opendaylight-match-types.html</link></simpara>
<section xml:id="ipv4-dest-address">
<title>IPv4 Dest Address</title>
<itemizedlist>
<listitem>
<simpara>Flow=124, Table=2, Priority=2,
Instructions=\{Apply_Actions={dec_nw_ttl}},
match=\{ipv4_destination_address=10.0.1.1/24}</simpara>
</listitem>
<listitem>
<simpara>Note that ethernet-type MUST be 2048 (0x800)</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;id&gt;124&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-destination&gt;10.0.1.1/24&lt;/ipv4-destination&gt;
    &lt;/match&gt;
    &lt;hard-timeout&gt;12&lt;/hard-timeout&gt;
    &lt;cookie&gt;1&lt;/cookie&gt;
    &lt;idle-timeout&gt;34&lt;/idle-timeout&gt;
    &lt;flow-name&gt;FooXf1&lt;/flow-name&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;barrier&gt;false&lt;/barrier&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ethernet-src-address">
<title>Ethernet Src Address</title>
<itemizedlist>
<listitem>
<simpara>Flow=126, Table=2, Priority=2, Instructions=\{Apply_Actions={drop}},
match=\{ethernet-source=00:00:00:00:00:01}</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;drop-action/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;id&gt;126&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:00:00:01&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
    &lt;/match&gt;
    &lt;hard-timeout&gt;12&lt;/hard-timeout&gt;
    &lt;cookie&gt;3&lt;/cookie&gt;
    &lt;idle-timeout&gt;34&lt;/idle-timeout&gt;
    &lt;flow-name&gt;FooXf3&lt;/flow-name&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;barrier&gt;false&lt;/barrier&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ethernet-src-dest-addresses-ethernet-type">
<title>Ethernet Src &amp; Dest Addresses, Ethernet Type</title>
<itemizedlist>
<listitem>
<simpara>Flow=127, Table=2, Priority=2, Instructions=\{Apply_Actions={drop}},
match=\{ethernet-source=00:00:00:00:23:ae,
ethernet-destination=ff:ff:ff:ff:ff:ff, ethernet-type=45}</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-mpls-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;id&gt;127&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;45&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;ff:ff:ff:ff:ff:ff&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:00:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
    &lt;/match&gt;
    &lt;hard-timeout&gt;12&lt;/hard-timeout&gt;
    &lt;cookie&gt;4&lt;/cookie&gt;
    &lt;idle-timeout&gt;34&lt;/idle-timeout&gt;
    &lt;flow-name&gt;FooXf4&lt;/flow-name&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;barrier&gt;false&lt;/barrier&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ethernet-src-dest-addresses-ipv4-src-dest-addresses-input-port">
<title>Ethernet Src &amp; Dest Addresses, IPv4 Src &amp; Dest Addresses, Input Port</title>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 34887 (0x8847)</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-mpls-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;id&gt;128&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34887&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;ff:ff:ff:ff:ff:ff&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:00:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-source&gt;10.1.2.3/24&lt;/ipv4-source&gt;
        &lt;ipv4-destination&gt;20.4.5.6/16&lt;/ipv4-destination&gt;
        &lt;in-port&gt;0&lt;/in-port&gt;
    &lt;/match&gt;
    &lt;hard-timeout&gt;12&lt;/hard-timeout&gt;
    &lt;cookie&gt;5&lt;/cookie&gt;
    &lt;idle-timeout&gt;34&lt;/idle-timeout&gt;
    &lt;flow-name&gt;FooXf5&lt;/flow-name&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;barrier&gt;false&lt;/barrier&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ethernet-src-dest-addresses-ipv4-src-dest-addresses-ip-protocol-ip-dscp-ip-ecn-input-port">
<title>Ethernet Src &amp; Dest Addresses, IPv4 Src &amp; Dest Addresses, IP</title>
<simpara>Protocol #, IP DSCP, IP ECN, Input Port</simpara>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 2048 (0x800)</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;id&gt;130&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;ff:ff:ff:ff:ff:aa&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:11:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-source&gt;10.1.2.3/24&lt;/ipv4-source&gt;
        &lt;ipv4-destination&gt;20.4.5.6/16&lt;/ipv4-destination&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;56&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;15&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;1&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;in-port&gt;0&lt;/in-port&gt;
    &lt;/match&gt;
    &lt;hard-timeout&gt;12000&lt;/hard-timeout&gt;
    &lt;cookie&gt;7&lt;/cookie&gt;
    &lt;idle-timeout&gt;12000&lt;/idle-timeout&gt;
    &lt;flow-name&gt;FooXf7&lt;/flow-name&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;barrier&gt;false&lt;/barrier&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ethernet-src-dest-addresses-ipv4-src-dest-addresses-tcp-src-dest-ports-ip-dscp-ip-ecn-input-port">
<title>Ethernet Src &amp; Dest Addresses, IPv4 Src &amp; Dest Addresses, TCP Src &amp;</title>
<simpara>Dest Ports, IP DSCP, IP ECN, Input Port</simpara>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 2048 (0x800)</simpara>
</listitem>
<listitem>
<simpara>Note that IP Protocol Type MUST be 6</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;id&gt;131&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;ff:ff:29:01:19:61&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:11:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-source&gt;17.1.2.3/8&lt;/ipv4-source&gt;
        &lt;ipv4-destination&gt;172.168.5.6/16&lt;/ipv4-destination&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;6&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;2&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;2&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;tcp-source-port&gt;25364&lt;/tcp-source-port&gt;
        &lt;tcp-destination-port&gt;8080&lt;/tcp-destination-port&gt;
        &lt;in-port&gt;0&lt;/in-port&gt;
    &lt;/match&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;cookie&gt;8&lt;/cookie&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;flow-name&gt;FooXf8&lt;/flow-name&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;barrier&gt;false&lt;/barrier&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ethernet-src-dest-addresses-ipv4-src-dest-addresses-udp-src-dest-ports-ip-dscp-ip-ecn-input-port">
<title>Ethernet Src &amp; Dest Addresses, IPv4 Src &amp; Dest Addresses, UDP Src &amp;</title>
<simpara>Dest Ports, IP DSCP, IP ECN, Input Port</simpara>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 2048 (0x800)</simpara>
</listitem>
<listitem>
<simpara>Note that IP Protocol Type MUST be 17</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;id&gt;132&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;20:14:29:01:19:61&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:11:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-source&gt;19.1.2.3/10&lt;/ipv4-source&gt;
        &lt;ipv4-destination&gt;172.168.5.6/18&lt;/ipv4-destination&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;17&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;8&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;udp-source-port&gt;25364&lt;/udp-source-port&gt;
        &lt;udp-destination-port&gt;8080&lt;/udp-destination-port&gt;
        &lt;in-port&gt;0&lt;/in-port&gt;
    &lt;/match&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;cookie&gt;9&lt;/cookie&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;flow-name&gt;FooXf9&lt;/flow-name&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;barrier&gt;false&lt;/barrier&gt;</programlisting>

</section>
<section xml:id="ethernet-src-dest-addresses-ipv4-src-dest-addresses-icmpv4-type-code-ip-dscp-ip-ecn-input-port">
<title>Ethernet Src &amp; Dest Addresses, IPv4 Src &amp; Dest Addresses, ICMPv4</title>
<simpara>Type &amp; Code, IP DSCP, IP ECN, Input Port</simpara>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 2048 (0x800)</simpara>
</listitem>
<listitem>
<simpara>Note that IP Protocol Type MUST be 1</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;id&gt;134&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;ff:ff:29:01:19:61&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:11:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-source&gt;17.1.2.3/8&lt;/ipv4-source&gt;
        &lt;ipv4-destination&gt;172.168.5.6/16&lt;/ipv4-destination&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;1&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;27&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;icmpv4-match&gt;
            &lt;icmpv4-type&gt;6&lt;/icmpv4-type&gt;
            &lt;icmpv4-code&gt;3&lt;/icmpv4-code&gt;
        &lt;/icmpv4-match&gt;
        &lt;in-port&gt;0&lt;/in-port&gt;
    &lt;/match&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;cookie&gt;11&lt;/cookie&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;flow-name&gt;FooXf11&lt;/flow-name&gt;
    &lt;priority&gt;2&lt;/priority&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ethernet-src-dest-addresses-arp-operation-arp-src-target-transport-addresses-arp-src-target-hw-addresses">
<title>Ethernet Src &amp; Dest Addresses, ARP Operation, ARP Src &amp; Target</title>
<simpara>Transport Addresses, ARP Src &amp; Target Hw Addresses</simpara>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 2054 (0x806)</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
                &lt;action&gt;
                    &lt;order&gt;1&lt;/order&gt;
                    &lt;dec-mpls-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;id&gt;137&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2054&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;ff:ff:ff:ff:FF:ff&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:FC:01:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;arp-op&gt;1&lt;/arp-op&gt;
        &lt;arp-source-transport-address&gt;192.168.4.1&lt;/arp-source-transport-address&gt;
        &lt;arp-target-transport-address&gt;10.21.22.23&lt;/arp-target-transport-address&gt;
        &lt;arp-source-hardware-address&gt;
            &lt;address&gt;12:34:56:78:98:AB&lt;/address&gt;
        &lt;/arp-source-hardware-address&gt;
        &lt;arp-target-hardware-address&gt;
            &lt;address&gt;FE:DC:BA:98:76:54&lt;/address&gt;
        &lt;/arp-target-hardware-address&gt;
    &lt;/match&gt;
    &lt;hard-timeout&gt;12&lt;/hard-timeout&gt;
    &lt;cookie&gt;14&lt;/cookie&gt;
    &lt;idle-timeout&gt;34&lt;/idle-timeout&gt;
    &lt;flow-name&gt;FooXf14&lt;/flow-name&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;barrier&gt;false&lt;/barrier&gt;</programlisting>

</section>
<section xml:id="ethernet-src-dest-addresses-ethernet-type-vlan-id-vlan-pcp">
<title>Ethernet Src &amp; Dest Addresses, Ethernet Type, VLAN ID, VLAN PCP</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;id&gt;138&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;ff:ff:29:01:19:61&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:11:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;vlan-match&gt;
            &lt;vlan-id&gt;
                &lt;vlan-id&gt;78&lt;/vlan-id&gt;
                &lt;vlan-id-present&gt;true&lt;/vlan-id-present&gt;
            &lt;/vlan-id&gt;
            &lt;vlan-pcp&gt;3&lt;/vlan-pcp&gt;
      &lt;/vlan-match&gt;
    &lt;/match&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;cookie&gt;15&lt;/cookie&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;flow-name&gt;FooXf15&lt;/flow-name&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;barrier&gt;false&lt;/barrier&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ethernet-src-dest-addresses-mpls-label-mpls-tc-mpls-bos">
<title>Ethernet Src &amp; Dest Addresses, MPLS Label, MPLS TC, MPLS BoS</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;flow-name&gt;FooXf17&lt;/flow-name&gt;
    &lt;id&gt;140&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;17&lt;/cookie&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34887&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;ff:ff:29:01:19:61&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:11:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;protocol-match-fields&gt;
            &lt;mpls-label&gt;567&lt;/mpls-label&gt;
            &lt;mpls-tc&gt;3&lt;/mpls-tc&gt;
            &lt;mpls-bos&gt;1&lt;/mpls-bos&gt;
        &lt;/protocol-match-fields&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ipv6-src-dest-addresses">
<title>IPv6 Src &amp; Dest Addresses</title>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 34525</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf18&lt;/flow-name&gt;
    &lt;id&gt;141&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;18&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34525&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv6-source&gt;fe80::2acf:e9ff:fe21:6431/128&lt;/ipv6-source&gt;
        &lt;ipv6-destination&gt;aabb:1234:2acf:e9ff::fe21:6431/64&lt;/ipv6-destination&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="metadata">
<title>Metadata</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf19&lt;/flow-name&gt;
    &lt;id&gt;142&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;19&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;1&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;metadata&gt;
            &lt;metadata&gt;12345&lt;/metadata&gt;
        &lt;/metadata&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="metadata-metadata-mask">
<title>Metadata, Metadata Mask</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf20&lt;/flow-name&gt;
    &lt;id&gt;143&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;20&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;metadata&gt;
            &lt;metadata&gt;12345&lt;/metadata&gt;
            &lt;metadata-mask&gt;//FF&lt;/metadata-mask&gt;
        &lt;/metadata&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ipv6-src-dest-addresses-metadata-ip-dscp-ip-ecn-udp-src-dest-ports">
<title>IPv6 Src &amp; Dest Addresses, Metadata, IP DSCP, IP ECN, UDP Src &amp; Dest Ports</title>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 34525</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf21&lt;/flow-name&gt;
    &lt;id&gt;144&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;21&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34525&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv6-source&gt;1234:5678:9ABC:DEF0:FDCD:A987:6543:210F/76&lt;/ipv6-source&gt;
        &lt;ipv6-destination&gt;fe80::2acf:e9ff:fe21:6431/128&lt;/ipv6-destination&gt;
        &lt;metadata&gt;
            &lt;metadata&gt;12345&lt;/metadata&gt;
        &lt;/metadata&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;17&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;8&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;udp-source-port&gt;25364&lt;/udp-source-port&gt;
        &lt;udp-destination-port&gt;8080&lt;/udp-destination-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ipv6-src-dest-addresses-metadata-ip-dscp-ip-ecn-tcp-src-dest-ports">
<title>IPv6 Src &amp; Dest Addresses, Metadata, IP DSCP, IP ECN, TCP Src &amp; Dest Ports</title>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 34525</simpara>
</listitem>
<listitem>
<simpara>Note that IP Protocol MUST be 6</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf22&lt;/flow-name&gt;
    &lt;id&gt;145&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;22&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34525&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv6-source&gt;1234:5678:9ABC:DEF0:FDCD:A987:6543:210F/76&lt;/ipv6-source&gt;
        &lt;ipv6-destination&gt;fe80:2acf:e9ff:fe21::6431/94&lt;/ipv6-destination&gt;
        &lt;metadata&gt;
            &lt;metadata&gt;12345&lt;/metadata&gt;
        &lt;/metadata&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;6&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;60&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;tcp-source-port&gt;183&lt;/tcp-source-port&gt;
        &lt;tcp-destination-port&gt;8080&lt;/tcp-destination-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ipv6-src-dest-addresses-metadata-ip-dscp-ip-ecn-tcp-src-dest-ports-ipv6-label">
<title>IPv6 Src &amp; Dest Addresses, Metadata, IP DSCP, IP ECN, TCP Src &amp; Dest Ports, IPv6 Label</title>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 34525</simpara>
</listitem>
<listitem>
<simpara>Note that IP Protocol MUST be 6</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf23&lt;/flow-name&gt;
    &lt;id&gt;146&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;23&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34525&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv6-source&gt;1234:5678:9ABC:DEF0:FDCD:A987:6543:210F/76&lt;/ipv6-source&gt;
        &lt;ipv6-destination&gt;fe80:2acf:e9ff:fe21::6431/94&lt;/ipv6-destination&gt;
        &lt;metadata&gt;
            &lt;metadata&gt;12345&lt;/metadata&gt;
        &lt;/metadata&gt;
        &lt;ipv6-label&gt;
            &lt;ipv6-flabel&gt;33&lt;/ipv6-flabel&gt;
        &lt;/ipv6-label&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;6&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;60&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;tcp-source-port&gt;183&lt;/tcp-source-port&gt;
        &lt;tcp-destination-port&gt;8080&lt;/tcp-destination-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="tunnel-id">
<title>Tunnel ID</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf24&lt;/flow-name&gt;
    &lt;id&gt;147&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;24&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;tunnel&gt;
            &lt;tunnel-id&gt;2591&lt;/tunnel-id&gt;
        &lt;/tunnel&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ipv6-src-dest-addresses-metadata-ip-dscp-ip-ecn-icmpv6-type-code-ipv6-label">
<title>IPv6 Src &amp; Dest Addresses, Metadata, IP DSCP, IP ECN, ICMPv6 Type &amp; Code, IPv6 Label</title>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 34525</simpara>
</listitem>
<listitem>
<simpara>Note that IP Protocol MUST be 58</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf25&lt;/flow-name&gt;
    &lt;id&gt;148&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;25&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34525&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv6-source&gt;1234:5678:9ABC:DEF0:FDCD:A987:6543:210F/76&lt;/ipv6-source&gt;
        &lt;ipv6-destination&gt;fe80:2acf:e9ff:fe21::6431/94&lt;/ipv6-destination&gt;
        &lt;metadata&gt;
            &lt;metadata&gt;12345&lt;/metadata&gt;
        &lt;/metadata&gt;
        &lt;ipv6-label&gt;
            &lt;ipv6-flabel&gt;33&lt;/ipv6-flabel&gt;
        &lt;/ipv6-label&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;58&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;60&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;icmpv6-match&gt;
            &lt;icmpv6-type&gt;6&lt;/icmpv6-type&gt;
            &lt;icmpv6-code&gt;3&lt;/icmpv6-code&gt;
        &lt;/icmpv6-match&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="ipv6-src-dest-addresses-metadata-ip-dscp-ip-ecn-tcp-src-dst-ports-ipv6-label-ipv6-ext-header">
<title>IPv6 Src &amp; Dest Addresses, Metadata, IP DSCP, IP ECN, TCP Src &amp; Dst Ports, IPv6 Label, IPv6 Ext Header</title>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 34525</simpara>
</listitem>
<listitem>
<simpara>Note that IP Protocol MUST be 58</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf27&lt;/flow-name&gt;
    &lt;id&gt;150&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;27&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;dec-nw-ttl/&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34525&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv6-source&gt;1234:5678:9ABC:DEF0:FDCD:A987:6543:210F/76&lt;/ipv6-source&gt;
        &lt;ipv6-destination&gt;fe80:2acf:e9ff:fe21::6431/94&lt;/ipv6-destination&gt;
        &lt;metadata&gt;
            &lt;metadata&gt;12345&lt;/metadata&gt;
        &lt;/metadata&gt;
        &lt;ipv6-label&gt;
            &lt;ipv6-flabel&gt;33&lt;/ipv6-flabel&gt;
        &lt;/ipv6-label&gt;
        &lt;ipv6-ext-header&gt;
            &lt;ipv6-exthdr&gt;0&lt;/ipv6-exthdr&gt;
        &lt;/ipv6-ext-header&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;6&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;60&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;tcp-source-port&gt;183&lt;/tcp-source-port&gt;
        &lt;tcp-destination-port&gt;8080&lt;/tcp-destination-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
</section>
<section xml:id="actions">
<title>Actions</title>
<simpara>The format of the XML that describes OpenFlow actions is determined by
the opendaylight-action-types yang model: .</simpara>
<simpara>The RESTCONF documentation for the match-types yang model can be found
at
<link xlink:href="https://jenkins.opendaylight.org/controller/job/controller-merge/lastSuccessfulBuild/artifact/opendaylight/md-sal/model/model-flow-base/target/site/models/opendaylight-action-types.html">opendaylight-action-types.html</link></simpara>
<section xml:id="apply-actions">
<title>Apply Actions</title>
<section xml:id="output-to-table">
<title>Output to TABLE</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf101&lt;/flow-name&gt;
    &lt;id&gt;256&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;101&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;TABLE&lt;/output-node-connector&gt;
                        &lt;max-length&gt;60&lt;/max-length&gt;
                    &lt;/output-action&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34525&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv6-source&gt;1234:5678:9ABC:DEF0:FDCD:A987:6543:210F/76&lt;/ipv6-source&gt;
        &lt;ipv6-destination&gt;fe80:2acf:e9ff:fe21::6431/94&lt;/ipv6-destination&gt;
        &lt;metadata&gt;
            &lt;metadata&gt;12345&lt;/metadata&gt;
        &lt;/metadata&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;6&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;60&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;tcp-source-port&gt;183&lt;/tcp-source-port&gt;
        &lt;tcp-destination-port&gt;8080&lt;/tcp-destination-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="output-to-inport">
<title>Output to INPORT</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf102&lt;/flow-name&gt;
    &lt;id&gt;257&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;102&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;INPORT&lt;/output-node-connector&gt;
                        &lt;max-length&gt;60&lt;/max-length&gt;
                    &lt;/output-action&gt;
                &lt;/action&gt;
7            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;ff:ff:29:01:19:61&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:11:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-source&gt;17.1.2.3/8&lt;/ipv4-source&gt;
        &lt;ipv4-destination&gt;172.168.5.6/16&lt;/ipv4-destination&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;6&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;2&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;2&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;tcp-source-port&gt;25364&lt;/tcp-source-port&gt;
        &lt;tcp-destination-port&gt;8080&lt;/tcp-destination-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="output-to-physical-port">
<title>Output to Physical Port</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf103&lt;/flow-name&gt;
    &lt;id&gt;258&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;103&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;1&lt;/output-node-connector&gt;
                        &lt;max-length&gt;60&lt;/max-length&gt;
                    &lt;/output-action&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;ff:ff:29:01:19:61&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:11:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-source&gt;17.1.2.3/8&lt;/ipv4-source&gt;
        &lt;ipv4-destination&gt;172.168.5.6/16&lt;/ipv4-destination&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;6&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;2&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;2&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;tcp-source-port&gt;25364&lt;/tcp-source-port&gt;
        &lt;tcp-destination-port&gt;8080&lt;/tcp-destination-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="output-to-local">
<title>Output to LOCAL</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf104&lt;/flow-name&gt;
    &lt;id&gt;259&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;104&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;LOCAL&lt;/output-node-connector&gt;
                        &lt;max-length&gt;60&lt;/max-length&gt;
                    &lt;/output-action&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34525&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv6-source&gt;1234:5678:9ABC:DEF0:FDCD:A987:6543:210F/76&lt;/ipv6-source&gt;
        &lt;ipv6-destination&gt;fe80:2acf:e9ff:fe21::6431/94&lt;/ipv6-destination&gt;
        &lt;metadata&gt;
            &lt;metadata&gt;12345&lt;/metadata&gt;
        &lt;/metadata&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;6&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;60&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;tcp-source-port&gt;183&lt;/tcp-source-port&gt;
        &lt;tcp-destination-port&gt;8080&lt;/tcp-destination-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="output-to-normal">
<title>Output to NORMAL</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf105&lt;/flow-name&gt;
    &lt;id&gt;260&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;105&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;NORMAL&lt;/output-node-connector&gt;
                        &lt;max-length&gt;60&lt;/max-length&gt;
                    &lt;/output-action&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34525&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv6-source&gt;1234:5678:9ABC:DEF0:FDCD:A987:6543:210F/84&lt;/ipv6-source&gt;
        &lt;ipv6-destination&gt;fe80:2acf:e9ff:fe21::6431/90&lt;/ipv6-destination&gt;
        &lt;metadata&gt;
            &lt;metadata&gt;12345&lt;/metadata&gt;
        &lt;/metadata&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;6&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;45&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;2&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;tcp-source-port&gt;20345&lt;/tcp-source-port&gt;
        &lt;tcp-destination-port&gt;80&lt;/tcp-destination-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="output-to-flood">
<title>Output to FLOOD</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf106&lt;/flow-name&gt;
    &lt;id&gt;261&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;106&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;FLOOD&lt;/output-node-connector&gt;
                        &lt;max-length&gt;60&lt;/max-length&gt;
                    &lt;/output-action&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34525&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv6-source&gt;1234:5678:9ABC:DEF0:FDCD:A987:6543:210F/100&lt;/ipv6-source&gt;
        &lt;ipv6-destination&gt;fe80:2acf:e9ff:fe21::6431/67&lt;/ipv6-destination&gt;
        &lt;metadata&gt;
            &lt;metadata&gt;12345&lt;/metadata&gt;
        &lt;/metadata&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;6&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;45&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;2&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;tcp-source-port&gt;20345&lt;/tcp-source-port&gt;
        &lt;tcp-destination-port&gt;80&lt;/tcp-destination-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="output-to-all">
<title>Output to ALL</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf107&lt;/flow-name&gt;
    &lt;id&gt;262&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;107&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;ALL&lt;/output-node-connector&gt;
                        &lt;max-length&gt;60&lt;/max-length&gt;
                    &lt;/output-action&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;20:14:29:01:19:61&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:11:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-source&gt;19.1.2.3/10&lt;/ipv4-source&gt;
        &lt;ipv4-destination&gt;172.168.5.6/18&lt;/ipv4-destination&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;17&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;8&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;udp-source-port&gt;25364&lt;/udp-source-port&gt;
        &lt;udp-destination-port&gt;8080&lt;/udp-destination-port&gt;
        &lt;in-port&gt;0&lt;/in-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="output-to-controller">
<title>Output to CONTROLLER</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf108&lt;/flow-name&gt;
    &lt;id&gt;263&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;108&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;CONTROLLER&lt;/output-node-connector&gt;
                        &lt;max-length&gt;60&lt;/max-length&gt;
                    &lt;/output-action&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;20:14:29:01:19:61&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:11:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-source&gt;19.1.2.3/10&lt;/ipv4-source&gt;
        &lt;ipv4-destination&gt;172.168.5.6/18&lt;/ipv4-destination&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;17&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;8&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;udp-source-port&gt;25364&lt;/udp-source-port&gt;
        &lt;udp-destination-port&gt;8080&lt;/udp-destination-port&gt;
        &lt;in-port&gt;0&lt;/in-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="output-to-any">
<title>Output to ANY</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;flow-name&gt;FooXf109&lt;/flow-name&gt;
    &lt;id&gt;264&lt;/id&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;109&lt;/cookie&gt;
    &lt;table_id&gt;2&lt;/table_id&gt;
    &lt;priority&gt;2&lt;/priority&gt;
    &lt;hard-timeout&gt;1200&lt;/hard-timeout&gt;
    &lt;idle-timeout&gt;3400&lt;/idle-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;ANY&lt;/output-node-connector&gt;
                        &lt;max-length&gt;60&lt;/max-length&gt;
                    &lt;/output-action&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
            &lt;ethernet-destination&gt;
                &lt;address&gt;20:14:29:01:19:61&lt;/address&gt;
            &lt;/ethernet-destination&gt;
            &lt;ethernet-source&gt;
                &lt;address&gt;00:00:00:11:23:ae&lt;/address&gt;
            &lt;/ethernet-source&gt;
        &lt;/ethernet-match&gt;
        &lt;ipv4-source&gt;19.1.2.3/10&lt;/ipv4-source&gt;
        &lt;ipv4-destination&gt;172.168.5.6/18&lt;/ipv4-destination&gt;
        &lt;ip-match&gt;
            &lt;ip-protocol&gt;17&lt;/ip-protocol&gt;
            &lt;ip-dscp&gt;8&lt;/ip-dscp&gt;
            &lt;ip-ecn&gt;3&lt;/ip-ecn&gt;
        &lt;/ip-match&gt;
        &lt;udp-source-port&gt;25364&lt;/udp-source-port&gt;
        &lt;udp-destination-port&gt;8080&lt;/udp-destination-port&gt;
        &lt;in-port&gt;0&lt;/in-port&gt;
    &lt;/match&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="push-vlan">
<title>Push VLAN</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow xmlns="urn:opendaylight:flow:inventory"&gt;
   &lt;strict&gt;false&lt;/strict&gt;
   &lt;instructions&gt;
       &lt;instruction&gt;
           &lt;order&gt;0&lt;/order&gt;
           &lt;apply-actions&gt;
              &lt;action&gt;
                 &lt;push-vlan-action&gt;
                     &lt;ethernet-type&gt;33024&lt;/ethernet-type&gt;
                 &lt;/push-vlan-action&gt;
                 &lt;order&gt;0&lt;/order&gt;
              &lt;/action&gt;
               &lt;action&gt;
                   &lt;set-field&gt;
                       &lt;vlan-match&gt;
                            &lt;vlan-id&gt;
                                &lt;vlan-id&gt;79&lt;/vlan-id&gt;
                                &lt;vlan-id-present&gt;true&lt;/vlan-id-present&gt;
                            &lt;/vlan-id&gt;
                       &lt;/vlan-match&gt;
                   &lt;/set-field&gt;
                   &lt;order&gt;1&lt;/order&gt;
               &lt;/action&gt;
               &lt;action&gt;
                   &lt;output-action&gt;
                       &lt;output-node-connector&gt;5&lt;/output-node-connector&gt;
                   &lt;/output-action&gt;
                   &lt;order&gt;2&lt;/order&gt;
               &lt;/action&gt;
           &lt;/apply-actions&gt;
       &lt;/instruction&gt;
   &lt;/instructions&gt;
   &lt;table_id&gt;0&lt;/table_id&gt;
   &lt;id&gt;31&lt;/id&gt;
   &lt;match&gt;
       &lt;ethernet-match&gt;
           &lt;ethernet-type&gt;
               &lt;type&gt;2048&lt;/type&gt;
           &lt;/ethernet-type&gt;
           &lt;ethernet-destination&gt;
               &lt;address&gt;FF:FF:29:01:19:61&lt;/address&gt;
           &lt;/ethernet-destination&gt;
           &lt;ethernet-source&gt;
               &lt;address&gt;00:00:00:11:23:AE&lt;/address&gt;
           &lt;/ethernet-source&gt;
       &lt;/ethernet-match&gt;
     &lt;in-port&gt;1&lt;/in-port&gt;
   &lt;/match&gt;
   &lt;flow-name&gt;vlan_flow&lt;/flow-name&gt;
   &lt;priority&gt;2&lt;/priority&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="push-mpls">
<title>Push MPLS</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow
    xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;flow-name&gt;push-mpls-action&lt;/flow-name&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;3&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;push-mpls-action&gt;
                        &lt;ethernet-type&gt;34887&lt;/ethernet-type&gt;
                    &lt;/push-mpls-action&gt;
                    &lt;order&gt;0&lt;/order&gt;
                &lt;/action&gt;
                &lt;action&gt;
                    &lt;set-field&gt;
                        &lt;protocol-match-fields&gt;
                            &lt;mpls-label&gt;27&lt;/mpls-label&gt;
                        &lt;/protocol-match-fields&gt;
                    &lt;/set-field&gt;
                    &lt;order&gt;1&lt;/order&gt;
                &lt;/action&gt;
                &lt;action&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;2&lt;/output-node-connector&gt;
                    &lt;/output-action&gt;
                    &lt;order&gt;2&lt;/order&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;id&gt;100&lt;/id&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;2048&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;in-port&gt;1&lt;/in-port&gt;
        &lt;ipv4-destination&gt;10.0.0.4/32&lt;/ipv4-destination&gt;
    &lt;/match&gt;
    &lt;idle-timeout&gt;0&lt;/idle-timeout&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;401&lt;/cookie&gt;
    &lt;priority&gt;8&lt;/priority&gt;
    &lt;hard-timeout&gt;0&lt;/hard-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;table_id&gt;0&lt;/table_id&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="swap-mpls">
<title>Swap MPLS</title>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 34887</simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow
    xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;flow-name&gt;push-mpls-action&lt;/flow-name&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;2&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;set-field&gt;
                        &lt;protocol-match-fields&gt;
                            &lt;mpls-label&gt;37&lt;/mpls-label&gt;
                        &lt;/protocol-match-fields&gt;
                    &lt;/set-field&gt;
                    &lt;order&gt;1&lt;/order&gt;
                &lt;/action&gt;
                &lt;action&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;2&lt;/output-node-connector&gt;
                    &lt;/output-action&gt;
                    &lt;order&gt;2&lt;/order&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;id&gt;101&lt;/id&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34887&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;in-port&gt;1&lt;/in-port&gt;
        &lt;protocol-match-fields&gt;
            &lt;mpls-label&gt;27&lt;/mpls-label&gt;
        &lt;/protocol-match-fields&gt;
    &lt;/match&gt;
    &lt;idle-timeout&gt;0&lt;/idle-timeout&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;cookie&gt;401&lt;/cookie&gt;
    &lt;priority&gt;8&lt;/priority&gt;
    &lt;hard-timeout&gt;0&lt;/hard-timeout&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;table_id&gt;0&lt;/table_id&gt;
&lt;/flow&gt;</programlisting>

</section>
<section xml:id="pop-mpls">
<title>Pop MPLS</title>
<itemizedlist>
<listitem>
<simpara>Note that ethernet-type MUST be 34887</simpara>
</listitem>
<listitem>
<simpara>Issue with OVS 2.1
<link xlink:href="http://git.openvswitch.org/cgi-bin/gitweb.cgi?p=openvswitch;a=commitdiff;h=b3f2fc93e3f357f8d05a92f53ec253339a40887f">OVS
fix</link></simpara>
</listitem>
</itemizedlist>

<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;flow
    xmlns="urn:opendaylight:flow:inventory"&gt;
    &lt;flow-name&gt;FooXf10&lt;/flow-name&gt;
    &lt;instructions&gt;
        &lt;instruction&gt;
            &lt;order&gt;0&lt;/order&gt;
            &lt;apply-actions&gt;
                &lt;action&gt;
                    &lt;pop-mpls-action&gt;
                        &lt;ethernet-type&gt;2048&lt;/ethernet-type&gt;
                    &lt;/pop-mpls-action&gt;
                    &lt;order&gt;1&lt;/order&gt;
                &lt;/action&gt;
                &lt;action&gt;
                    &lt;output-action&gt;
                        &lt;output-node-connector&gt;2&lt;/output-node-connector&gt;
                        &lt;max-length&gt;60&lt;/max-length&gt;
                    &lt;/output-action&gt;
                    &lt;order&gt;2&lt;/order&gt;
                &lt;/action&gt;
            &lt;/apply-actions&gt;
        &lt;/instruction&gt;
    &lt;/instructions&gt;
    &lt;id&gt;11&lt;/id&gt;
    &lt;strict&gt;false&lt;/strict&gt;
    &lt;match&gt;
        &lt;ethernet-match&gt;
            &lt;ethernet-type&gt;
                &lt;type&gt;34887&lt;/type&gt;
            &lt;/ethernet-type&gt;
        &lt;/ethernet-match&gt;
        &lt;in-port&gt;1&lt;/in-port&gt;
        &lt;protocol-match-fields&gt;
            &lt;mpls-label&gt;37&lt;/mpls-label&gt;
        &lt;/protocol-match-fields&gt;
    &lt;/match&gt;
    &lt;idle-timeout&gt;0&lt;/idle-timeout&gt;
    &lt;cookie&gt;889&lt;/cookie&gt;
    &lt;cookie_mask&gt;255&lt;/cookie_mask&gt;
    &lt;installHw&gt;false&lt;/installHw&gt;
    &lt;hard-timeout&gt;0&lt;/hard-timeout&gt;
    &lt;priority&gt;10&lt;/priority&gt;
    &lt;table_id&gt;0&lt;/table_id&gt;
&lt;/flow&gt;</programlisting>

</section>
</section>
</section>
</section>
<section xml:id="_opendaylight_openflow_plugin_troubleshooting">
<title>Opendaylight OpenFlow Plugin: Troubleshooting</title>
<simpara>empty section</simpara>
</section>
</chapter>
<chapter xml:id="_opflex_agent_ovs_user_guide">
<title>OpFlex agent-ovs User Guide</title>
<section xml:id="_introduction_2">
<title>Introduction</title>
<simpara>agent-ovs is a policy agent that works with OVS to enforce a
group-based policy networking model with locally attached virtual
machines or containers. The policy agent is designed to work well with
orchestration tools like OpenStack.</simpara>
</section>
<section xml:id="_agent_configuration">
<title>Agent Configuration</title>
<simpara>The agent configuration is handled using its config file which is by
default found at "/etc/opflex-agent-ovs/opflex-agent-ovs.conf"</simpara>
<simpara>Here is an example configuration file that documents the available
options:</simpara>
<screen>{
    // Logging configuration
    // "log": {
    //    "level": "info"
    // },

    // Configuration related to the OpFlex protocol
    "opflex": {
        // The policy domain for this agent.
        "domain": "openstack",

        // The unique name in the policy domain for this agent.
        "name": "example-agent",

        // a list of peers to connect to, by hostname and port.  One
        // peer, or an anycast pseudo-peer, is sufficient to bootstrap
        // the connection without needing an exhaustive list of all
        // peers.
        "peers": [
            // EXAMPLE:
            {"hostname": "10.0.0.30", "port": 8009}
        ],

        "ssl": {
            // SSL mode.  Possible values:
            // disabled: communicate without encryption
            // encrypted: encrypt but do not verify peers
            // secure: encrypt and verify peer certificates
            "mode": "disabled",

            // The path to a directory containing trusted certificate
            // authority public certificates, or a file containing a
            // specific CA certificate.
            "ca-store": "/etc/ssl/certs/"
        },

        "inspector": {
            // Enable the MODB inspector service, which allows
            // inspecting the state of the managed object database.
	    // Default: enabled
            "enabled": true,

            // Listen on the specified socket for the inspector
	    // Default /var/run/opflex-agent-ovs-inspect.sock
            "socket-name": "/var/run/opflex-agent-ovs-inspect.sock"
        }
    },

    // Endpoint sources provide metadata about local endpoints
    "endpoint-sources": {
        // Filesystem path to monitor for endpoint information
        "filesystem": ["/var/lib/opflex-agent-ovs/endpoints"]
    },

    // Renderers enforce policy obtained via OpFlex.
    "renderers": {
        // Stitched-mode renderer for interoperating with a
        // hardware fabric such as ACI
        // EXAMPLE:
        "stitched-mode": {
            "ovs-bridge-name": "br0",

            // Set encapsulation type.  Must set either vxlan or vlan.
            "encap": {
                // Encapsulate traffic with VXLAN.
                "vxlan" : {
                    // The name of the tunnel interface in OVS
                    "encap-iface": "br0_vxlan0",

                    // The name of the interface whose IP should be used
                    // as the source IP in encapsulated traffic.
                    "uplink-iface": "eth0.4093",

                    // The vlan tag, if any, used on the uplink interface.
                    // Set to zero or omit if the uplink is untagged.
                    "uplink-vlan": 4093,

                    // The IP address used for the destination IP in
                    // the encapsulated traffic.  This should be an
                    // anycast IP address understood by the upstream
                    // stiched-mode fabric.
                    "remote-ip": "10.0.0.32",

                    // UDP port number of the encapsulated traffic.
                    "remote-port": 8472
                }

                // Encapsulate traffic with a locally-significant VLAN
                // tag
                // EXAMPLE:
                // "vlan" : {
                //     // The name of the uplink interface in OVS
                //     "encap-iface": "team0"
                // }
            },

            // Configure forwarding policy
            "forwarding": {
                // Configure the virtual distributed router
                "virtual-router": {
                    // Enable virtual distributed router.  Set to true
                    // to enable or false to disable.  Default true.
                    "enabled": true,

                    // Override MAC address for virtual router.
                    // Default is "00:22:bd:f8:19:ff"
                    "mac": "00:22:bd:f8:19:ff",

                    // Configure IPv6-related settings for the virtual
                    // router
                    "ipv6" : {
                        // Send router advertisement messages in
                        // response to router solicitation requests as
                        // well as unsolicited advertisements.  This
                        // is not required in stitched mode since the
                        // hardware router will send them.
                        "router-advertisement": true
                    }
                },

                // Configure virtual distributed DHCP server
                "virtual-dhcp": {
                    // Enable virtual distributed DHCP server.  Set to
                    // true to enable or false to disable.  Default
                    // true.
                    "enabled": true,

                    // Override MAC address for virtual dhcp server.
                    // Default is "00:22:bd:f8:19:ff"
                    "mac": "00:22:bd:f8:19:ff"
                },

                "endpoint-advertisements": {
                    // Enable generation of periodic ARP/NDP
                    // advertisements for endpoints.  Default true.
                    "enabled": "true"
                }
            },

            // Location to store cached IDs for managing flow state
            "flowid-cache-dir": "/var/lib/opflex-agent-ovs/ids"
        }
    }
}</screen>

</section>
<section xml:id="_endpoint_registration">
<title>Endpoint Registration</title>
<simpara>The agent learns about endpoints using endpoint metadata files located
by default in "/var/lib/opflex-agent-ovs/endpoints".</simpara>
<simpara>These are JSON-format files such as the (unusually complex) example
below:</simpara>
<screen>{
    "uuid": "83f18f0b-80f7-46e2-b06c-4d9487b0c754",
    "policy-space-name": "test",
    "endpoint-group-name": "group1",
    "interface-name": "veth0",
    "ip": [
        "10.0.0.1", "fd8f:69d8:c12c:ca62::1"
    ],
    "dhcp4": {
        "ip": "10.200.44.2",
        "prefix-len": 24,
        "routers": ["10.200.44.1"],
        "dns-servers": ["8.8.8.8", "8.8.4.4"],
        "domain": "example.com",
        "static-routes": [
            {
                "dest": "169.254.169.0",
                "dest-prefix": 24,
                "next-hop": "10.0.0.1"
            }
        ]
    },
    "dhcp6": {
        "dns-servers": ["2001:4860:4860::8888", "2001:4860:4860::8844"],
        "search-list": ["test1.example.com", "example.com"]
    },
    "ip-address-mapping": [
        {
           "uuid": "91c5b217-d244-432c-922d-533c6c036ab4",
           "floating-ip": "5.5.5.1",
           "mapped-ip": "10.0.0.1",
           "policy-space-name": "common",
           "endpoint-group-name": "nat-epg"
        },
        {
           "uuid": "22bfdc01-a390-4b6f-9b10-624d4ccb957b",
           "floating-ip": "fdf1:9f86:d1af:6cc9::1",
           "mapped-ip": "fd8f:69d8:c12c:ca62::1",
           "policy-space-name": "common",
           "endpoint-group-name": "nat-epg"
        }
    ],
    "mac": "00:00:00:00:00:01",
    "promiscuous-mode": false
}</screen>

<simpara>The possible parameters for these files are:</simpara>
<variablelist>
<varlistentry>
<term><emphasis role="strong">uuid</emphasis></term>
<listitem>
<simpara>A globally unique ID for the endpoint</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">endpoint-group-name</emphasis></term>
<listitem>
<simpara>The name of the endpoint group for the endpoint</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">policy-space-name</emphasis></term>
<listitem>
<simpara>The name of the policy space for the endpoint group.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">interface-name</emphasis></term>
<listitem>
<simpara>The name of the OVS interface to which the endpoint
is attached</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">ip</emphasis></term>
<listitem>
<simpara>A list of strings contains either IPv4 or IPv6 addresses that the
endpoint is allowed to use</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">mac</emphasis></term>
<listitem>
<simpara>The MAC address for the endpoint&#8217;s interface.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">promiscuous-mode</emphasis></term>
<listitem>
<simpara>Allow traffic from this VM to bypass default port
security</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">dhcp4</emphasis></term>
<listitem>
<simpara>A distributed DHCPv4 configuration block (see below)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">dhcp6</emphasis></term>
<listitem>
<simpara>A distributed DHCPv6 configuration block (see below)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">ip-address-mapping</emphasis></term>
<listitem>
<simpara>A list of IP address mapping configuration blocks (see below)</simpara>
</listitem>
</varlistentry>
</variablelist>

<simpara>DHCPv4 configuration blocks can contain the following parameters:</simpara>
<variablelist>
<varlistentry>
<term><emphasis role="strong">ip</emphasis></term>
<listitem>
<simpara>the IP address to return with DHCP.  Must be one of the
configured IPv4 addresses.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">prefix</emphasis></term>
<listitem>
<simpara>the subnet prefix length</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">routers</emphasis></term>
<listitem>
<simpara>a list of default gateways for the endpoint</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">dns</emphasis></term>
<listitem>
<simpara>a list of DNS server addresses</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">domain</emphasis></term>
<listitem>
<simpara>The domain name parameter to send in the DHCP reply</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">static-routes</emphasis></term>
<listitem>
<simpara>A list of static route configuration blocks, which
contains a "dest", "dest-prefix", and "next-hop" parameters to send as
static routes to the end host</simpara>
</listitem>
</varlistentry>
</variablelist>

<simpara>DHCPv6 configuration blocks can contain the following parameters:</simpara>
<variablelist>
<varlistentry>
<term><emphasis role="strong">dns</emphasis></term>
<listitem>
<simpara>A list of DNS servers for the endpoint</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">search-patch</emphasis></term>
<listitem>
<simpara>The DNS search path for the endpoint</simpara>
</listitem>
</varlistentry>
</variablelist>

<simpara>IP address mapping configuration blocks can contain the following
parameters:</simpara>
<variablelist>
<varlistentry>
<term><emphasis role="strong">uuid</emphasis></term>
<listitem>
<simpara>a globally unique ID for the virtual endpoint created by the
mapping.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">floating-ip</emphasis></term>
<listitem>
<simpara>Map using DNAT to this floating IPv4 or IPv6 address</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">mapped-ip</emphasis></term>
<listitem>
<simpara>the source IPv4 or IPv6 address; must be one of the IPs
assigned to the endpoint.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">endpoint-group-name</emphasis></term>
<listitem>
<simpara>The name of the endpoint group for the NATed IP</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">policy-space-name</emphasis></term>
<listitem>
<simpara>The name of the policy space for the NATed IP</simpara>
</listitem>
</varlistentry>
</variablelist>

</section>
<section xml:id="_inspector">
<title>Inspector</title>
<simpara>The Opflex inspector is a useful command-line tool that will allow you
to inspect the state of the managed object database for the agent for
debugging and diagnosis purposes.</simpara>
<simpara>The command is called "gbp_inspect" and takes the following arguments:</simpara>
<screen># gbp_inspect -h
Usage: ./gbp_inspect [options]
Allowed options:
  -h [ --help ]                         Print this help message
  --log arg                             Log to the specified file (default
                                        standard out)
  --level arg (=warning)                Use the specified log level (default
                                        info)
  --syslog                              Log to syslog instead of file or
                                        standard out
  --socket arg (=/usr/local/var/run/opflex-agent-ovs-inspect.sock)
                                        Connect to the specified UNIX domain
                                        socket (default /usr/local/var/run/opfl
                                        ex-agent-ovs-inspect.sock)
  -q [ --query ] arg                    Query for a specific object with
                                        subjectname,uri or all objects of a
                                        specific type with subjectname
  -r [ --recursive ]                    Retrieve the whole subtree for each
                                        returned object
  -f [ --follow-refs ]                  Follow references in returned objects
  --load arg                            Load managed objects from the specified
                                        file into the MODB view
  -o [ --output ] arg                   Output the results to the specified
                                        file (default standard out)
  -t [ --type ] arg (=tree)             Specify the output format: tree, list,
                                        or dump (default tree)
  -p [ --props ]                        Include object properties in output</screen>

<simpara>Here are some examples of the ways to use this tool.</simpara>
<simpara>You can get information about the running system using one or more
queries, which consist of an object model class name and optionally
the URI of a specific object.  The simplest query is to get a single
object, nonrecursively:</simpara>
<screen># gbp_inspect -q DmtreeRoot
--* DmtreeRoot,/
# gbp_inspect -q GbpEpGroup
--* GbpEpGroup,/PolicyUniverse/PolicySpace/common/GbpEpGroup/nat-epg/
--* GbpEpGroup,/PolicyUniverse/PolicySpace/test/GbpEpGroup/group1/
# gbp_inspect -q GbpEpGroup,/PolicyUniverse/PolicySpace/common/GbpEpGroup/nat-epg/
--* GbpEpGroup,/PolicyUniverse/PolicySpace/common/GbpEpGroup/nat-epg/</screen>

<simpara>You can also display all the properties for each object:</simpara>
<screen># gbp_inspect -p -q GbpeL24Classifier
--* GbpeL24Classifier,/PolicyUniverse/PolicySpace/test/GbpeL24Classifier/classifier4/
     {
       connectionTracking : 1 (reflexive)
       dFromPort          : 80
       dToPort            : 80
       etherT             : 2048 (ipv4)
       name               : classifier4
       prot               : 6
     }
--* GbpeL24Classifier,/PolicyUniverse/PolicySpace/test/GbpeL24Classifier/classifier3/
     {
       etherT : 34525 (ipv6)
       name   : classifier3
       order  : 100
       prot   : 58
     }
--* GbpeL24Classifier,/PolicyUniverse/PolicySpace/test/GbpeL24Classifier/classifier2/
     {
       etherT : 2048 (ipv4)
       name   : classifier2
       order  : 101
       prot   : 1
     }</screen>

<simpara>You can also request to get the all the children of an object you query for:</simpara>
<screen># gbp_inspect -r -q GbpEpGroup,/PolicyUniverse/PolicySpace/common/GbpEpGroup/nat-epg/
--* GbpEpGroup,/PolicyUniverse/PolicySpace/common/GbpEpGroup/nat-epg/
  |-* GbpeInstContext,/PolicyUniverse/PolicySpace/common/GbpEpGroup/nat-epg/GbpeInstContext/
  `-* GbpEpGroupToNetworkRSrc,/PolicyUniverse/PolicySpace/common/GbpEpGroup/nat-epg/GbpEpGroupToNetworkRSrc/</screen>

<simpara>You can also follow references found in any object downloads:</simpara>
<screen># gbp_inspect -fr -q GbpEpGroup,/PolicyUniverse/PolicySpace/common/GbpEpGroup/nat-epg/
--* GbpEpGroup,/PolicyUniverse/PolicySpace/common/GbpEpGroup/nat-epg/
  |-* GbpeInstContext,/PolicyUniverse/PolicySpace/common/GbpEpGroup/nat-epg/GbpeInstContext/
  `-* GbpEpGroupToNetworkRSrc,/PolicyUniverse/PolicySpace/common/GbpEpGroup/nat-epg/GbpEpGroupToNetworkRSrc/
--* GbpFloodDomain,/PolicyUniverse/PolicySpace/common/GbpFloodDomain/fd_ext/
  `-* GbpFloodDomainToNetworkRSrc,/PolicyUniverse/PolicySpace/common/GbpFloodDomain/fd_ext/GbpFloodDomainToNetworkRSrc/
--* GbpBridgeDomain,/PolicyUniverse/PolicySpace/common/GbpBridgeDomain/bd_ext/
  `-* GbpBridgeDomainToNetworkRSrc,/PolicyUniverse/PolicySpace/common/GbpBridgeDomain/bd_ext/GbpBridgeDomainToNetworkRSrc/
--* GbpRoutingDomain,/PolicyUniverse/PolicySpace/common/GbpRoutingDomain/rd_ext/
  |-* GbpRoutingDomainToIntSubnetsRSrc,/PolicyUniverse/PolicySpace/common/GbpRoutingDomain/rd_ext/GbpRoutingDomainToIntSubnetsRSrc/122/%2fPolicyUniverse%2fPolicySpace%2fcommon%2fGbpSubnets%2fsubnets_ext%2f/
  `-* GbpForwardingBehavioralGroupToSubnetsRSrc,/PolicyUniverse/PolicySpace/common/GbpRoutingDomain/rd_ext/GbpForwardingBehavioralGroupToSubnetsRSrc/
--* GbpSubnets,/PolicyUniverse/PolicySpace/common/GbpSubnets/subnets_ext/
  |-* GbpSubnet,/PolicyUniverse/PolicySpace/common/GbpSubnets/subnets_ext/GbpSubnet/subnet_ext4/
  `-* GbpSubnet,/PolicyUniverse/PolicySpace/common/GbpSubnets/subnets_ext/GbpSubnet/subnet_ext6/</screen>

</section>
</chapter>
<chapter xml:id="_pcep_user_guide">
<title>PCEP User Guide</title>
<section xml:id="_overview_28">
<title>Overview</title>
<simpara>The OpenDaylight Karaf distribution comes preconfigured with baseline PCEP configuration.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">32-pcep.xml</emphasis> (basic PCEP configuration, including session parameters)</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">39-pcep-provider.xml</emphasis> (configuring for PCEP provider)</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_configuring_pcep">
<title>Configuring PCEP</title>
<simpara>The default shipped configuration will start a PCE server on 0.0.0.0:4189. You can change this behavior in <emphasis role="strong">39-pcep-provider.xml</emphasis>:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module&gt;
 &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:pcep:topology:provider"&gt;prefix:pcep-topology-provider&lt;/type&gt;
 &lt;name&gt;pcep-topology&lt;/name&gt;
 &lt;listen-address&gt;192.168.122.55&lt;/listen-address&gt;
 &lt;listen-port&gt;4189&lt;/listen-port&gt;
...
&lt;/module&gt;</programlisting>

<itemizedlist>
<listitem>
<simpara><emphasis role="strong">listen-address</emphasis> - adress on which PCE will be started and listen</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">listen-port</emphasis> - port on which the address will be started and listen</simpara>
</listitem>
</itemizedlist>

<simpara>PCEP default configuration is set to conform stateful PCEP extension:</simpara>
<simpara><link xlink:href="http://tools.ietf.org/html/draft-ietf-pce-stateful-pce">draft-ietf-pce-stateful-pce</link> - in versions 02 and 07</simpara>
<section xml:id="_pcep_segment_routing">
<title>PCEP Segment Routing</title>
<simpara>Conforms <link xlink:href="http://tools.ietf.org/html/draft-ietf-pce-segment-routing-01">draft-eitf-pce-segment-routing</link> - PCEP extension for Segment Routing</simpara>
<simpara>The default configuration file is located in etc/opendaylight/karaf.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">33-pcep-segment-routing.xml</emphasis> - You don&#8217;t need to edit this file.</simpara>
</listitem>
</itemizedlist>

</section>
</section>
</chapter>
<chapter xml:id="_packetcable_user_guide">
<title>PacketCable User Guide</title>
<section xml:id="_overview_29">
<title>Overview</title>
<simpara>These components introduce a DOCSIS QoS Gates management using
the PCMM protocol. The driver component is responsible for the
PCMM/COPS/PDP functionality required to service requests from
PacketCable Provider and FlowManager. Requests are transposed into PCMM
Gate Control messages and transmitted via COPS to the CMTS. This plugin
adheres to the PCMM/COPS/PDP functionality defined in the CableLabs
specification. PacketCable solution is an MDSAL compliant component.</simpara>
</section>
<section xml:id="_packetcable_components">
<title>PacketCable Components</title>
<simpara>PacketCable is comprised of two OpenDaylight bundles:</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="50*"/>
    
    <colspec colname="col_2" colwidth="50*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Bundle</entry>
        
        <entry align="left" valign="top">Description</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>odl-packetcable-policy-server</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Plugin that provides PCMM model implementation based on CMTS structure and COPS protocol.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>odl-packetcable-policy-model</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The Model provided provides a direct mapping to the underlying QoS Gates of CMTS.</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<simpara>See the PacketCable
<link xlink:href="https://git.opendaylight.org/gerrit/gitweb?p=packetcable.git;a=tree;f=packetcable-policy-model/src/main/yang">YANG
Models</link>.</simpara>
</section>
<section xml:id="_installing_packetcable">
<title>Installing PacketCable</title>
<simpara>To install PacketCable, run the following <literal>feature:install</literal> command from the Karaf CLI</simpara>

<literallayout class="monospaced">feature:install odl-packetcable-policy-server-all odl-restconf odl-mdsal-apidocs</literallayout>


</section>
<section xml:id="_explore_and_exercise_the_packetcable_rest_api">
<title>Explore and exercise the PacketCable REST API</title>
<simpara>To see the PacketCable APIs, browse to this URL:
<link xlink:href="http://localhost:8181/apidoc/explorer/index.html">http://localhost:8181/apidoc/explorer/index.html</link></simpara>
<simpara>Replace localhost with the IP address or hostname where OpenDaylight is running if you are not running OpenDaylight locally on your machine.</simpara>
<note>
<simpara>Prior to setting any PCMM gates, a CCAP must first be added.</simpara>
</note>

</section>
<section xml:id="_postman">
<title>Postman</title>
<simpara><link xlink:href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en">Install
the Chrome extension</link></simpara>
<simpara><link xlink:href="https://git.opendaylight.org/gerrit/gitweb?p=packetcable.git;a=tree;f=packetcable-policy-server/doc/restconf-samples">Download
and import sample packetcable collection</link></simpara>
<figure>
<title>Postman Operations</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/Screenshot5.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>Screenshot5</phrase></textobject>
  </mediaobject>
</figure>

</section>
</chapter>
<chapter xml:id="_service_function_chaining">
<title>Service Function Chaining</title>
<section xml:id="_opendaylight_service_function_chaining_sfc_overiew">
<title>OpenDaylight Service Function Chaining (SFC) Overiew</title>
<simpara>OpenDaylight Service Function Chaining (SFC) provides the ability to define an ordered list of a network services (e.g. firewalls, load balancers). These service are then "stitched" together in the network to create a service chain. This project provides the infrastructure (chaining logic, APIs) needed for ODL to provision a service chain in the network and an end-user application for defining such chains.</simpara>
<itemizedlist>
<title>List of acronyms:</title>
<listitem>
<simpara>ACE - Access Control Entry</simpara>
</listitem>
<listitem>
<simpara>ACL - Access Control List</simpara>
</listitem>
<listitem>
<simpara>SCF - Service Classifier Function</simpara>
</listitem>
<listitem>
<simpara>SF - Service Function</simpara>
</listitem>
<listitem>
<simpara>SFC - Service Function Chain</simpara>
</listitem>
<listitem>
<simpara>SFF - Service Function Forwarder</simpara>
</listitem>
<listitem>
<simpara>SFG - Service Function Group</simpara>
</listitem>
<listitem>
<simpara>SFP - Service Function Path</simpara>
</listitem>
<listitem>
<simpara>RSP - Rendered Service Path</simpara>
</listitem>
<listitem>
<simpara>NSH - Network Service Header</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_sfc_user_interface">
<title>SFC User Interface</title>
<section xml:id="_overview_30">
<title>Overview</title>
<simpara>SFC User Interface (SFC-UI) is based on Dlux project. It provides an easy way
to create, read, update and delete configuration stored in Datastore. Moreover,
it shows the status of all SFC features (e.g installed, uninstalled) and
Karaf log messages as well.</simpara>
</section>
<section xml:id="_sfc_ui_architecture">
<title>SFC-UI Architecture</title>
<simpara>SFC-UI operates purely by using RESTCONF.</simpara>
<figure>
<title>SFC-UI integration into ODL</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/sfc/sfc-ui-architecture.png" contentwidth="250"/>
    </imageobject>
    <textobject><phrase>sfc ui architecture</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_configuring_sfc_ui">
<title>Configuring SFC-UI</title>
<orderedlist numeration="arabic">
<title>Configuration steps</title>
<listitem>
<simpara>Run ODL distribution (run karaf)</simpara>
</listitem>
<listitem>
<simpara>In karaf console execute: <literal>feature:install odl-sfc-ui</literal></simpara>
</listitem>
<listitem>
<simpara>Visit SFC-UI on: <literal><link xlink:href="http://&lt;odl_ip_address&gt;:8181/sfc/index.html">http://&lt;odl_ip_address&gt;:8181/sfc/index.html</link></literal></simpara>
</listitem>
</orderedlist>

</section>
</section>
<section xml:id="_sfc_southbound_rest_plugin">
<title>SFC Southbound REST Plugin</title>
<section xml:id="_overview_31">
<title>Overview</title>
<simpara>The Southbound REST Plugin is used to send configuration from DataStore down to
network devices supporting a REST API (i.e. they have a configured REST URI).
It supports POST/PUT/DELETE operations, which are triggered accordingly by
changes in the SFC data stores.</simpara>
<itemizedlist>
<title>In its current state it listens to changes in these SFC data stores:</title>
<listitem>
<simpara>Access Control List (ACL)</simpara>
</listitem>
<listitem>
<simpara>Service Classifier Function (SCF)</simpara>
</listitem>
<listitem>
<simpara>Service Function (SF)</simpara>
</listitem>
<listitem>
<simpara>Service Function Group (SFG)</simpara>
</listitem>
<listitem>
<simpara>Service Function Schedule Type (SFST)</simpara>
</listitem>
<listitem>
<simpara>Service Function Forwader (SFF)</simpara>
</listitem>
<listitem>
<simpara>Rendered Service Path (RSP)</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_southbound_rest_plugin_architecture">
<title>Southbound REST Plugin Architecture</title>
<simpara>From the user perspective, the REST plugin is another SFC Southbound plugin
used to communicate with network devices.</simpara>
<figure>
<title>Soutbound REST Plugin integration into ODL</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/sfc/sb-rest-architecture-user.png" contentwidth="250"/>
    </imageobject>
    <textobject><phrase>sb rest architecture user</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_configuring_southbound_rest_plugin">
<title>Configuring Southbound REST Plugin</title>
<orderedlist numeration="arabic">
<title>Configuration steps:</title>
<listitem>
<simpara>Run ODL distribution (run karaf)</simpara>
</listitem>
<listitem>
<simpara>In karaf console execute: <literal>feature:install odl-sfc-sb-rest</literal></simpara>
</listitem>
<listitem>
<simpara>Configure REST URIs for SF/SFF through SFC User Interface or RESTCONF
(required configuration steps can be found in the tutorial stated bellow)</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_tutorial">
<title>Tutorial</title>
<simpara>Comprehensive tutorial on how to use the Southbound REST Plugin and how to
control network devices with it can be found on:
<link xlink:href="https://wiki.opendaylight.org/view/Service_Function_Chaining:Main#SFC_101">https://wiki.opendaylight.org/view/Service_Function_Chaining:Main#SFC_101</link></simpara>
</section>
</section>
<section xml:id="_sfc_ovs_integration">
<title>SFC-OVS integration</title>
<section xml:id="_overview_32">
<title>Overview</title>
<simpara>SFC-OVS provides integration of SFC with Open vSwitch (OVS) devices.
Integration is realized through mapping of SFC objects (like SF, SFF,
Classifier, etc.) to OVS objects (like Bridge, TerminationPoint=Port/Interface).
The mapping takes care of automatic instantiation (setup) of corresponding object
whenever its counterpart is created. For example, when a new SFF is created,
the SFC-OVS plugin will create a new OVS bridge and when a new OVS Bridge is
created, the SFC-OVS plugin will create a new SFF.</simpara>
<simpara>The feature is intended for SFC users willing to use Open vSwitch as underlying
network infrastructure for deploying RSPs (Rendered Service Paths).</simpara>
</section>
<section xml:id="_sfc_ovs_architecture">
<title>SFC-OVS Architecture</title>
<simpara>SFC-OVS uses the OVSDB MD-SAL Southbound API for getting/writing information
from/to OVS devices. From the user perspective SFC-OVS acts as a layer between
SFC DataStore and OVSDB.</simpara>
<figure>
<title>SFC-OVS integration into ODL</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/sfc/sfc-ovs-architecture-user.png" contentwidth="250"/>
    </imageobject>
    <textobject><phrase>sfc ovs architecture user</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_configuring_sfc_ovs">
<title>Configuring SFC-OVS</title>
<orderedlist numeration="arabic">
<title>Configuration steps:</title>
<listitem>
<simpara>Run ODL distribution (run karaf)</simpara>
</listitem>
<listitem>
<simpara>In karaf console execute: <literal>feature:install odl-sfc-ovs</literal></simpara>
</listitem>
<listitem>
<simpara>Configure Open vSwitch to use ODL as a manager, using following command:
<literal>ovs-vsctl set-manager tcp:&lt;odl_ip_address&gt;:6640</literal></simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_tutorials_8">
<title>Tutorials</title>
<section xml:id="_verifying_mapping_from_ovs_to_sff">
<title>Verifying mapping from OVS to SFF</title>
<section xml:id="_overview_33">
<title>Overview</title>
<simpara>This tutorial shows the usual workflow when OVS configuration is transformed to
corresponding SFC objects (in this case SFF).</simpara>
</section>
<section xml:id="_prerequisities">
<title>Prerequisities</title>
<itemizedlist>
<listitem>
<simpara>Open vSwitch installed (ovs-vsctl command available in shell)</simpara>
</listitem>
<listitem>
<simpara>SFC-OVS feature configured as stated above</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_instructions_9">
<title>Instructions</title>
<orderedlist numeration="arabic">
<title>In shell execute:</title>
<listitem>
<simpara><literal>ovs-vsctl set-manager tcp:&lt;odl_ip_address&gt;:6640</literal></simpara>
</listitem>
<listitem>
<simpara><literal>ovs-vsctl add-br br1</literal></simpara>
</listitem>
<listitem>
<simpara><literal>ovs-vsctl add-port br1 testPort</literal></simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_verification">
<title>Verification</title>
<orderedlist numeration="loweralpha">
<title>There are two possible ways to verify if SFF was created:</title>
<listitem>
<simpara>visit SFC User Interface:
<literal><link xlink:href="http://&lt;odl_ip_address&gt;:8181/sfc/index.html#/sfc/serviceforwarder">http://&lt;odl_ip_address&gt;:8181/sfc/index.html#/sfc/serviceforwarder</link></literal></simpara>
</listitem>
<listitem>
<simpara>use pure RESTCONF and send GET request to URL:
<literal><link xlink:href="http://&lt;odl_ip_address&gt;:8181/restconf/config/service-function-forwarder:service-function-forwarders">http://&lt;odl_ip_address&gt;:8181/restconf/config/service-function-forwarder:service-function-forwarders</link></literal></simpara>
</listitem>
</orderedlist>

<simpara>There should be SFF, which name will be ending with <emphasis>br1</emphasis> and the SFF should
containt two DataPlane locators: <emphasis>br1</emphasis> and <emphasis>testPort</emphasis>.</simpara>
</section>
</section>
<section xml:id="_verifying_mapping_from_sff_to_ovs">
<title>Verifying mapping from SFF to OVS</title>
<section xml:id="_overview_34">
<title>Overview</title>
<simpara>This tutorial shows the usual workflow during creation of OVS Bridge with use
of SFC APIs.</simpara>
</section>
<section xml:id="_prerequisities_2">
<title>Prerequisities</title>
<itemizedlist>
<listitem>
<simpara>Open vSwitch installed (ovs-vsctl command available in shell)</simpara>
</listitem>
<listitem>
<simpara>SFC-OVS feature configured as stated above</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_instructions_10">
<title>Instructions</title>
<orderedlist numeration="arabic">
<title>Steps:</title>
<listitem>
<simpara>In shell execute: <literal>ovs-vsctl set-manager tcp:&lt;odl_ip_address&gt;:6640</literal></simpara>
</listitem>
<listitem>
<simpara>Send POST request to URL:
<literal><link xlink:href="http://&lt;odl_ip_address&gt;:8181/restconf/operations/service-function-forwarder-ovs:create-ovs-bridge">http://&lt;odl_ip_address&gt;:8181/restconf/operations/service-function-forwarder-ovs:create-ovs-bridge</link></literal>
Use Basic auth with credentials: "admin", "admin" and set <literal>Content-Type: application/json</literal>.
The content of POST request should be following:</simpara>
</listitem>
</orderedlist>

<screen>{
    "input":
    {
        "name": "br-test",
        "ovs-node": {
            "ip": "&lt;Open_vSwitch_ip_address&gt;"
        }
    }
}</screen>

<simpara>Open_vSwitch_ip_address is IP address of machine, where Open vSwitch is installed.</simpara>
</section>
<section xml:id="_verification_2">
<title>Verification</title>
<simpara>In shell execute: <literal>ovs-vsctl show</literal>. There should be Bridge with name <emphasis>br-test</emphasis>
and one port/interface called <emphasis>br-test</emphasis>.</simpara>
<simpara>Also, corresponding SFF for this OVS Bridge should be configured, which can be
verified through SFC User Interface or RESTCONF as stated in previous tutorial.</simpara>
</section>
</section>
</section>
</section>
<section xml:id="_sfc_classifier_user_guide">
<title>SFC Classifier User Guide</title>
<section xml:id="_overview_35">
<title>Overview</title>
<simpara>Description of classifier can be found in: <link xlink:href="https://datatracker.ietf.org/doc/draft-ietf-sfc-architecture/">https://datatracker.ietf.org/doc/draft-ietf-sfc-architecture/</link></simpara>
<simpara>There are two types of classifier:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>OpenFlow Classifier</simpara>
</listitem>
<listitem>
<simpara>Iptables Classifier</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_openflow_classifier">
<title>OpenFlow Classifier</title>
<simpara>OpenFlow Classifier implements the classification criteria based on OpenFlow rules deployed into an OpenFlow switch. An Open vSwitch will take the role of a classifier and performs various encapsulations such NSH, VLAN, MPLS, etc. In the existing implementation, classifier can support NSH encapsulation. Matching information is based on ACL for MAC addresses, ports, protocol, IPv4 and IPv6. Supported protocols are TCP, UDP and SCTP. Actions information in the OF rules, shall be forwarding of the encapsulated packets with specific information related to the RSP.</simpara>
<section xml:id="_classifier_architecture">
<title>Classifier Architecture</title>
<simpara>The OVSDB Southbound interface is used to create an instance of a bridge in a specific location (via IP address). This bridge contains the OpenFlow rules that perform the classification of the packets and react accordingly. The OpenFlow Southbound interface is used to translate the ACL information into OF rules within the Open vSwitch.</simpara>
<note>
<simpara>in order to create the instance of the bridge that takes the role of a classifier, an "empty" SFF must be created.</simpara>
</note>

</section>
<section xml:id="_configuring_classifier">
<title>Configuring Classifier</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>An empty SFF must be created in order to host the ACL that contains the classification information.</simpara>
</listitem>
<listitem>
<simpara>SFF data plane locator must be configured</simpara>
</listitem>
<listitem>
<simpara>Classifier interface must be mannually added to SFF bridge.</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_administering_or_managing_classifier">
<title>Administering or Managing Classifier</title>
<simpara>Classification information is based on MAC addresses, protocol, ports and IP. ACL gathers this information and is assigned to an RSP which turns to be a specific path for a Service Chain.</simpara>
</section>
</section>
<section xml:id="_iptables_classifier">
<title>Iptables Classifier</title>
<simpara>Classifier manages everything from starting the packet listener to creation (and removal) of appropriate ip(6)tables rules and marking received packets accordingly. Its functionality is <emphasis role="strong">available only on Linux</emphasis> as it leverdges <emphasis role="strong">NetfilterQueue</emphasis>, which provides access to packets matched by an <emphasis role="strong">iptables</emphasis> rule. Classifier requires <emphasis role="strong">root privileges</emphasis> to be able to operate.</simpara>
<simpara>So far it is capable of processing ACL for MAC addresses, ports, IPv4 and IPv6. Supported protocols are TCP and UDP.</simpara>
<section xml:id="_classifier_architecture_2">
<title>Classifier Architecture</title>
<simpara>Python code located in the project repository sfc-py/common/classifier.py.</simpara>
<note>
<simpara>classifier assumes that Rendered Service Path (RSP) <emphasis role="strong">already exists</emphasis> in ODL when an ACL referencing it is obtained</simpara>
</note>

<orderedlist numeration="arabic">
<title>How it works:</title>
<listitem>
<simpara>sfc_agent receives an ACL and passes it for processing to the classifier</simpara>
</listitem>
<listitem>
<simpara>the RSP (its SFF locator) referenced by ACL is requested from ODL</simpara>
</listitem>
<listitem>
<simpara>if the RSP exists in the ODL then ACL based iptables rules for it are applied</simpara>
</listitem>
</orderedlist>

<simpara>After this process is over, every packet successfully matched to an iptables rule (i.e. successfully classified) will be NSH encapsulated and forwarded to a related SFF, which knows how to traverse the RSP.</simpara>
<simpara>Rules are created using appropriate iptables command. If the Access Control Entry (ACE) rule is MAC address related both iptables and ip6tabeles rules re issued. If ACE rule is IPv4 address related, only iptables rules are issued, same for IPv6.</simpara>
<note>
<simpara>iptables <emphasis role="strong">raw</emphasis> table contains all created rules</simpara>
</note>

</section>
<section xml:id="_configuring_classifier_2">
<title>Configuring Classifier</title>
<simpara>Classfier does&#8217;t need any configuration.<?asciidoc-br?>
Its only requirement is that the <emphasis role="strong">second (2) Netfilter Queue</emphasis> is not used by any other process and is <emphasis role="strong">avalilable for the classifier</emphasis>.</simpara>
</section>
<section xml:id="_administering_or_managing_classifier_2">
<title>Administering or Managing Classifier</title>
<simpara>Classfier runs alongside sfc_agent, therefore the commad for starting it locally is:</simpara>

<literallayout class="monospaced">sudo python3.4 sfc-py/sfc_agent.py --rest --odl-ip-port localhost:8181 --auto-sff-name --nfq-class</literallayout>


</section>
</section>
</section>
<section xml:id="_sfc_openflow_layer_2_renderer_user_guide">
<title>SFC OpenFlow Layer 2 Renderer User Guide</title>
<section xml:id="_overview_36">
<title>Overview</title>
<simpara>The Service Function Chaining (SFC) OpenFlow Layer 2 Renderer (SFCOFL2)
implements Service Chaining on OpenFlow switches. It listens for the
creation of a Rendered Service Path (RSP), and once received it programs
Service Function Forwarders (SFF) that are hosted on OpenFlow capable
switches to steer packets through the service chain.</simpara>
<simpara>Common acronyms used in the following sections:</simpara>
<itemizedlist>
<listitem>
<simpara>SF - Service Function</simpara>
</listitem>
<listitem>
<simpara>SFF - Service Function Forwarder</simpara>
</listitem>
<listitem>
<simpara>SFC - Service Function Chain</simpara>
</listitem>
<listitem>
<simpara>SFP - Service Function Path</simpara>
</listitem>
<listitem>
<simpara>RSP - Rendered Service Path</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_sfc_openflow_renderer_architecture">
<title>SFC OpenFlow Renderer Architecture</title>
<simpara>The SFCOFL2 is invoked after a RSP is created using an MD-SAL listener
called <literal>SfcL2RspDataListener</literal>. Upon SFCOFL2 initialization, the
<literal>SfcL2RspDataListener</literal> registers itself to listen for RSP changes.
When invoked, the <literal>SfcL2RspDataListener</literal> processes the RSP and calls
the <literal>SfcL2FlowProgrammerOFImpl</literal> to create the necessary flows in the
Service Function Forwarders configured in the RSP. Refer to the
following diagram for more details.</simpara>
<figure>
<title>SFC OpenFlow Renderer High Level Architecture</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/sfc/sfcofl2_architecture.jpg" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>SFC OpenFlow Renderer High Level Architecture</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_sfc_openflow_switch_flow_pipeline">
<title>SFC OpenFlow Switch Flow pipeline</title>
<simpara>The SFC OpenFlow Renderer uses the following tables for its Flow pipeline:</simpara>
<itemizedlist>
<listitem>
<simpara>Table 0, Transport Ingress</simpara>
</listitem>
<listitem>
<simpara>Table 1, Path Mapper</simpara>
</listitem>
<listitem>
<simpara>Table 2,  Next Hop</simpara>
</listitem>
<listitem>
<simpara>Table 10, Transport Egress</simpara>
</listitem>
</itemizedlist>

<simpara>The OpenFlow Table Pipeline is intended to be generic to work for
all of the different encapsulations supported by SFC.</simpara>
<simpara>All of the tables are explained in detail in the following section.</simpara>
<simpara>The SFFs (SFF1 and SFF2), SFs (SF1), and topology used for the flow
tables in the following sections are as described in the following
diagram.</simpara>
<figure>
<title>SFC OpenFlow Renderer Typical Network Topology</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/sfc/sfcofl2_architecture_nwtopo.jpg" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>SFC OpenFlow Renderer Typical Network Topology</phrase></textobject>
  </mediaobject>
</figure>

<section xml:id="_transport_ingress_table_detailed">
<title>Transport Ingress Table detailed</title>
<simpara>The Transport Ingress table has an entry per expected tunnel transport
type to be received in a particular SFF, as established in the SFC
configuration.</simpara>
<simpara>Here is an example on SFF1, assuming VLAN is used for the SFF-SF, and the RSP
tunnel is MPLS:</simpara>
<table frame="all"
    rowsep="1" colsep="1">
<title>Table Transport Ingress</title>
  
  <tgroup cols="3">
    
    <colspec colname="col_1" colwidth="33*"/>
    
    <colspec colname="col_2" colwidth="33*"/>
    
    <colspec colname="col_3" colwidth="33*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Priority</entry>
        
        <entry align="left" valign="top">Match</entry>
        
        <entry align="left" valign="top">Action</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>EtherType==0x8847 (MPLS unicast)</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Goto Table 1</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>EtherType==0x8100 (VLAN)</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Goto Table 1</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>5</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Match Any</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Drop</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

</section>
<section xml:id="_path_mapper_table_detailed">
<title>Path Mapper Table detailed</title>
<simpara>The Path Mapper table has an entry per expected tunnel transport info
to be received in a particular SFF, as established in the SFC
configuration. The tunnel transport info is used to determine the
RSP Path ID, and is stored in the OpenFlow Metadata.</simpara>
<simpara>Since most SF nodes wont support tunneling, the IP header DSCP field is
used to store the RSP Path Id. The RSP Path Id is written to the DSCP
field in the Transport Egress table for those packets sent to an SF.</simpara>
<simpara>Here is an example on SFF1, assuming the following details:</simpara>
<itemizedlist>
<listitem>
<simpara>VLAN ID 1000 is used for the SFF-SF</simpara>
</listitem>
<listitem>
<simpara>The RSP Path 1 tunnel uses MPLS label 100 for ingress and 101 for egress</simpara>
</listitem>
<listitem>
<simpara>The RSP Path 2 (symmetric downlink path) uses MPLS label 101 for ingress and 100 for egress</simpara>
</listitem>
</itemizedlist>

<table frame="all"
    rowsep="1" colsep="1">
<title>Table Path Mapper</title>
  
  <tgroup cols="3">
    
    <colspec colname="col_1" colwidth="33*"/>
    
    <colspec colname="col_2" colwidth="33*"/>
    
    <colspec colname="col_3" colwidth="33*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Priority</entry>
        
        <entry align="left" valign="top">Match</entry>
        
        <entry align="left" valign="top">Action</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>MPLS Label==100</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path=1, Pop MPLS, Goto Table 2</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>MPLS Label==101</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path=2, Pop MPLS, Goto Table 2</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>VLAN ID==1000, IP DSCP==1</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path=1, Pop VLAN, Goto Table 2</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>VLAN ID==1000, IP DSCP==2</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path=2, Pop VLAN, Goto Table 2</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>5</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Match Any</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Drop</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

</section>
<section xml:id="_next_hop_table_detailed">
<title>Next Hop Table detailed</title>
<simpara>The Next Hop table uses the RSP Path Id and source MAC address to
determine the destination MAC address.</simpara>
<simpara>Here is an example on SFF1, assuming SFF1 is connected to SFF2 and
RSP Path 1 ingress packets come from external to SFC, for which
we don’t have the source MAC address (MacSrc).</simpara>
<table frame="all"
    rowsep="1" colsep="1">
<title>Table Next Hop</title>
  
  <tgroup cols="3">
    
    <colspec colname="col_1" colwidth="33*"/>
    
    <colspec colname="col_2" colwidth="33*"/>
    
    <colspec colname="col_3" colwidth="33*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Priority</entry>
        
        <entry align="left" valign="top">Match</entry>
        
        <entry align="left" valign="top">Action</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path==1, MacSrc==SF1</simpara></entry>
        
        <entry align="left" valign="top"><simpara>MacDst=SFF2, Goto Table 10</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path==2, MacSrc==SF1</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Goto Table 10</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path==2, MacSrc==SFF2</simpara></entry>
        
        <entry align="left" valign="top"><simpara>MacDst=SF1, Goto Table 10</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>246</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path==1</simpara></entry>
        
        <entry align="left" valign="top"><simpara>MacDst=SF1, Goto Table 10</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>5</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Match Any</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Drop</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

</section>
<section xml:id="_transport_egress_table_detailed">
<title>Transport Egress Table detailed</title>
<simpara>The Transport Egress table prepares egress tunnel information and
sends the packets out.</simpara>
<simpara>Here is an example on SFF1, assuming VLAN is used for the SFF-SF, and the
RSP tunnel is MPLS:</simpara>
<table frame="all"
    rowsep="1" colsep="1">
<title>Table Transport Egress</title>
  
  <tgroup cols="3">
    
    <colspec colname="col_1" colwidth="33*"/>
    
    <colspec colname="col_2" colwidth="33*"/>
    
    <colspec colname="col_3" colwidth="33*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Priority</entry>
        
        <entry align="left" valign="top">Match</entry>
        
        <entry align="left" valign="top">Action</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path==1, MacDst==SF1</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Push VLAN ID 1000, Port=SF1</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path==1, MacDst==SFF2</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Push MPLS Label 101, Port=SFF2</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>256</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path==2, MacDst==SF1</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Push VLAN ID 1000, Port=SF1</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>246</simpara></entry>
        
        <entry align="left" valign="top"><simpara>RSP Path==2</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Push MPLS Label 100, Port=Ingress</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>5</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Match Any</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Drop</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</table>

</section>
</section>
<section xml:id="_administering_sfcofl2">
<title>Administering SFCOFL2</title>
<simpara>To use the SFC OpenFlow Renderer Karaf, at least the following Karaf
features must be installed.</simpara>
<itemizedlist>
<listitem>
<simpara>odl-openflowplugin-all</simpara>
</listitem>
<listitem>
<simpara>odl-sfc-core (includes odl-sfc-provider and odl-sfc-model)</simpara>
</listitem>
<listitem>
<simpara>odl-sfcofl2</simpara>
</listitem>
<listitem>
<simpara>odl-sfc-ui (optional)</simpara>
</listitem>
</itemizedlist>

<simpara>The following command can be used to view all of the currently installed Karaf features:</simpara>

<literallayout class="monospaced">opendaylight-user@root&gt;feature:list -i</literallayout>


<simpara>Or, pipe the command to a grep to see a subset of the currently installed Karaf features:</simpara>

<literallayout class="monospaced">opendaylight-user@root&gt;feature:list -i | grep sfc</literallayout>


<simpara>To install a particular feature, use the Karaf <literal>feature:install</literal> command.</simpara>
</section>
<section xml:id="_sfcofl2_tutorial">
<title>SFCOFL2 Tutorial</title>
<section xml:id="_overview_37">
<title>Overview</title>
<simpara>The following Network Topology diagram shows how to configure SFC to
create a Service Chain.</simpara>
<figure>
<title>SFC OpenFlow Renderer Typical Network Topology</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/sfc/sfcofl2_architecture_nwtopo.jpg" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>SFC OpenFlow Renderer Typical Network Topology</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_prerequisites_7">
<title>Prerequisites</title>
<simpara>To use this example, SFF OpenFlow switches must be created and
connected as illustrated above. Additionally, The SFs must be
created and connected to the SFFs.</simpara>
</section>
<section xml:id="_target_environment_6">
<title>Target Environment</title>
<simpara>The target environment is not important, but this use-case was created
and only tested on Linux.</simpara>
</section>
<section xml:id="_instructions_11">
<title>Instructions</title>
<simpara>The steps to use this tutorial are as follows. The referenced
configuration in the steps is listed in the following sections.</simpara>
<simpara>There are numerous ways to send the configuration. The following
configuration chapters, the appropriate <literal>curl</literal> command is shown for
each configuration to be sent, including the URL.</simpara>
<simpara>Steps to configure the SFCOFL2 tutorial:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Send the <literal>SF</literal> RESTCONF configuration</simpara>
</listitem>
<listitem>
<simpara>Send the <literal>SFF</literal> RESTCONF configuration</simpara>
</listitem>
<listitem>
<simpara>Send the <literal>SFC</literal> RESTCONF configuration</simpara>
</listitem>
<listitem>
<simpara>Send the <literal>SFP</literal> RESTCONF configuration</simpara>
</listitem>
<listitem>
<simpara>Create the <literal>RSP</literal> with a RESTCONF RPC command</simpara>
</listitem>
</orderedlist>

<simpara>Once the configuration has been successfully created, query the
Rendered Service Paths with either the SFC UI or via RESTCONF.
Notice that the RSP is symetrical, so the following 2 RSPs will
be created:</simpara>
<itemizedlist>
<listitem>
<simpara>sfc-path1</simpara>
</listitem>
<listitem>
<simpara>sfc-path1-Reverse</simpara>
</listitem>
</itemizedlist>

<simpara>At this point the Service Chains have been created, and the OpenFlow
Switches are programmed to steer traffic through the Service Chain.
Traffic can now be injected from a client into the Service Chain.
To debug problems, the OpenFlow tables can be dumped with the following
commands, assuming SFF1 is called <literal>s1</literal> and SFF2 is called <literal>s2</literal>.</simpara>

<literallayout class="monospaced">sudo ovs-ofctl -O OpenFlow13  dump-flows s1</literallayout>



<literallayout class="monospaced">sudo ovs-ofctl -O OpenFlow13  dump-flows s2</literallayout>


<simpara>In all the following configuration sections, replace the <literal>${JSON}</literal>
string with the appropriate JSON configuration. Also, change the
<literal>localhost</literal> desintation in the URL accordingly.</simpara>
<section xml:id="_service_function_configuration">
<title>Service Function configuration</title>
<simpara>The Service Function configuration can be sent with the following command:</simpara>

<literallayout class="monospaced">curl -i -H "Content-Type: application/json" -H "Cache-Control: no-cache" --data '${JSON}' -X PUT --user admin:admin http://localhost:8181/restconf/config/service-function:service-functions/</literallayout>


<formalpara>
<title>SF configuration JSON</title>
<para>
<screen>{
 "service-functions": {
   "service-function": [
     {
       "name": "sf1",
       "type": "service-function-type:http-header-enrichment",
       "nsh-aware": false,
       "ip-mgmt-address": "10.0.0.2",
       "sf-data-plane-locator": [
         {
           "name": "sf1-sff1",
           "mac": "00:00:08:01:02:01",
           "vlan-id": 1000,
           "transport": "service-locator:mac",
           "service-function-forwarder": "sff1"
         }
       ]
     },
     {
       "name": "sf2",
       "type": "service-function-type:firewall",
       "nsh-aware": false,
       "ip-mgmt-address": "10.0.0.3",
       "sf-data-plane-locator": [
         {
           "name": "sf2-sff2",
           "mac": "00:00:08:01:03:01",
           "vlan-id": 2000,
           "transport": "service-locator:mac",
           "service-function-forwarder": "sff2"
         }
       ]
     }
   ]
 }
}</screen>
</para>
</formalpara>

</section>
<section xml:id="_service_function_forwarder_configuration">
<title>Service Function Forwarder configuration</title>
<simpara>The Service Function Forwarder configuration can be sent with the
following command:</simpara>

<literallayout class="monospaced">curl -i -H "Content-Type: application/json" -H "Cache-Control: no-cache" --data '${JSON}' -X PUT --user admin:admin http://localhost:8181/restconf/config/service-function-forwarder:service-function-forwarders/</literallayout>


<formalpara>
<title>SFF configuration JSON</title>
<para>
<screen>{
 "service-function-forwarders": {
   "service-function-forwarder": [
     {
       "name": "sff1",
       "service-node": "openflow:2",
       "sff-data-plane-locator": [
         {
           "name": "ulSff1Ingress",
           "data-plane-locator":
           {
               "mpls-label": 100,
               "transport": "service-locator:mpls"
           },
           "service-function-forwarder-ofs:ofs-port":
           {
               "mac": "11:11:11:11:11:11",
               "port-id" : "1"
           }
         },
         {
           "name": "ulSff1ToSff2",
           "data-plane-locator":
           {
               "mpls-label": 101,
               "transport": "service-locator:mpls"
           },
           "service-function-forwarder-ofs:ofs-port":
           {
               "mac": "33:33:33:33:33:33",
               "port-id" : "2"
           }
         }
       ],
       "service-function-dictionary": [
         {
           "name": "sf1",
           "type": "service-function-type:http-header-enrichment",
           "sff-sf-data-plane-locator":
           {
               "mac": "22:22:22:22:22:22",
               "vlan-id": 1000,
               "transport": "service-locator:mac"
           },
           "service-function-forwarder-ofs:ofs-port":
           {
               "port-id" : "3"
           }
         }
       ]
     },
     {
       "name": "sff2",
       "service-node": "openflow:3",
       "sff-data-plane-locator": [
         {
           "name": "ulSff2Ingress",
           "data-plane-locator":
           {
               "mpls-label": 101,
               "transport": "service-locator:mpls"
           },
           "service-function-forwarder-ofs:ofs-port":
           {
               "mac": "44:44:44:44:44:44",
               "port-id" : "1"
           }
         },
         {
           "name": "ulSff2Egress",
           "data-plane-locator":
           {
               "mpls-label": 102,
               "transport": "service-locator:mpls"
           },
           "service-function-forwarder-ofs:ofs-port":
           {
               "mac": "66:66:66:66:66:66",
               "port-id" : "2"
           }
         }
       ],
       "service-function-dictionary": [
         {
           "name": "sf2",
           "type": "service-function-type:firewall",
           "sff-sf-data-plane-locator":
           {
               "mac": "55:55:55:55:55:55",
               "vlan-id": 2000,
               "transport": "service-locator:mac"
           },
           "service-function-forwarder-ofs:ofs-port":
           {
               "port-id" : "3"
           }
         }
       ]
     }
   ]
 }
}</screen>
</para>
</formalpara>

</section>
<section xml:id="_service_function_chain_configuration">
<title>Service Function Chain configuration</title>
<simpara>The Service Function Chain configuration can be sent with the
following command:</simpara>

<literallayout class="monospaced">curl -i -H "Content-Type: application/json" -H "Cache-Control: no-cache" --data '${JSON}' -X PUT --user admin:admin http://localhost:8181/restconf/config/service-function-chain:service-function-chains/</literallayout>


<formalpara>
<title>SFC configuration JSON</title>
<para>
<screen>{
 "service-function-chains": {
   "service-function-chain": [
     {
       "name": "sfc-chain1",
       "symmetric": true,
       "sfc-service-function": [
         {
           "name": "hdr-enrich-abstract1",
           "type": "service-function-type:http-header-enrichment"
         },
         {
           "name": "firewall-abstract1",
           "type": "service-function-type:firewall"
         }
       ]
     }
   ]
 }
}</screen>
</para>
</formalpara>

</section>
<section xml:id="_service_function_path_configuration">
<title>Service Function Path configuration</title>
<simpara>The Service Function Path configuration can be sent with the following
command:</simpara>

<literallayout class="monospaced">curl -i -H "Content-Type: application/json" -H "Cache-Control: no-cache" --data '${JSON}' -X PUT --user admin:admin http://localhost:8181/restconf/config/service-function-path:service-function-paths/</literallayout>


<formalpara>
<title>SFP configuration JSON</title>
<para>
<screen>{
  "service-function-paths": {
    "service-function-path": [
      {
        "name": "sfc-path1",
        "service-chain-name": "sfc-chain1",
        "transport-type": "service-locator:mpls",
        "symmetric": true
      }
    ]
  }
}</screen>
</para>
</formalpara>

</section>
<section xml:id="_rendered_service_path_creation">
<title>Rendered Service Path creation</title>

<literallayout class="monospaced">curl -i -H "Content-Type: application/json" -H "Cache-Control: no-cache" --data '${JSON}' -X POST --user admin:admin http://localhost:8181/restconf/operations/rendered-service-path:create-rendered-path/</literallayout>


<formalpara>
<title>RSP creation JSON</title>
<para>
<screen>{
 "input": {
     "name": "sfc-path1",
     "parent-service-function-path": "sfc-path1",
     "symmetric": true
 }
}</screen>
</para>
</formalpara>

</section>
<section xml:id="_rendered_service_path_removal">
<title>Rendered Service Path removal</title>
<simpara>The following command can be used to remove a Rendered Service Path
called <literal>sfc-path1</literal>:</simpara>

<literallayout class="monospaced">curl -i -H "Content-Type: application/json" -H "Cache-Control: no-cache" --data '{"input": {"name": "sfc-path1" } }' -X POST --user admin:admin http://localhost:8181/restconf/operations/rendered-service-path:delete-rendered-path/</literallayout>


</section>
<section xml:id="_rendered_service_path_query">
<title>Rendered Service Path Query</title>
<simpara>The following command can be used to query all of the created Rendered Service Paths:</simpara>

<literallayout class="monospaced">curl -H "Content-Type: application/json" -H "Cache-Control: no-cache" -X GET --user admin:admin http://localhost:8181/restconf/operational/rendered-service-path:rendered-service-paths/</literallayout>


</section>
</section>
</section>
</section>
<section xml:id="_service_function_scheduling_algorithms">
<title>Service Function Scheduling Algorithms</title>
<section xml:id="_overview_38">
<title>Overview</title>
<simpara>When creating the Rendered Service Path, the origin SFC controller chose
the first available service function from a list of service function names.
This may result in many issues such as overloaded service functions
and a longer service path as SFC has no means to understand the status of
service functions and network topology. The service function selection
framework supports at least four algorithms (Random, Round Robin,
Load Balancing and Shortest Path) to select the most appropriate service
function when instantiating the Rendered Service Path. In addition, it is an
extensible framework that allows 3rd party selection algorithm to be plugged in.</simpara>
</section>
<section xml:id="_architecture_2">
<title>Architecture</title>
<simpara>The following figure illustrates the service function selection framework
and algorithms.</simpara>
<figure>
<title>SF Selection Architecture</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/sfc/sf-selection-arch.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>SF Selection Architecture</phrase></textobject>
  </mediaobject>
</figure>

<simpara>A user has three different ways to select one service function selection
algorithm:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Integrated RESTCONF Calls. OpenStack and/or other administration system
could provide plugins to call the APIs to select one scheduling algorithm.</simpara>
</listitem>
<listitem>
<simpara>Command line tools. Command line tools such as curl or browser plugins
such as POSTMAN (for Google Chrome) and RESTClient (for Mozilla Firefox)
could select schedule algorithm by making RESTCONF calls.</simpara>
</listitem>
<listitem>
<simpara>SFC-UI. Now the SFC-UI provides an option for choosing a selection algorithm
when creating a Rendered Service Path.</simpara>
</listitem>
</orderedlist>

<simpara>The RESTCONF northbound SFC API provides GUI/RESTCONF interactions for choosing
the service function selection algorithm.
MD-SAL data store provides all supported service function selection algorithms,
and provides APIs to enable one of the provided service function selection
algorithms.
Once a service function selection algorithm is enabled, the service function
selection algorithm will work when creating a Rendered Service Path.</simpara>
</section>
<section xml:id="_select_sfs_with_scheduler">
<title>Select SFs with Scheduler</title>
<simpara>Administrator could use both the following ways to select one of the selection
algorithm when creating a Rendered Service Path.</simpara>
<itemizedlist>
<listitem>
<simpara>Command line tools. Command line tools includes Linux commands curl or even
browser plugins such as POSTMAN(for Google Chrome) or RESTClient(for Mozilla
Firefox). In this case, the following JSON content is needed at the moment:
Service_function_schudule_type.json</simpara>

<literallayout class="monospaced">{
  "service-function-scheduler-types": {
    "service-function-scheduler-type": [
      {
        "name": "random",
        "type": "service-function-scheduler-type:random",
        "enabled": false
      },
      {
        "name": "roundrobin",
        "type": "service-function-scheduler-type:round-robin",
        "enabled": true
      },
      {
        "name": "loadbalance",
        "type": "service-function-scheduler-type:load-balance",
        "enabled": false
      },
      {
        "name": "shortestpath",
        "type": "service-function-scheduler-type:shortest-path",
        "enabled": false
      }
    ]
  }
}</literallayout>


<simpara>If using the Linux curl command, it could be:</simpara>

<literallayout class="monospaced">curl -i -H "Content-Type: application/json" -H "Cache-Control: no-cache" --data '$${Service_function_schudule_type.json}'
-X PUT --user admin:admin http://localhost:8181/restconf/config/service-function-scheduler-type:service-function-scheduler-types/</literallayout>


<simpara>Here is also a snapshot for using the RESTClient plugin:</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Mozilla Firefox RESTClient</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/sfc/RESTClient-snapshot.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>Mozilla Firefox RESTClient</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>SFC-UI.SFC-UI provides a drop down menu for service function selection
algorithm. Here is a snapshot for the user interaction from SFC-UI when
creating a Rendered Service Path.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Karaf Web UI</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/sfc/karaf-webui-select-a-type.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>Karaf Web UI</phrase></textobject>
  </mediaobject>
</figure>

<note>
<simpara>Some service function selection algorithms in the drop list are not
      implemented yet. Only the first three algorithms are committed at the
      moment.</simpara>
</note>

<section xml:id="_random">
<title>Random</title>
<simpara>Select Service Function from the name list randomly.</simpara>
<section xml:id="_overview_39">
<title>Overview</title>
<simpara>The Random algorithm is used to select one Service Function from the name list
which it gets from the Service Function Type randomly.</simpara>
</section>
<section xml:id="_prerequisites_8">
<title>Prerequisites</title>
<itemizedlist>
<listitem>
<simpara>Service Function information are stored in datastore.</simpara>
</listitem>
<listitem>
<simpara>Either no algorithm or the Random algorithm is selected.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_target_environment_7">
<title>Target Environment</title>
<simpara>The Random algorithm will work either no algorithm type is selected or the
Random algorithm is selected.</simpara>
</section>
<section xml:id="_instructions_12">
<title>Instructions</title>
<simpara>Once the plugins are installed into Karaf successfully, a user can use his
favorite method to select the Random scheduling algorithm type.
There are no special instructions for using the Random algorithm.</simpara>
</section>
</section>
<section xml:id="_round_robin">
<title>Round Robin</title>
<simpara>Select Service Function from the name list in Round Robin manner.</simpara>
<section xml:id="_overview_40">
<title>Overview</title>
<simpara>The Round Robin algorithm is used to select one Service Function from the name
list which it gets from the Service Function Type in a Round Robin manner, this
will balance workloads to all Service Functions. However, this method cannot
help all Service Functions load the same workload because it&#8217;s flow-based
Round Robin.</simpara>
</section>
<section xml:id="_prerequisites_9">
<title>Prerequisites</title>
<itemizedlist>
<listitem>
<simpara>Service Function information are stored in datastore.</simpara>
</listitem>
<listitem>
<simpara>Round Robin algorithm is selected</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_target_environment_8">
<title>Target Environment</title>
<simpara>The Round Robin algorithm will work one the Round Robin algorithm is selected.</simpara>
</section>
<section xml:id="_instructions_13">
<title>Instructions</title>
<simpara>Once the plugins are installed into Karaf successfully, a user can use his
favorite method to select the Round Robin scheduling algorithm type.
There are no special instructions for using the Round Robin algorithm.</simpara>
</section>
</section>
<section xml:id="_load_balance_algorithm">
<title>Load Balance Algorithm</title>
<simpara>Select appropriate Service Function by actual CPU utilization.</simpara>
<section xml:id="_overview_41">
<title>Overview</title>
<simpara>The Load Balance Algorithm is used to select appropriate Service Function
by actual CPU utilization of service functions. The CPU utilization of
service function obtained from monitoring information reported via NETCONF.</simpara>
</section>
<section xml:id="_prerequisites_10">
<title>Prerequisites</title>
<itemizedlist>
<listitem>
<simpara>CPU-utilization for Service Function.</simpara>
</listitem>
<listitem>
<simpara>NETCONF server.</simpara>
</listitem>
<listitem>
<simpara>NETCONF client.</simpara>
</listitem>
<listitem>
<simpara>Each VM has a NETCONF server and it could work with NETCONF client well.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_instructions_14">
<title>Instructions</title>
<simpara>Set up VMs as Service Functions. enable NETCONF server in VMs.
Ensure that you specify them separately. For example:</simpara>
<orderedlist numeration="loweralpha">
<title>1 <emphasis role="strong">Setting up the VM</emphasis></title>
<listitem>
<simpara>Set up 4 VMs include 2 SFs' type are Firewall, Others are Napt44. Name them
as firewall-1, firewall-2, napt44-1, napt44-2 as Service Function.
The four VMs can run either the same server or different servers.</simpara>
</listitem>
<listitem>
<simpara>Install NETCONF server on every VM and enable it.
More information on NETCONF can be found on the OpenDaylight wiki here:
<link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Controller:Config:Examples:Netconf:Manual_netopeer_installation">https://wiki.opendaylight.org/view/OpenDaylight_Controller:Config:Examples:Netconf:Manual_netopeer_installation</link></simpara>
</listitem>
<listitem>
<simpara>Get Monitoring data from NETCONF server.
These monitoring data should be get from the NETCONF server which is running
in VMs. The following static XML data is an example:</simpara>
</listitem>
</orderedlist>

<simpara>static XML data like this:</simpara>
<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;service-function-description-monitor-report&gt;
  &lt;SF-description&gt;
    &lt;number-of-dataports&gt;2&lt;/number-of-dataports&gt;
    &lt;capabilities&gt;
      &lt;supported-packet-rate&gt;5&lt;/supported-packet-rate&gt;
      &lt;supported-bandwidth&gt;10&lt;/supported-bandwidth&gt;
      &lt;supported-ACL-number&gt;2000&lt;/supported-ACL-number&gt;
      &lt;RIB-size&gt;200&lt;/RIB-size&gt;
      &lt;FIB-size&gt;100&lt;/FIB-size&gt;
      &lt;ports-bandwidth&gt;
        &lt;port-bandwidth&gt;
          &lt;port-id&gt;1&lt;/port-id&gt;
          &lt;ipaddress&gt;10.0.0.1&lt;/ipaddress&gt;
          &lt;macaddress&gt;00:1e:67:a2:5f:f4&lt;/macaddress&gt;
          &lt;supported-bandwidth&gt;20&lt;/supported-bandwidth&gt;
        &lt;/port-bandwidth&gt;
        &lt;port-bandwidth&gt;
          &lt;port-id&gt;2&lt;/port-id&gt;
          &lt;ipaddress&gt;10.0.0.2&lt;/ipaddress&gt;
          &lt;macaddress&gt;01:1e:67:a2:5f:f6&lt;/macaddress&gt;
          &lt;supported-bandwidth&gt;10&lt;/supported-bandwidth&gt;
        &lt;/port-bandwidth&gt;
      &lt;/ports-bandwidth&gt;
    &lt;/capabilities&gt;
  &lt;/SF-description&gt;
  &lt;SF-monitoring-info&gt;
    &lt;liveness&gt;true&lt;/liveness&gt;
    &lt;resource-utilization&gt;
        &lt;packet-rate-utilization&gt;10&lt;/packet-rate-utilization&gt;
        &lt;bandwidth-utilization&gt;15&lt;/bandwidth-utilization&gt;
        &lt;CPU-utilization&gt;12&lt;/CPU-utilization&gt;
        &lt;memory-utilization&gt;17&lt;/memory-utilization&gt;
        &lt;available-memory&gt;8&lt;/available-memory&gt;
        &lt;RIB-utilization&gt;20&lt;/RIB-utilization&gt;
        &lt;FIB-utilization&gt;25&lt;/FIB-utilization&gt;
        &lt;power-utilization&gt;30&lt;/power-utilization&gt;
        &lt;SF-ports-bandwidth-utilization&gt;
          &lt;port-bandwidth-utilization&gt;
            &lt;port-id&gt;1&lt;/port-id&gt;
            &lt;bandwidth-utilization&gt;20&lt;/bandwidth-utilization&gt;
          &lt;/port-bandwidth-utilization&gt;
          &lt;port-bandwidth-utilization&gt;
            &lt;port-id&gt;2&lt;/port-id&gt;
            &lt;bandwidth-utilization&gt;30&lt;/bandwidth-utilization&gt;
          &lt;/port-bandwidth-utilization&gt;
        &lt;/SF-ports-bandwidth-utilization&gt;
    &lt;/resource-utilization&gt;
  &lt;/SF-monitoring-info&gt;
&lt;/service-function-description-monitor-report&gt;</screen>

<orderedlist numeration="loweralpha">
<title>2 <emphasis role="strong">Start SFC</emphasis></title>
<listitem>
<simpara>Unzip SFC release tarball.</simpara>
</listitem>
<listitem>
<simpara>Run SFC: ${sfc}/bin/karaf.
More information on Service Function Chaining can be found on the OpenDaylight
SFC&#8217;s wiki page:
<link xlink:href="https://wiki.opendaylight.org/view/Service_Function_Chaining:Main">https://wiki.opendaylight.org/view/Service_Function_Chaining:Main</link></simpara>
</listitem>
</orderedlist>

<orderedlist numeration="loweralpha">
<title>3 <emphasis role="strong">Verify the Load Balance Algorithm</emphasis></title>
<listitem>
<simpara>Deploy the SFC2 (firewall-abstract2&#8658;napt44-abstract2) and click button to
Create Rendered Service Path in SFC UI (<link xlink:href="http://localhost:8181/sfc/index.html">http://localhost:8181/sfc/index.html</link>).</simpara>
</listitem>
<listitem>
<simpara>Verify the Rendered Service Path to ensure the CPU utilization of the
   selected hop is the minimum one among all the service functions with same
   type.
The correct RSP is firewall-1&#8658;napt44-2</simpara>
</listitem>
</orderedlist>

</section>
</section>
<section xml:id="_shortest_path_algorithm">
<title>Shortest Path Algorithm</title>
<simpara>Select appropriate Service Function by Dijkstra&#8217;s algorithm. Dijkstra&#8217;s
algorithm is an algorithm for finding the shortest paths between nodes in a
graph.</simpara>
<section xml:id="_overview_42">
<title>Overview</title>
<simpara>The Shortest Path Algorithm is used to select appropriate Service Function by
actual topology.</simpara>
</section>
<section xml:id="_prerequisites_11">
<title>Prerequisites</title>
<itemizedlist>
<listitem>
<simpara>Depolyed topology (include SFFs, SFs and their links).</simpara>
</listitem>
<listitem>
<simpara>Dijkstra&#8217;s algorithm. More information on Dijkstra&#8217;s algorithm can be found
on the wiki here:
<link xlink:href="http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm</link></simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_instructions_15">
<title>Instructions</title>
<orderedlist numeration="loweralpha">
<title>1 <emphasis role="strong">Start SFC</emphasis></title>
<listitem>
<simpara>Unzip SFC release tarball.</simpara>
</listitem>
<listitem>
<simpara>Run SFC: ${sfc}/bin/karaf.</simpara>
</listitem>
<listitem>
<simpara>Depoly SFFs and SFs. import the service-function-forwarders.json and
service-functions.json in UI (<link xlink:href="http://localhost:8181/sfc/index.html#/sfc/config">http://localhost:8181/sfc/index.html#/sfc/config</link>)</simpara>
</listitem>
</orderedlist>

<simpara>service-function-forwarders.json:</simpara>
<screen>{
  "service-function-forwarders": {
    "service-function-forwarder": [
      {
        "name": "SFF-br1",
        "service-node": "OVSDB-test01",
        "rest-uri": "http://localhost:5001",
        "sff-data-plane-locator": [
          {
            "name": "eth0",
            "service-function-forwarder-ovs:ovs-bridge": {
              "uuid": "4c3778e4-840d-47f4-b45e-0988e514d26c",
              "bridge-name": "br-tun"
            },
            "data-plane-locator": {
              "port": 5000,
              "ip": "192.168.1.1",
              "transport": "service-locator:vxlan-gpe"
            }
          }
        ],
        "service-function-dictionary": [
          {
            "sff-sf-data-plane-locator": {
              "port": 10001,
              "ip": "10.3.1.103"
            },
            "name": "napt44-1",
            "type": "service-function-type:napt44"
          },
          {
            "sff-sf-data-plane-locator": {
              "port": 10003,
              "ip": "10.3.1.102"
            },
            "name": "firewall-1",
            "type": "service-function-type:firewall"
          }
        ],
        "connected-sff-dictionary": [
          {
            "name": "SFF-br3"
          }
        ]
      },
      {
        "name": "SFF-br2",
        "service-node": "OVSDB-test01",
        "rest-uri": "http://localhost:5002",
        "sff-data-plane-locator": [
          {
            "name": "eth0",
            "service-function-forwarder-ovs:ovs-bridge": {
              "uuid": "fd4d849f-5140-48cd-bc60-6ad1f5fc0a1",
              "bridge-name": "br-tun"
            },
            "data-plane-locator": {
              "port": 5000,
              "ip": "192.168.1.2",
              "transport": "service-locator:vxlan-gpe"
            }
          }
        ],
        "service-function-dictionary": [
          {
            "sff-sf-data-plane-locator": {
              "port": 10002,
              "ip": "10.3.1.103"
            },
            "name": "napt44-2",
            "type": "service-function-type:napt44"
          },
          {
            "sff-sf-data-plane-locator": {
              "port": 10004,
              "ip": "10.3.1.101"
            },
            "name": "firewall-2",
            "type": "service-function-type:firewall"
          }
        ],
        "connected-sff-dictionary": [
          {
            "name": "SFF-br3"
          }
        ]
      },
      {
        "name": "SFF-br3",
        "service-node": "OVSDB-test01",
        "rest-uri": "http://localhost:5005",
        "sff-data-plane-locator": [
          {
            "name": "eth0",
            "service-function-forwarder-ovs:ovs-bridge": {
              "uuid": "fd4d849f-5140-48cd-bc60-6ad1f5fc0a4",
              "bridge-name": "br-tun"
            },
            "data-plane-locator": {
              "port": 5000,
              "ip": "192.168.1.2",
              "transport": "service-locator:vxlan-gpe"
            }
          }
        ],
        "service-function-dictionary": [
          {
            "sff-sf-data-plane-locator": {
              "port": 10005,
              "ip": "10.3.1.104"
            },
            "name": "test-server",
            "type": "service-function-type:dpi"
          },
          {
            "sff-sf-data-plane-locator": {
              "port": 10006,
              "ip": "10.3.1.102"
            },
            "name": "test-client",
            "type": "service-function-type:dpi"
          }
        ],
        "connected-sff-dictionary": [
          {
            "name": "SFF-br1"
          },
          {
            "name": "SFF-br2"
          }
        ]
      }
    ]
  }
}</screen>

<simpara>service-functions.json:</simpara>
<screen>{
  "service-functions": {
    "service-function": [
      {
        "rest-uri": "http://localhost:10001",
        "ip-mgmt-address": "10.3.1.103",
        "sf-data-plane-locator": [
          {
            "name": "preferred",
            "port": 10001,
            "ip": "10.3.1.103",
            "service-function-forwarder": "SFF-br1"
          }
        ],
        "name": "napt44-1",
        "type": "service-function-type:napt44",
        "nsh-aware": true
      },
      {
        "rest-uri": "http://localhost:10002",
        "ip-mgmt-address": "10.3.1.103",
        "sf-data-plane-locator": [
          {
            "name": "master",
            "port": 10002,
            "ip": "10.3.1.103",
            "service-function-forwarder": "SFF-br2"
          }
        ],
        "name": "napt44-2",
        "type": "service-function-type:napt44",
        "nsh-aware": true
      },
      {
        "rest-uri": "http://localhost:10003",
        "ip-mgmt-address": "10.3.1.103",
        "sf-data-plane-locator": [
          {
            "name": "1",
            "port": 10003,
            "ip": "10.3.1.102",
            "service-function-forwarder": "SFF-br1"
          }
        ],
        "name": "firewall-1",
        "type": "service-function-type:firewall",
        "nsh-aware": true
      },
      {
        "rest-uri": "http://localhost:10004",
        "ip-mgmt-address": "10.3.1.103",
        "sf-data-plane-locator": [
          {
            "name": "2",
            "port": 10004,
            "ip": "10.3.1.101",
            "service-function-forwarder": "SFF-br2"
          }
        ],
        "name": "firewall-2",
        "type": "service-function-type:firewall",
        "nsh-aware": true
      },
      {
        "rest-uri": "http://localhost:10005",
        "ip-mgmt-address": "10.3.1.103",
        "sf-data-plane-locator": [
          {
            "name": "3",
            "port": 10005,
            "ip": "10.3.1.104",
            "service-function-forwarder": "SFF-br3"
          }
        ],
        "name": "test-server",
        "type": "service-function-type:dpi",
        "nsh-aware": true
      },
      {
        "rest-uri": "http://localhost:10006",
        "ip-mgmt-address": "10.3.1.103",
        "sf-data-plane-locator": [
          {
            "name": "4",
            "port": 10006,
            "ip": "10.3.1.102",
            "service-function-forwarder": "SFF-br3"
          }
        ],
        "name": "test-client",
        "type": "service-function-type:dpi",
        "nsh-aware": true
      }
    ]
  }
}</screen>

<simpara>The depolyed topology like this:</simpara>
<screen>
              +----+           +----+          +----+
              |sff1|+----------|sff3|---------+|sff2|
              +----+           +----+          +----+
                |                                  |
         +--------------+                   +--------------+
         |              |                   |              |
    +----------+   +--------+          +----------+   +--------+
    |firewall-1|   |napt44-1|          |firewall-2|   |napt44-2|
    +----------+   +--------+          +----------+   +--------+
</screen>

<itemizedlist>
<title>2 <emphasis role="strong">Verify the Shortest Path Algorithm</emphasis></title>
<listitem>
<simpara>Deploy the SFC2(firewall-abstract2&#8658;napt44-abstract2), select "Shortest
Path" as schedule type and click button to Create Rendered Service Path in
SFC UI (<link xlink:href="http://localhost:8181/sfc/index.html">http://localhost:8181/sfc/index.html</link>).</simpara>
</listitem>
</itemizedlist>

<figure>
<title>select schedule type</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/sfc/sf-schedule-type.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>select schedule type</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>Verify the Rendered Service Path to ensure the selected hops are linked in
one SFF. The correct RSP is firewall-1&#8658;napt44-1 or  firewall-2&#8658;napt44-2.
The first SF type is Firewall in Service Function Chain. So the algorithm
will select first Hop randomly among all the SFs type is Firewall.
Assume the first selected SF is firewall-2.
All the path from firewall-1 to SF which type is Napt44 are list:</simpara>
<itemizedlist>
<listitem>
<simpara>Path1: firewall-2 &#8594; sff2 &#8594; napt44-2</simpara>
</listitem>
<listitem>
<simpara>Path2: firewall-2 &#8594; sff2 &#8594; sff3 &#8594; sff1 &#8594; napt44-1
The shortest path is Path1, so the selected next hop is napt44-2.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<figure>
<title>rendered service path</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/sfc/sf-rendered-service-path.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>rendered service path</phrase></textobject>
  </mediaobject>
</figure>

</section>
</section>
</section>
</section>
<section xml:id="_service_function_load_balancing_user_guide">
<title>Service Function Load Balancing User Guide</title>
<section xml:id="_overview_43">
<title>Overview</title>
<simpara>SFC Load-Balancing feature implements load balancing of Service Functions, rather than a one-to-one mapping between Service-Function-Forwarder and Service-Function.</simpara>
</section>
<section xml:id="_load_balancing_architecture">
<title>Load Balancing Architecture</title>
<simpara>Service Function Groups (SFG) can replace Service Functions (SF) in the Rendered Path model.
A Service Path can only be defined using SFGs or SFs, but not a combination of both.</simpara>
<simpara>Relevant objects in the YANG model are as follows:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Service-Function-Group-Algorithm:</simpara>

<literallayout class="monospaced">Service-Function-Group-Algorithms {
    Service-Function-Group-Algorithm {
        String name
        String type
    }
}</literallayout>



<literallayout class="monospaced">Available types: ALL, SELECT, INDIRECT, FAST_FAILURE</literallayout>


</listitem>
<listitem>
<simpara>Service-Function-Group:</simpara>

<literallayout class="monospaced">Service-Function-Groups {
    Service-Function-Group {
        String name
        String serviceFunctionGroupAlgorithmName
        String type
        String groupId
        Service-Function-Group-Element {
            String service-function-name
            int index
        }
    }
}</literallayout>


</listitem>
<listitem>
<simpara>ServiceFunctionHop: holds a reference to a name of SFG (or SF)</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_tutorials_9">
<title>Tutorials</title>
<simpara>This tutorial will explain how to create a simple SFC configuration, with SFG instead of SF. In this example, the SFG will include two existing SF.</simpara>
<section xml:id="_setup_sfc">
<title>Setup SFC</title>
<simpara>For general SFC setup and scenarios, please see the SFC wiki page: <link xlink:href="https://wiki.opendaylight.org/view/Service_Function_Chaining:Main#SFC_101">https://wiki.opendaylight.org/view/Service_Function_Chaining:Main#SFC_101</link></simpara>
</section>
<section xml:id="_create_an_algorithm">
<title>Create an algorithm</title>
<simpara>POST - <link xlink:href="http://127.0.0.1:8181/restconf/config/service-function-group-algorithm:service-function-group-algorithms">http://127.0.0.1:8181/restconf/config/service-function-group-algorithm:service-function-group-algorithms</link></simpara>
<screen>{
    "service-function-group-algorithm": [
      {
        "name": "alg1"
        "type": "ALL"
      }
   ]
}</screen>

<simpara>(Header "content-type": application/json)</simpara>
</section>
<section xml:id="_verify_get_all_algorithms">
<title>Verify: get all algorithms</title>
<simpara>GET - <link xlink:href="http://127.0.0.1:8181/restconf/config/service-function-group-algorithm:service-function-group-algorithms">http://127.0.0.1:8181/restconf/config/service-function-group-algorithm:service-function-group-algorithms</link></simpara>
<simpara>In order to delete all algorithms:
DELETE - <link xlink:href="http://127.0.0.1:8181/restconf/config/service-function-group-algorithm:service-function-group-algorithms">http://127.0.0.1:8181/restconf/config/service-function-group-algorithm:service-function-group-algorithms</link></simpara>
</section>
<section xml:id="_create_a_group">
<title>Create a group</title>
<simpara>POST - <link xlink:href="http://127.0.0.1:8181/restconf/config/service-function-group:service-function-groups">http://127.0.0.1:8181/restconf/config/service-function-group:service-function-groups</link></simpara>
<screen>{
    "service-function-group": [
    {
        "rest-uri": "http://localhost:10002",
        "ip-mgmt-address": "10.3.1.103",
        "algorithm": "alg1",
        "name": "SFG1",
        "type": "service-function-type:napt44",
		"sfc-service-function": [
			{
				"name":"napt44-104"
			},
			{
				"name":"napt44-103-1"
			}
		]
      }
	]
}</screen>

</section>
<section xml:id="_verify_get_all_sfg_s">
<title>Verify: get all SFG&#8217;s</title>
<simpara>GET - <link xlink:href="http://127.0.0.1:8181/restconf/config/service-function-group:service-function-groups">http://127.0.0.1:8181/restconf/config/service-function-group:service-function-groups</link></simpara>
</section>
</section>
</section>
</chapter>
<chapter xml:id="_snmp_plugin_user_guide">
<title>SNMP Plugin User Guide</title>
<section xml:id="_installing_feature">
<title>Installing Feature</title>
<simpara>The SNMP Plugin can be installed using a single karaf feature: <emphasis role="strong">odl-snmp-plugin</emphasis></simpara>
<simpara>After starting Karaf:</simpara>
<itemizedlist>
<listitem>
<simpara>Install the feature: <emphasis role="strong">feature:install odl-snmp-plugin</emphasis></simpara>
</listitem>
<listitem>
<simpara>Expose the northbound API: <emphasis role="strong">feature:install odl-restconf</emphasis></simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_northbound_apis">
<title>Northbound APIs</title>
<simpara>There are two exposed northbound APIs: snmp-get &amp; snmp-set</simpara>
<section xml:id="_snmp_get">
<title>SNMP GET</title>
<simpara>Default URL: <link xlink:href="http://localhost:8181/restconf/operations/snmp:snmp-get">http://localhost:8181/restconf/operations/snmp:snmp-get</link></simpara>
<section xml:id="_post_input">
<title>POST Input</title>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="5">
    
    <colspec colname="col_1" colwidth="20*"/>
    
    <colspec colname="col_2" colwidth="20*"/>
    
    <colspec colname="col_3" colwidth="20*"/>
    
    <colspec colname="col_4" colwidth="20*"/>
    
    <colspec colname="col_5" colwidth="20*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Field Name</entry>
        
        <entry align="left" valign="top">Type</entry>
        
        <entry align="left" valign="top">Description</entry>
        
        <entry align="left" valign="top">Example</entry>
        
        <entry align="left" valign="top">Required?</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>ip-address</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Ipv4 Address</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The IPv4 Address of the desired network node</simpara></entry>
        
        <entry align="left" valign="top"><simpara>10.86.3.13</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>oid</simpara></entry>
        
        <entry align="left" valign="top"><simpara>String</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The Object Identifier of the desired MIB table/object</simpara></entry>
        
        <entry align="left" valign="top"><simpara>1.3.6.1.2.1.1.1</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>get-type</simpara></entry>
        
        <entry align="left" valign="top"><simpara>ENUM (GET, GET-NEXT, GET-BULK, GET-WALK)</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The type of get request to send</simpara></entry>
        
        <entry align="left" valign="top"><simpara>GET-BULK</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>community</simpara></entry>
        
        <entry align="left" valign="top"><simpara>String</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The community string to use for the SNMP request</simpara></entry>
        
        <entry align="left" valign="top"><simpara>private</simpara></entry>
        
        <entry align="left" valign="top"><simpara>No. (Default: public)</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<formalpara>
<title>Example</title>
<para>
<screen> {
     "input": {
         "ip-address": "10.86.3.13",
         "oid" : "1.3.6.1.2.1.1.1",
         "get-type" : "GET-BULK",
         "community" : "private"
     }
 }</screen>
</para>
</formalpara>

</section>
<section xml:id="_post_output">
<title>POST Output</title>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="3">
    
    <colspec colname="col_1" colwidth="33*"/>
    
    <colspec colname="col_2" colwidth="33*"/>
    
    <colspec colname="col_3" colwidth="33*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Field Name</entry>
        
        <entry align="left" valign="top">Type</entry>
        
        <entry align="left" valign="top">Description</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>results</simpara></entry>
        
        <entry align="left" valign="top"><simpara>List of { "value" : String } pairs</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The results of the SNMP query</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<formalpara>
<title>Example</title>
<para>
<screen> {
     "snmp:results": [
         {
             "value": "Ethernet0/0/0",
             "oid": "1.3.6.1.2.1.2.2.1.2.1"
         },
         {
             "value": "FastEthernet0/0/0",
             "oid": "1.3.6.1.2.1.2.2.1.2.2"
         },
         {
             "value": "GigabitEthernet0/0/0",
             "oid": "1.3.6.1.2.1.2.2.1.2.3"
         }
     ]
 }</screen>
</para>
</formalpara>

</section>
</section>
<section xml:id="_snmp_set">
<title>SNMP SET</title>
<simpara>Default URL: <link xlink:href="http://localhost:8181/restconf/operations/snmp:snmp-set">http://localhost:8181/restconf/operations/snmp:snmp-set</link></simpara>
<section xml:id="_post_input_2">
<title>POST Input</title>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="5">
    
    <colspec colname="col_1" colwidth="20*"/>
    
    <colspec colname="col_2" colwidth="20*"/>
    
    <colspec colname="col_3" colwidth="20*"/>
    
    <colspec colname="col_4" colwidth="20*"/>
    
    <colspec colname="col_5" colwidth="20*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Field Name</entry>
        
        <entry align="left" valign="top">Type</entry>
        
        <entry align="left" valign="top">Description</entry>
        
        <entry align="left" valign="top">Example</entry>
        
        <entry align="left" valign="top">Required?</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>ip-address</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Ipv4 Address</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The Ipv4 address of the desired network node</simpara></entry>
        
        <entry align="left" valign="top"><simpara>10.86.3.13</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>oid</simpara></entry>
        
        <entry align="left" valign="top"><simpara>String</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The Object Identifier of the desired MIB object</simpara></entry>
        
        <entry align="left" valign="top"><simpara>1.3.6.2.1.1.1</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>value</simpara></entry>
        
        <entry align="left" valign="top"><simpara>String</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The value to set on the network device</simpara></entry>
        
        <entry align="left" valign="top"><simpara>"Hello World"</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>community</simpara></entry>
        
        <entry align="left" valign="top"><simpara>String</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The community string to use for the SNMP request</simpara></entry>
        
        <entry align="left" valign="top"><simpara>private</simpara></entry>
        
        <entry align="left" valign="top"><simpara>No. (Default: public)</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<formalpara>
<title>Example</title>
<para>
<screen> {
     "input": {
         "ip-address": "10.86.3.13",
         "oid" : "1.3.6.1.2.1.1.1.0",
         "value" : "Sample description",
         "community" : "private"
     }
 }</screen>
</para>
</formalpara>

</section>
<section xml:id="_post_output_2">
<title>POST Output</title>
<simpara>On a successful SNMP-SET, no output is presented, just a HTTP status of 200.</simpara>
</section>
<section xml:id="_errors">
<title>Errors</title>
<simpara>If any errors happen in the set request, you will be presented with an error message in the output.</simpara>
<simpara>For example, on a failed set request you may see an error like:</simpara>
<screen> {
     "errors": {
         "error": [
             {
                 "error-type": "application",
                 "error-tag": "operation-failed",
                 "error-message": "SnmpSET failed with error status: 17, error index: 1. StatusText: Not writable"
             }
         ]
     }
 }</screen>

<simpara>which corresponds to Error status 17 in the SNMPv2 RFC: <link xlink:href="https://tools.ietf.org/html/rfc1905">https://tools.ietf.org/html/rfc1905</link>.</simpara>
</section>
</section>
</section>
</chapter>
<chapter xml:id="_sxp_user_guide">
<title>SXP User Guide</title>
<section xml:id="_overview_44">
<title>Overview</title>
<simpara>SXP (Source-Group Tag eXchange Protocol) project is an effort to enhance OpenDaylight platform with IP-SGT (IP Address to Source Group Tag) bindings that can be learned from connected SXP-aware network nodes. The current implementation supports SXP protocol version 4 according to the Smith, Kandula - SXP <link xlink:href="https://tools.ietf.org/html/draft-smith-kandula-sxp-04">IETF draft</link> and grouping of peers and creating filters based on ACL/Prefix-list syntax for filtering outbound and inbound IP-SGT bindings. All protocol legacy versions 1-3 are supported as well. Additionally, version 4 adds bidirectional connection type as an extension of a unidirectional one.</simpara>
</section>
<section xml:id="_sxp_architecture">
<title>SXP Architecture</title>
<simpara>The SXP Server manages all connected clients in separate threads and a common SXP protocol agreement is used between connected peers. Each SXP network peer is modelled with its pertaining class, e.g., SXP Server represents the SXP Speaker, SXP Listener the Client. The server program creates the ServerSocket object on a specified port and waits until a client starts up and requests connect on the IP address and port of the server. The client program opens a Socket that is connected to the server running on the specified host IP address and port.</simpara>
<simpara>The SXP Listener maintains connection with its speaker peer. From an opened channel pipeline, all incoming SXP messages are processed by various handlers. Message must be decoded, parsed and validated.</simpara>
<simpara>The SXP Speaker is a counterpart to the SXP Listener. It maintains a connection with its listener peer and sends composed messages.</simpara>
<simpara>The SXP Binding Handler extracts the IP-SGT binding from a message and pulls it into the SXP-Database. If an error is detected during the IP-SGT extraction, an appropriate error code and sub-code is selected and an error message is sent back to the connected peer. All transitive messages are routed directly to the output queue of SXP Binding Dispatcher.</simpara>
<simpara>The IP-SGT Manager handles bindings from multiple connections. If a new data has been added into or deleted from the SXP-Database, or binding’s contributor change is detected, the manager performs an arbitration process above the SXP-Database to resolve the binding duplicity and prevent possible information loops. Finally, it updates the IP-SGT-Master database that consists only of valid and unique bindings, i.e., a single binding per IP address.</simpara>
<simpara>The IP-SGT Manager also contains RPCs that can be used by other OpenDaylight plugins, or by making REST calls, to add, update or to delete bindings in or from the SXP-database.</simpara>
<simpara>The SXP Binding Dispatcher represents a selector that will decides how many data from the SXP-database will be sent and when. It is responsible for message content composition based on maximum message length.</simpara>
<simpara>The SXP Binding Filters handles filtering of outcoming and incoming IP-SGT bindings according to BGP filtering using ACL and Prefix List syntax for specifiing filter.</simpara>
</section>
<section xml:id="_configuring_sxp">
<title>Configuring SXP</title>
<simpara>The OpenDaylight Karaf distribution comes pre-configured with baseline SXP
configuration.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">22-sxp-controller-one-node.xml</emphasis> (defines the basic parameters)</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_administering_or_managing_sxp">
<title>Administering or Managing SXP</title>
<simpara>By RPC (response is XML document containing requested data or operation status):</simpara>
<itemizedlist>
<listitem>
<simpara>Get Connections
POST <link xlink:href="http://127.0.0.1:8181/restconf/operations/sxp-controller:get-connections">http://127.0.0.1:8181/restconf/operations/sxp-controller:get-connections</link></simpara>
</listitem>
</itemizedlist>

<screen>&lt;input xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
 &lt;requested-node&gt;0.0.0.100&lt;/requested-node&gt;
&lt;/input&gt;</screen>

<itemizedlist>
<listitem>
<simpara>Add Connection
POST <link xlink:href="http://127.0.0.1:8181/restconf/operations/sxp-controller:add-connection">http://127.0.0.1:8181/restconf/operations/sxp-controller:add-connection</link></simpara>
</listitem>
</itemizedlist>

<screen>&lt;input xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
 &lt;connections&gt;
  &lt;connection&gt;
   &lt;!--vpn&gt;vpn1&lt;/vpn--&gt;
   &lt;peer-address&gt;172.20.161.50&lt;/peer-address&gt;
   &lt;!--source-ip&gt;&lt;/source-ip--&gt;
   &lt;tcp-port&gt;64999&lt;/tcp-port&gt;
   &lt;!-- Password setup: default | none --&gt;
   &lt;password&gt;default&lt;/password&gt;
   &lt;!-- Mode: speaker/listener/both --&gt;
   &lt;mode&gt;speaker&lt;/mode&gt;
   &lt;version&gt;version4&lt;/version&gt;
   &lt;description&gt;Connection to ASR1K&lt;/description&gt;
   &lt;!-- Timers setup: 0 to disable specific timer usability, the default value will be used --&gt;
   &lt;connection-timers&gt;
    &lt;!-- Speaker --&gt;
    &lt;hold-time-min-acceptable&gt;45&lt;/hold-time-min-acceptable&gt;
    &lt;keep-alive-time&gt;30&lt;/keep-alive-time&gt;
   &lt;/connection-timers&gt;
  &lt;/connection&gt;
  &lt;connection&gt;
   &lt;!--vpn&gt;vpn1&lt;/vpn--&gt;
   &lt;peer-address&gt;172.20.161.178&lt;/peer-address&gt;
   &lt;!--source-ip&gt;&lt;/source-ip--&gt;
   &lt;tcp-port&gt;64999&lt;/tcp-port&gt;
   &lt;!-- Password setup: default | none --&gt;
   &lt;password&gt;default&lt;/password&gt;
   &lt;!-- Mode: speaker/listener/both --&gt;
   &lt;mode&gt;listener&lt;/mode&gt;
   &lt;version&gt;version4&lt;/version&gt;
   &lt;description&gt;Connection to ISR&lt;/description&gt;
   &lt;!-- Timers setup: 0 to disable specific timer usability, the default value will be used --&gt;
   &lt;connection-timers&gt;
    &lt;!-- Listener --&gt;
    &lt;!-- NON-CONFIGURABLE delete-hold-down-time --&gt;
    &lt;reconciliation-time&gt;120&lt;/reconciliation-time&gt;
    &lt;hold-time&gt;90&lt;/hold-time&gt;
    &lt;hold-time-min&gt;90&lt;/hold-time-min&gt;
    &lt;hold-time-max&gt;180&lt;/hold-time-max&gt;
   &lt;/connection-timers&gt;
  &lt;/connection&gt;
 &lt;/connections&gt;
&lt;/input&gt;</screen>

<itemizedlist>
<listitem>
<simpara>Delete Connection
POST <link xlink:href="http://127.0.0.1:8181/restconf/operations/sxp-controller:delete-connection">http://127.0.0.1:8181/restconf/operations/sxp-controller:delete-connection</link></simpara>
</listitem>
</itemizedlist>

<screen>&lt;input xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
 &lt;peer-address&gt;172.20.161.50&lt;/peer-address&gt;
&lt;/input&gt;</screen>

<itemizedlist>
<listitem>
<simpara>Add Binding Entry
POST <link xlink:href="http://127.0.0.1:8181/restconf/operations/sxp-controller:add-entry">http://127.0.0.1:8181/restconf/operations/sxp-controller:add-entry</link></simpara>
</listitem>
</itemizedlist>

<screen>&lt;input xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
 &lt;ip-prefix&gt;192.168.2.1/32&lt;/ip-prefix&gt;
 &lt;sgt&gt;20&lt;/sgt &gt;
&lt;/input&gt;</screen>

<itemizedlist>
<listitem>
<simpara>Update Binding Entry
POST <link xlink:href="http://127.0.0.1:8181/restconf/operations/sxp-controller:update-entry">http://127.0.0.1:8181/restconf/operations/sxp-controller:update-entry</link></simpara>
</listitem>
</itemizedlist>

<screen>&lt;input xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
 &lt;original-binding&gt;
  &lt;ip-prefix&gt;192.168.2.1/32&lt;/ip-prefix&gt;
  &lt;sgt&gt;20&lt;/sgt&gt;
 &lt;/original-binding&gt;
 &lt;new-binding&gt;
  &lt;ip-prefix&gt;192.168.3.1/32&lt;/ip-prefix&gt;
  &lt;sgt&gt;30&lt;/sgt&gt;
 &lt;/new-binding&gt;
&lt;/input&gt;</screen>

<itemizedlist>
<listitem>
<simpara>Delete Binding Entry
POST <link xlink:href="http://127.0.0.1:8181/restconf/operations/sxp-controller:delete-entry">http://127.0.0.1:8181/restconf/operations/sxp-controller:delete-entry</link></simpara>
</listitem>
</itemizedlist>

<screen>&lt;input xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
 &lt;ip-prefix&gt;192.168.3.1/32&lt;/ip-prefix&gt;
 &lt;sgt&gt;30&lt;/sgt &gt;
&lt;/input&gt;</screen>

<itemizedlist>
<listitem>
<simpara>Get Node Bindings</simpara>
<simpara>This RPC gets particular device bindings. An SXP-aware node is identified with a unique Node-ID. If a user requests bindings
for a Speaker 20.0.0.2, the RPC will search for an appropriate path, which contains 20.0.0.2 Node-ID, within locally learnt
SXP data in the SXP database and replies with associated bindings.
POST <link xlink:href="http://127.0.0.1:8181/restconf/operations/sxp-controller:get-node-bindings">http://127.0.0.1:8181/restconf/operations/sxp-controller:get-node-bindings</link></simpara>
</listitem>
</itemizedlist>

<screen>&lt;input xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
 &lt;requested-node&gt;20.0.0.2&lt;/requested-node&gt;
&lt;/input&gt;</screen>

<itemizedlist>
<listitem>
<simpara>Get Binding SGTs
POST <link xlink:href="http://127.0.0.1:8181/restconf/operations/sxp-controller:get-binding-sgts">http://127.0.0.1:8181/restconf/operations/sxp-controller:get-binding-sgts</link></simpara>
</listitem>
</itemizedlist>

<screen>&lt;input xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
 &lt;ip-prefix&gt;192.168.12.2/32&lt;/ip-prefix&gt;
&lt;/input&gt;</screen>

<section xml:id="_use_cases_for_sxp">
<title>Use cases for SXP</title>
<simpara>Cisco has a wide installed base of network devices supporting SXP. By including SXP in OpenDaylight, the binding of policy groups to IP addresses can be made available for possible further processing to a wide range of devices, and applications running on OpenDaylight. The range of applications that would be enabled is extensive. Here are just a few of them:</simpara>
<simpara>OpenDaylight based applications can take advantage of the IP-SGT binding information. For example, access control can be defined by an operator in terms of policy groups, while OpenDaylight can configure access control lists on network elements using IP addresses, e.g., existing technology.</simpara>
<simpara>Interoperability between different vendors. Vendors have different policy systems. Knowing the IP-SGT binding for Cisco makes it possible to maintain policy groups between Cisco and other vendors.</simpara>
<simpara>OpenDaylight can aggregate the binding information from many devices and communicate it to a network element. For example, a firewall can use the IP-SGT binding information to know how to handle IPs based on the group-based ACLs it has set. But to do this with SXP alone, the firewall has to maintain a large number of network connections to get the binding information. This incurs heavy overhead costs to maintain all of the SXP peering and protocol information. OpenDaylight can aggregate the IP-group information so that the firewall need only connect to OpenDaylight. By moving the information flow outside of the network elements to a centralized position, we reduce the overhead of the CPU consumption on the enforcement element. This is a huge savings - it allows the enforcement point to only have to make one connection rather than thousands, so it can concentrate on its primary job of forwarding and enforcing.</simpara>
<simpara>OpenDaylight can relay the binding information from one network element to others. Changes in group membership can be propagated more readily through a centralized model. For example, in a security application a particular host (e.g., user or IP Address) may be found to be acting suspiciously or violating established security policies. The defined response is to put the host into a different source group for remediation actions such as a lower quality of service, restricted access to critical servers, or special routing conditions to ensure deeper security enforcement (e.g., redirecting the host’s traffic through an IPS with very restrictive policies). Updated group membership for this host needs to be communicated to multiple network elements as soon as possible; a very efficient and effective method of propagation can be performed using OpenDaylight as a centralized point for relaying the information.</simpara>
<simpara>OpenDayLight can create filters for exporting and recieving IP-SGTT bindings used on specific peer groups, thus can provide more complex maintaining of policy groups.</simpara>
<simpara>Although the IP-SGT binding is only one specific piece of information, and although SXP is implemented widely in a single vendor’s equipment, bringing the ability of OpenDaylight to process and distribute the bindings, is a very specific immediate useful implementation of policy groups. It would go a long way to develop both the usefulness of OpenDaylight and of policy groups.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_tcpmd5_user_guide">
<title>TCPMD5 User Guide</title>
<simpara>This user guide describes the configuration for Border Gateway Protocol (BGP) and Path Computation Element Protocol (PCEP)
using MD5 authentication. It is destined for users who build applications using MD5 library.</simpara>
<section xml:id="_overview_45">
<title>Overview</title>
<simpara>The TCPMD5 library provides access to <link xlink:href="http://tools.ietf.org/html/rfc2385">RFC-2385</link> MD5 Signature Option on operating systems which support it in their TCP stack.
This option has been historically used to protect BGP sessions, but is equally useful for protecting PCEP sessions.</simpara>
<important>
<simpara><emphasis role="strong">Before you continue with steps in this user guide, make sure BGP and/or PCEP is configured properly.</emphasis></simpara>
</important>

<simpara>TCPMD5 authentication is <emphasis role="strong">disabled</emphasis> by default. To enable it (for both protocols), uncomment the contents of <emphasis>20-tcpmd5.xml</emphasis>.
You can find this configuration file in your OpenDaylight directory <emphasis>etc/opendaylight/karaf</emphasis> .</simpara>
<caution>
<simpara><phrase role="big"><emphasis role="strong">If the connection can not be established, there are no warnings or errors,
so be sure to double check your configuration and passwords.</emphasis></phrase></simpara>
</caution>

</section>
<section xml:id="_configuring_tcpmd5_manually">
<title>Configuring TCPMD5 manually</title>
<section xml:id="_bgp">
<title>BGP</title>
<important>
<simpara><emphasis role="strong">Make sure your <emphasis>20-tcpmd5.xml</emphasis> has its content uncommented.</emphasis></simpara>
</important>

<simpara>To enable TCPMD5 for the BGP protocol, perform the following steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>In <emphasis>31-bgp.xml</emphasis> uncomment the TCP MD5 section:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!--
 Uncomment this block to enable TCPMD5 Signature support
--&gt;
&lt;md5-channel-factory&gt;
 &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;prefix:md5-channel-factory&lt;/type&gt;
 &lt;name&gt;md5-client-channel-factory&lt;/name&gt;
&lt;/md5-channel-factory&gt;
&lt;md5-server-channel-factory&gt;
 &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;prefix:md5-server-channel-factory&lt;/type&gt;
 &lt;name&gt;md5-server-channel-factory&lt;/name&gt;
&lt;/md5-server-channel-factory&gt;</programlisting>

</listitem>
<listitem>
<simpara>In <emphasis>41-bgp-example.xml</emphasis> add &lt;password&gt; tag to module example-bgp-peer.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!--
 For TCPMD5 support, make sure the dispatcher associated with the rib has
 "md5-channel-factory" attribute set and then add a "password" attribute here.
 Note that the peer has to have the same password configured, otherwise the
 connection will not be established.
--&gt;
&lt;module&gt;
 &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;prefix:bgp-peer&lt;/type&gt;
 &lt;name&gt;example-bgp-peer&lt;/name&gt;
 &lt;host&gt;10.25.2.27&lt;/host&gt;
 &lt;holdtimer&gt;180&lt;/holdtimer&gt;
 &lt;rib&gt;
  &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:cfg"&gt;prefix:rib&lt;/type&gt;
  &lt;name&gt;example-bgp-rib&lt;/name&gt;
 &lt;/rib&gt;
 &lt;advertized-table&gt;
  &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;prefix:bgp-table-type&lt;/type&gt;
  &lt;name&gt;ipv4-unicast&lt;/name&gt;
 &lt;/advertized-table&gt;
 &lt;advertized-table&gt;
  &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;prefix:bgp-table-type&lt;/type&gt;
  &lt;name&gt;ipv6-unicast&lt;/name&gt;
 &lt;/advertized-table&gt;
 &lt;advertized-table&gt;
  &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;prefix:bgp-table-type&lt;/type&gt;
  &lt;name&gt;linkstate&lt;/name&gt;
 &lt;/advertized-table&gt;
 &lt;password&gt;changeme&lt;/password&gt;
&lt;/module&gt;</programlisting>

</listitem>
</orderedlist>

<note>
<simpara>Setting a password on other BGP devices is out of scope for this document.</simpara>
</note>

</section>
<section xml:id="_pcep">
<title>PCEP</title>
<important>
<simpara><emphasis role="strong">Make sure your <emphasis>20-tcpmd5.xml</emphasis> has its content uncommented.</emphasis></simpara>
</important>

<simpara>To enable TCPMD5 for PCE protocol, perform the following steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>In <emphasis>32-pcep.xml</emphasis> uncomment the TCPMD5 section:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!--
 Uncomment this block to enable TCPMD5 Signature support
--&gt;
&lt;md5-channel-factory&gt;
 &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;prefix:md5-channel-factory&lt;/type&gt;
  &lt;name&gt;md5-client-channel-factory&lt;/name&gt;
&lt;/md5-channel-factory&gt;
&lt;md5-server-channel-factory&gt;
 &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;prefix:md5-server-channel-factory&lt;/type&gt;
  &lt;name&gt;md5-server-channel-factory&lt;/name&gt;
&lt;/md5-server-channel-factory&gt;</programlisting>

</listitem>
<listitem>
<simpara>In <emphasis>39-pcep-provider.xml</emphasis> uncomment following section:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!--
 For TCPMD5 support make sure the dispatcher has the "md5-server-channel-factory"
 attribute set and then set the appropriate client entries here. Note that if this
 option is configured, the PCCs connecting here must have the same password,
 otherwise they will not be able to connect.
 --&gt;
 &lt;client&gt;
  &lt;address&gt;192.0.2.2&lt;/address&gt;
  &lt;password&gt;changeme&lt;/password&gt;
 &lt;/client&gt;</programlisting>

</listitem>
</orderedlist>

<important>
<simpara><emphasis role="strong">Change the &lt;address&gt; value to the address of PCC, the one that is advertized to PCE and provide password matching the one set on PCC.</emphasis></simpara>
</important>

<note>
<simpara>Setting a password on PCC is out of scope for this document.</simpara>
</note>

</section>
</section>
<section xml:id="_configuring_tcpmd5_through_restconf">
<title>Configuring TCPMD5 through RESTCONF</title>
<important>
<simpara>Before you start, make sure, you have installed features for BGP and/or PCEP. Install another feature, that will provide you the access to <emphasis>restconf/config/</emphasis> URLs.</simpara>
</important>

<programlisting language="xml" linenumbering="unnumbered">feature:install odl-netconf-connector-all</programlisting>

<simpara>This log message indicates successful start of netconf-connector: <emphasis>Netconf connector initialized successfully</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>To check what modules you have currently configured, check following link: <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/</link></simpara>
</listitem>
<listitem>
<simpara>To check what services you have currently configured, check following link: <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:services/">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:services/</link></simpara>
</listitem>
</itemizedlist>

<simpara>These URLs are also used to POST new configuration. If you want to change any other configuration that is listed here,
make sure you include the correct namespaces. The correct namespace for &lt;module&gt; is always <emphasis>urn:opendaylight:params:xml:ns:yang:controller:config</emphasis>.
The namespace for any other fields can be found by finding given module in configuration yang files.</simpara>
<note>
<simpara>RESTCONF will tell you if some namespace is wrong.</simpara>
</note>

<simpara>To enable TCPMD5 for either one of the protocols, enable TCPMD5 modules and services:</simpara>
<caution>
<simpara>You have to make <emphasis role="strong">separate</emphasis> POST requests for each module/service!</simpara>
</caution>

<simpara><phrase role="big">*URL:</phrase> <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/</link></simpara>
<simpara><phrase role="big"><emphasis role="strong">POST:</emphasis></phrase></simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:jni:cfg"&gt;x:native-key-access-factory&lt;/type&gt;
 &lt;name&gt;global-key-access-factory&lt;/name&gt;
&lt;/module&gt;</programlisting>

<programlisting language="xml" linenumbering="unnumbered">&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;x:md5-client-channel-factory&lt;/type&gt;
 &lt;name&gt;md5-client-channel-factory&lt;/name&gt;
 &lt;key-access-factory xmlns="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:cfg"&gt;x:key-access-factory&lt;/type&gt;
  &lt;name&gt;global-key-access-factory&lt;/name&gt;
 &lt;/key-access-factory&gt;
&lt;/module&gt;</programlisting>

<programlisting language="xml" linenumbering="unnumbered">&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;prefix:md5-server-channel-factory-impl&lt;/type&gt;
 &lt;name&gt;md5-server-channel-factory&lt;/name&gt;
 &lt;server-key-access-factory xmlns="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:cfg"&gt;x:key-access-factory&lt;/type&gt;
  &lt;name&gt;global-key-access-factory&lt;/name&gt;
 &lt;/server-key-access-factory&gt;
&lt;/module&gt;</programlisting>

<simpara><phrase role="big"><emphasis role="strong">URL:</emphasis></phrase> <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:services/">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:services/</link></simpara>
<simpara><phrase role="big"><emphasis role="strong">POST:</emphasis></phrase></simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;service xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:cfg"&gt;x:key-access-factory&lt;/type&gt;
 &lt;instance&gt;
  &lt;name&gt;global-key-access-factory&lt;/name&gt;
  &lt;provider&gt;/modules/module[type='native-key-access-factory'][name='global-key-access-factory']&lt;/provider&gt;
 &lt;/instance&gt;
&lt;/service&gt;</programlisting>

<programlisting language="xml" linenumbering="unnumbered">&lt;service  xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;x:md5-channel-factory&lt;/type&gt;
 &lt;instance&gt;
  &lt;name&gt;md5-client-channel-factory&lt;/name&gt;
  &lt;provider&gt;/modules/module[type='md5-client-channel-factory'][name='md5-client-channel-factory']&lt;/provider&gt;
 &lt;/instance&gt;
&lt;/service&gt;</programlisting>

<programlisting language="xml" linenumbering="unnumbered">&lt;service xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;prefix:md5-server-channel-factory&lt;/type&gt;
 &lt;instance&gt;
  &lt;name&gt;md5-server-channel-factory&lt;/name&gt;
  &lt;provider&gt;/modules/module[type='md5-server-channel-factory-impl'][name='md5-server-channel-factory']&lt;/provider&gt;
 &lt;/instance&gt;
&lt;/service&gt;</programlisting>

<section xml:id="_bgp_2">
<title>BGP</title>
<caution>
<simpara>You have to introduce modules and services mentioned in the previous section.  Your BGP client needs to be <emphasis role="strong">ALREADY</emphasis> configured. Check User Guide for BGP.</simpara>
</caution>

<caution>
<simpara>You need to copy and paste FULL module in order to replace it. This guide shows you part you need to change.</simpara>
</caution>

<orderedlist numeration="arabic">
<listitem>
<simpara>Enabling TCPMD5 in BGP configuration:</simpara>
<simpara><phrase role="big"><emphasis role="strong">URL:</emphasis></phrase> <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/odl-bgp-rib-impl-cfg:bgp-dispatcher-impl/global-bgp-dispatcher">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/odl-bgp-rib-impl-cfg:bgp-dispatcher-impl/global-bgp-dispatcher</link></simpara>
</listitem>
</orderedlist>

<simpara><phrase role="big"><emphasis role="strong">PUT:</emphasis></phrase></simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:bgp-dispatcher-impl&lt;/type&gt;
 &lt;name&gt;global-bgp-dispatcher&lt;/name&gt;
 &lt;md5-channel-factory xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;x:md5-channel-factory&lt;/type&gt;
  &lt;name&gt;md5-client-channel-factory&lt;/name&gt;
 &lt;/md5-channel-factory&gt;
 &lt;md5-server-channel-factory xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;x:md5-server-channel-factory&lt;/type&gt;
  &lt;name&gt;md5-server-channel-factory&lt;/name&gt;
 &lt;/md5-server-channel-factory&gt;
 ...
&lt;/module&gt;</programlisting>

<caution>
<simpara>You need to copy and paste FULL module in order to replace it. This guide shows you part you need to change.</simpara>
</caution>

<orderedlist numeration="arabic">
<listitem>
<simpara>Set password:</simpara>
<simpara><phrase role="big"><emphasis role="strong">URL:</emphasis></phrase> <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/odl-bgp-rib-impl-cfg:bgp-peer/example-bgp-peer">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/odl-bgp-rib-impl-cfg:bgp-peer/example-bgp-peer</link></simpara>
</listitem>
</orderedlist>

<simpara><phrase role="big"><emphasis role="strong">PUT:</emphasis></phrase></simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;x:bgp-peer&lt;/type&gt;
 &lt;name&gt;example-bgp-peer&lt;/name&gt;
 &lt;password xmlns="urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl"&gt;changeme&lt;/password&gt;
 ...
&lt;/module&gt;</programlisting>

</section>
<section xml:id="_pcep_2">
<title>PCEP</title>
<caution>
<simpara>You have to introduce modules and services mentioned in the previous section.</simpara>
</caution>

<caution>
<simpara>You need to copy and paste FULL module in order to replace it. This guide shows you part you need to change.</simpara>
</caution>

<orderedlist numeration="arabic">
<listitem>
<simpara>Enable TCPMD5 in PCEP configuration:</simpara>
<simpara><phrase role="big"><emphasis role="strong">URL:</emphasis></phrase> <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/odl-pcep-impl-cfg:pcep-dispatcher-impl/global-pcep-dispatcher">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/odl-pcep-impl-cfg:pcep-dispatcher-impl/global-pcep-dispatcher</link></simpara>
</listitem>
</orderedlist>

<simpara><phrase role="big"><emphasis role="strong">PUT:</emphasis></phrase></simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:pcep:impl"&gt;x:pcep-dispatcher-impl&lt;/type&gt;
 &lt;name&gt;global-pcep-dispatcher&lt;/name&gt;
 &lt;md5-channel-factory xmlns="urn:opendaylight:params:xml:ns:yang:controller:pcep:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;x:md5-channel-factory&lt;/type&gt;
  &lt;name&gt;md5-client-channel-factory&lt;/name&gt;
 &lt;/md5-channel-factory&gt;
 &lt;md5-server-channel-factory xmlns="urn:opendaylight:params:xml:ns:yang:controller:pcep:impl"&gt;
  &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:tcpmd5:netty:cfg"&gt;x:md5-server-channel-factory&lt;/type&gt;
  &lt;name&gt;md5-server-channel-factory&lt;/name&gt;
 &lt;/md5-server-channel-factory&gt;
 ...
&lt;/module&gt;</programlisting>

<caution>
<simpara>You need to copy and paste FULL module in order to replace it. This guide shows you part you need to change.</simpara>
</caution>

<orderedlist numeration="arabic">
<listitem>
<simpara>Set password:</simpara>
<simpara><phrase role="big"><emphasis role="strong">URL:</emphasis></phrase> <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/odl-pcep-impl-cfg:pcep-topology-provider/pcep-topology">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/odl-pcep-impl-cfg:pcep-topology-provider/pcep-topology</link></simpara>
</listitem>
</orderedlist>

<simpara><phrase role="big"><emphasis role="strong">PUT:</emphasis></phrase></simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
 &lt;type xmlns:x="urn:opendaylight:params:xml:ns:yang:controller:pcep:topology:provider"&gt;x:pcep-topology-provider&lt;/type&gt;
 &lt;name&gt;pcep-topology&lt;/name&gt;
 &lt;client xmlns="urn:opendaylight:params:xml:ns:yang:controller:pcep:topology:provider"&gt;
  &lt;address xmlns="urn:opendaylight:params:xml:ns:yang:controller:pcep:topology:provider"&gt;192.0.2.2&lt;/address&gt; &lt;!--CHANGE THE VALUE --&gt;
  &lt;password&gt;changeme&lt;/password&gt; &lt;!--CHANGE THE VALUE --&gt;
 &lt;/client&gt;
 ...
&lt;/module&gt;</programlisting>

</section>
</section>
</chapter>
<chapter xml:id="_tsdr_user_guide">
<title>TSDR User Guide</title>
<simpara>This document describes how to use HSQLDB, HBase, and Cassandra data stores to
capture time series data using Time Series Data Repository (TSDR) features
in OpenDaylight. This document contains configuration, administration, management,
usage, and troubleshooting sections for the features.</simpara>
<section xml:id="_overview_46">
<title>Overview</title>
<simpara>The Time Series Data Repository (TSDR) project in OpenDaylight (ODL) creates a
framework for collecting, storing, querying, and maintaining time series data.
TSDR provides the framework for plugging in proper data collectors to collect
various time series data and store the data into
TSDR Data Stores. With a common data model and generic TSDR data persistence
APIs, the user can choose various data stores to be plugged into the TSDR
persistence framework. Currently, three types of data stores are supported:
HSQLDB relational database, HBase NoSQL database, and Cassandra NoSQL database.</simpara>
<simpara>With the capabilities of data collection, storage, query, aggregation, and
purging provided by TSDR, network administrators can leverage various data
driven appliations built on top of TSDR for security risk detection,
performance analysis, operational configuration optimization, traffic
engineering, and network analytics with automated intelligence.</simpara>
</section>
<section xml:id="_tsdr_architecture">
<title>TSDR Architecture</title>
<simpara>TSDR has the following major components:</simpara>
<itemizedlist>
<listitem>
<simpara>Data Collection Service</simpara>
</listitem>
<listitem>
<simpara>Data Storage Service</simpara>
</listitem>
<listitem>
<simpara>TSDR Persistence Layer with data stores as plugins</simpara>
</listitem>
<listitem>
<simpara>TSDR Data Stores</simpara>
</listitem>
<listitem>
<simpara>Data Query Service</simpara>
</listitem>
<listitem>
<simpara>Grafana integration for time series data visualization</simpara>
</listitem>
<listitem>
<simpara>Data Aggregation Service</simpara>
</listitem>
<listitem>
<simpara>Data Purging Service</simpara>
</listitem>
</itemizedlist>

<simpara>The Data Collection Service handles the collection of time series data into TSDR and
hands it over to the Data Storage Service. The Data Storage Service stores the data
into TSDR through the TSDR Persistence Layer. The TSDR Persistence Layer provides generic
Service APIs allowing various data stores to be plugged in. The Data Aggregation
Service aggregates time series fine-grained raw data into course-grained roll-up
data to control the size of the data. The Data Purging Service periodically purges
both fine-grained raw data and course-granined aggregated data according to
user-defined schedules.</simpara>
<simpara>We have implemented The Data Collection Service, Data Storage Service, TSDR
Persistence Layer, TSDR HSQLDB Data Store, TSDR HBase Data Store, and TSDR Cassandra
Datastore. Among these services and components, time series data is communicated
using a common TSDR data model, which is designed and implemented for the
abstraction of time series data commonalities. With these functions, TSDR is
able to collect the data from the data sources and store them into one of
the TSDR data stores: HSQLDB Data Store, HBase Data Store or Cassandra Data
Store. Besides a simple query command from Karaf console to retrieve data from the
TSDR data stores, we also provided a Data Query Service for the user to use REST API
to query the data from the data stores. Moreover, the user can use Grafana, which is
a time series visualization tool to view the data stored in TSDR in various charting
formats.</simpara>
</section>
<section xml:id="_configuring_tsdr_data_stores">
<title>Configuring TSDR Data Stores</title>
<section xml:id="_to_configure_hsqldb_data_store">
<title>To Configure HSQLDB Data Store</title>
<simpara>The HSQLDB based storage files get stored automatically in &lt;karaf install folder&gt;/tsdr/
directory. If you want to change the default storage location, the configuration
file to change can be found in &lt;karaf install folder&gt;/etc directory. The filename
is org.ops4j.datasource-metric.cfg. Change the last portion of the  url=jdbc:hsqldb:./tsdr/metric
to point to different directory.</simpara>
</section>
<section xml:id="_to_configure_hbase_data_store">
<title>To Configure HBase Data Store</title>
<simpara>After installing HBase Server on the same machine as OpenDaylight, if the user accepts the default configuration of the HBase Data Store, the user can directly proceed with the installation of HBase Data Store from Karaf console.</simpara>
<simpara>Optionally, the user can configure TSDR HBase Data Store following HBase Data Store Configuration Procedure.</simpara>
<itemizedlist>
<listitem>
<simpara>HBase Data Store Configuration Steps</simpara>
<itemizedlist>
<listitem>
<simpara>Open the file etc/tsdr-persistence-hbase.peroperties under karaf distribution directory.</simpara>
</listitem>
<listitem>
<simpara>Edit the following parameters:</simpara>
<itemizedlist>
<listitem>
<simpara>HBase server name</simpara>
</listitem>
<listitem>
<simpara>HBase server port</simpara>
</listitem>
<listitem>
<simpara>HBase client connection pool size</simpara>
</listitem>
<listitem>
<simpara>HBase client write buffer size</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<simpara>After the configuration of HBase Data Store is complete, proceed with the installation of HBase Data Store from Karaf console.</simpara>
<itemizedlist>
<listitem>
<simpara>HBase Data Store Installation Steps</simpara>
<itemizedlist>
<listitem>
<simpara>Start Karaf Console</simpara>
</listitem>
<listitem>
<simpara>Run the following commands from Karaf Console:
feature:install odl-tsdr-hbase</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="_to_configure_cassandra_data_store">
<title>To Configure Cassandra Data Store</title>
<simpara>Currently, there&#8217;s no configuration needed for Cassandra Data Store. The user can use Cassandra data store directly after installing the feature from Karaf console.</simpara>
<simpara>Additionally separate commands have been implemented to install various data collectors.</simpara>
</section>
</section>
<section xml:id="_administering_or_managing_tsdr_data_stores">
<title>Administering or Managing TSDR Data Stores</title>
<section xml:id="_to_administer_hsqldb_data_store">
<title>To Administer HSQLDB Data Store</title>
<simpara>Once the TSDR default datastore feature (odl-tsdr-hsqldb-all) is enabled, the TSDR captured OpenFlow statistics metrics can be accessed from Karaf Console by executing the command</simpara>

<literallayout class="monospaced">tsdr:list &lt;metric-category&gt; &lt;starttimestamp&gt; &lt;endtimestamp&gt;</literallayout>


<simpara>wherein</simpara>
<itemizedlist>
<listitem>
<simpara>&lt;metric-category&gt; = any one of the following categories FlowGroupStats, FlowMeterStats, FlowStats, FlowTableStats, PortStats, QueueStats</simpara>
</listitem>
<listitem>
<simpara>&lt;starttimestamp&gt; = to filter the list of metrics starting this timestamp</simpara>
</listitem>
<listitem>
<simpara>&lt;endtimestamp&gt;   = to filter the list of metrics ending this timestamp</simpara>
</listitem>
<listitem>
<simpara>&lt;starttimestamp&gt; and &lt;endtimestamp&gt; are optional.</simpara>
</listitem>
<listitem>
<simpara>Maximum 1000 records will be displayed.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_to_administer_hbase_data_store">
<title>To Administer HBase Data Store</title>
<itemizedlist>
<listitem>
<simpara>Using Karaf Command to retrieve data from HBase Data Store</simpara>
</listitem>
</itemizedlist>

<simpara>The user first need to install hbase data store from karaf console:</simpara>
<simpara>feature:install odl-tsdr-hbase</simpara>
<simpara>The user can retrieve the data from HBase data store using the following commands from Karaf console:</simpara>

<literallayout class="monospaced">tsdr:list
tsdr:list &lt;CategoryName&gt; &lt;StartTime&gt; &lt;EndTime&gt;</literallayout>


<simpara>Typing tab will get the context prompt of the arguments when typeing the command in Karaf console.</simpara>
</section>
<section xml:id="_to_administer_cassandra_data_store">
<title>To Administer Cassandra Data Store</title>
<simpara>The user first needs to install Cassandra data store from Karaf console:</simpara>

<literallayout class="monospaced">feature:install odl-tsdr-cassandra</literallayout>


<simpara>Then the user can retrieve the data from Cassandra data store using the following commands from Karaf console:</simpara>

<literallayout class="monospaced">tsdr:list
tsdr:list &lt;CategoryName&gt; &lt;StartTime&gt; &lt;EndTime&gt;</literallayout>


<simpara>Typing tab will get the context prompt of the arguments when typeing the command in Karaf console.</simpara>
</section>
</section>
<section xml:id="_installing_tsdr_data_collectors">
<title>Installing TSDR Data Collectors</title>
<simpara>When the user uses HSQLDB data store and installed "odl-tsdr-hsqldb-all" feature from Karaf console, besides the HSQLDB data store, OpenFlow data collector is also installed with this command. However, if the user needs to use other collectors, such as NetFlow Collector, Syslog Collector, SNMP Collector, and Controller Metrics Collector, the user needs to install them with separate commands. If the user uses HBase or Cassandra data store, no collectors will be installed when the data store is installed. Instead, the user needs to install each collector separately using feature install command from Karaf console.</simpara>
<simpara>The following is the list of supported TSDR data collectors with the associated feature install commands:</simpara>
<itemizedlist>
<listitem>
<simpara>OpenFlow Data Collector</simpara>

<literallayout class="monospaced">feature:install odl-tsdr-openflow-statistics-collector</literallayout>


</listitem>
<listitem>
<simpara>SNMP Data Collector</simpara>

<literallayout class="monospaced">feature:install odl-tsdr-snmp-data-collector</literallayout>


</listitem>
<listitem>
<simpara>NetFlow Data Collector</simpara>

<literallayout class="monospaced">feature:install odl-tsdr-netflow-statistics-collector</literallayout>


</listitem>
<listitem>
<simpara>Syslog Data Collector</simpara>

<literallayout class="monospaced">feature:install odl-tsdr-syslog-collector</literallayout>


</listitem>
<listitem>
<simpara>Controller Metrics Collector</simpara>

<literallayout class="monospaced">feature:install odl-tsdr-controller-metrics-collector</literallayout>


</listitem>
</itemizedlist>

<simpara>In order to use controller metrics collector, the user needs to install Sigar library.</simpara>
<simpara>The following is the instructions for installing Sigar library on Ubuntu:</simpara>
<itemizedlist>
<listitem>
<simpara>Install back end library by "sudo apt-get install libhyperic-sigar-java"</simpara>
</listitem>
<listitem>
<simpara>Execute "export LD_LIBRARY_PATH=/usr/lib/jni/:/usr/lib:/usr/local/lib" to set the path of the JNI (you can add this to the ".bashrc" in your home directory)</simpara>
</listitem>
<listitem>
<simpara>Download the file "sigar-1.6.4.jar". It might be also in your ".m2" directory under "~/.m2/resources/org/fusesource/sigar/1.6.4"</simpara>
</listitem>
<listitem>
<simpara>Create the directory "org/fusesource/sigar/1.6.4" under the "system" directory in your controller home directory and place the "sigar-1.6.4.jar" there</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_configuring_tsdr_data_collectors">
<title>Configuring TSDR Data Collectors</title>
<itemizedlist>
<listitem>
<simpara>SNMP Data Collector Device Credential Configuration</simpara>
</listitem>
</itemizedlist>

<simpara>After installing SNMP Data Collector, a configuration file under etc/ directory of ODL distribution is generated: etc/tsdr.snmp.cfg is created.</simpara>
<simpara>The following is a sample tsdr.snmp.cfg file:</simpara>
<simpara>credentials=[192.168.0.2,public],[192.168.0.3,public]</simpara>
<simpara>The above credentials indicate that TSDR SNMP Collector is going to connect to two devices. The IPAddress and Read community string of these two devices are (192.168.0.2, public), and (192.168.0.3) respectively.</simpara>
<simpara>The user can make changes to this configuration file any time during runtime. The configuration will be picked up by TSDR in the next cycle of data collection.</simpara>
<section xml:id="_polling_interval_configuration_for_snmp_collector_and_openflow_stats_collector">
<title>Polling interval configuration for SNMP Collector and OpenFlow Stats Collector</title>
<simpara>The default polling interval of SNMP Collector and OpenFlow Stats Collector is 30 seconds and 15 seconds respectively. The user can change the polling interval through restconf APIs at any time. The new polling interval will be picked up by TSDR in the next collection cycle.</simpara>
<itemizedlist>
<listitem>
<simpara>Retrieve Polling Interval API for SNMP Collector</simpara>
<itemizedlist>
<listitem>
<simpara>URL: <link xlink:href="http://localhost:8181/restconf/config/tsdr-snmp-data-collector:TSDRSnmpDataCollectorConfig">http://localhost:8181/restconf/config/tsdr-snmp-data-collector:TSDRSnmpDataCollectorConfig</link></simpara>
</listitem>
<listitem>
<simpara>Verb: GET</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Update Polling Interval API for SNMP Collector</simpara>
<itemizedlist>
<listitem>
<simpara>URL: <link xlink:href="http://localhost:8181/restconf/operations/tsdr-snmp-data-collector:setPollingInterval">http://localhost:8181/restconf/operations/tsdr-snmp-data-collector:setPollingInterval</link></simpara>
</listitem>
<listitem>
<simpara>Verb: POST</simpara>
</listitem>
<listitem>
<simpara>Content Type: application/json</simpara>
</listitem>
<listitem>
<simpara>Input Payload:</simpara>

<literallayout class="monospaced">{
   "input": {
       "interval": "15000"
   }
}</literallayout>


</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Retrieve Polling Interval API for OpenFlowStats Collector</simpara>
<itemizedlist>
<listitem>
<simpara>URL: <link xlink:href="http://localhost:8181/restconf/config/tsdr-openflow-statistics-collector:TSDROSCConfig">http://localhost:8181/restconf/config/tsdr-openflow-statistics-collector:TSDROSCConfig</link></simpara>
</listitem>
<listitem>
<simpara>Verb: GET</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Update Polling Interval API for OpenFlowStats Collector</simpara>
<itemizedlist>
<listitem>
<simpara>URL: <link xlink:href="http://localhost:8181/restconf/operations/tsdr-openflow-statistics-collector:setPollingInterval">http://localhost:8181/restconf/operations/tsdr-openflow-statistics-collector:setPollingInterval</link></simpara>
</listitem>
<listitem>
<simpara>Verb: POST</simpara>
</listitem>
<listitem>
<simpara>Content Type: application/json</simpara>
</listitem>
<listitem>
<simpara>Input Payload:</simpara>

<literallayout class="monospaced">{
   "input": {
       "interval": "15000"
   }
}</literallayout>


</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_querying_tsdr_from_rest_apis">
<title>Querying TSDR from REST APIs</title>
<simpara>TSDR provides two REST APIs for querying data stored in TSDR data stores.</simpara>
<itemizedlist>
<listitem>
<simpara>Query of TSDR Metrics</simpara>
<itemizedlist>
<listitem>
<simpara>URL: <link xlink:href="http://localhost:8181/tsdr/metrics/query">http://localhost:8181/tsdr/metrics/query</link></simpara>
</listitem>
<listitem>
<simpara>Verb: GET</simpara>
</listitem>
<listitem>
<simpara>Parameters:</simpara>
<itemizedlist>
<listitem>
<simpara>tsdrkey=[NID=][DC=][MN=][RK=]</simpara>

<literallayout class="monospaced">The TSDRKey format indicates the NodeID(NID), DataCategory(DC), MetricName(MN), and RecordKey(RK) of the monitored objects.
For example, the following is a valid tsdrkey:
[NID=openflow:1][DC=FLOWSTATS][MN=PacketCount][RK=Node:openflow:1,Table:0,Flow:3]
The following is also a valid tsdrkey:
tsdrkey=[NID=][DC=FLOWSTATS][MN=][RK=]
In the case when the sections in the tsdrkey is empty, the query will return all the records in the TSDR data store that matches the filled tsdrkey. In the above example, the query will return all the data in FLOWSTATS data category.
The query will return only the first 1000 records that match the query criteria.</literallayout>


</listitem>
<listitem>
<simpara>from=&lt;time_in_seconds&gt;</simpara>
</listitem>
<listitem>
<simpara>until=&lt;time_in_seconds&gt;</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<simpara>The following is an example curl command for querying metric data from TSDR data store:</simpara>
<simpara>curl -G -v -H "Accept: application/json" -H "Content-Type: application/json" "http://localhost:8181/tsdr/metrics/query" --data-urlencode "tsdrkey=[NID=][DC=FLOWSTATS][MN=][RK=]" --data-urlencode "from=0" --data-urlencode "until=240000000"|more</simpara>
<itemizedlist>
<listitem>
<simpara>Query of TSDR Log type of data</simpara>
<itemizedlist>
<listitem>
<simpara>URL:http://localhost:8181/tsdr/logs/query</simpara>
</listitem>
<listitem>
<simpara>Verb: GET</simpara>
</listitem>
<listitem>
<simpara>Parameters:</simpara>
<itemizedlist>
<listitem>
<simpara>tsdrkey=tsdrkey=[NID=][DC=][RK=]</simpara>

<literallayout class="monospaced">The TSDRKey format indicates the NodeID(NID), DataCategory(DC), and RecordKey(RK) of the monitored objects.
For example, the following is a valid tsdrkey:
[NID=openflow:1][DC=NETFLOW][RK]
The query will return only the first 1000 records that match the query criteria.</literallayout>


</listitem>
<listitem>
<simpara>from=&lt;time_in_seconds&gt;</simpara>
</listitem>
<listitem>
<simpara>until=&lt;time_in_seconds&gt;</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<simpara>The following is an example curl command for querying log type of data from TSDR data store:</simpara>
<simpara>curl -G -v -H "Accept: application/json" -H "Content-Type: application/json" "http://localhost:8181/tsdr/logs/query" --data-urlencode "tsdrkey=[NID=][DC=NETFLOW][RK=]" --data-urlencode "from=0" --data-urlencode "until=240000000"|more</simpara>
</section>
<section xml:id="_grafana_integration_with_tsdr">
<title>Grafana integration with TSDR</title>
<simpara>TSDR provides northbound integration with Grafana time series data visualization tool. All the metric type of data stored in TSDR data store can be visualized using Grafana.</simpara>
<simpara>For the detailed instruction about how to install and configure Grafana to work with TSDR, please refer to the following link:</simpara>
<simpara><link xlink:href="https://wiki.opendaylight.org/view/Grafana_Integration_with_TSDR_Step-by-Step">https://wiki.opendaylight.org/view/Grafana_Integration_with_TSDR_Step-by-Step</link></simpara>
</section>
<section xml:id="_purging_service_configuration">
<title>Purging Service configuration</title>
<simpara>After the data stores are installed from Karaf console, the purging service will be installed as well. A configuration file called tsdr.data.purge.cfg will be generated under etc/ directory of ODL distribution.</simpara>
<simpara>The following is the sample default content of the tsdr.data.purge.cfg file:</simpara>
<simpara>host=127.0.0.1
data_purge_enabled=true
data_purge_time=23:59:59
data_purge_interval_in_minutes=1440
retention_time_in_hours=168</simpara>
<simpara>The host indicates the IPAddress of the data store. In the case when the data store is together with ODL controller, 127.0.0.1 should be the right value for the host IP. The other attributes are self-explained. The user can change those attributes at any time. The configuration change will be picked up right away by TSDR Purging service at runtime.</simpara>
</section>
<section xml:id="_how_to_use_tsdr_to_collect_store_and_view_openflow_interface_statistics">
<title>How to use TSDR to collect, store, and view OpenFlow Interface Statistics</title>
<section xml:id="_overview_47">
<title>Overview</title>
<simpara>This tutorial describes an example of using TSDR to collect, store, and view one type of time series data in OpenDaylight environment.</simpara>
</section>
<section xml:id="_prerequisites_12">
<title>Prerequisites</title>
<simpara>You would need to have the following as prerequisits:</simpara>
<itemizedlist>
<listitem>
<simpara>One or multiple OpenFlow enabled switches. Alternatively, you can use mininet to simulate such a switch.</simpara>
</listitem>
<listitem>
<simpara>Successfully installed OpenDaylight Controller.</simpara>
</listitem>
<listitem>
<simpara>Successfully installed HBase Data Store following TSDR HBase Data Store Installation Guide.</simpara>
</listitem>
<listitem>
<simpara>Connect the OpenFlow enabled switch(es) to OpenDaylight Controller.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_target_environment_9">
<title>Target Environment</title>
<simpara>HBase data store is only supported in Linux operation system.</simpara>
</section>
<section xml:id="_instructions_16">
<title>Instructions</title>
<itemizedlist>
<listitem>
<simpara>Start OpenDaylight.</simpara>
</listitem>
<listitem>
<simpara>Connect OpenFlow enabled switch(es) to the controller.</simpara>
<itemizedlist>
<listitem>
<simpara>If using mininet, run the following commands from mininet command line:</simpara>
<itemizedlist>
<listitem>
<simpara>mn --topo single,3  --controller <emphasis>remote,ip=172.17.252.210,port=6653</emphasis> --switch ovsk,protocols=OpenFlow13</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Install tsdr hbase feature from Karaf:</simpara>
<itemizedlist>
<listitem>
<simpara>feature:install odl-tsdr-hbase</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Install OpenFlow Statistics Collector from Karaf:</simpara>
<itemizedlist>
<listitem>
<simpara>feature:install odl-tsdr-openflow-statistics-collector</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>run the following command from Karaf console:</simpara>
<itemizedlist>
<listitem>
<simpara>tsdr:list PORTSTATS</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<simpara>You should be able to see the interface statistics of the switch(es) from the HBase Data Store. If there are too many rows, you can use "tsdr:list InterfaceStats|more" to view it page by page.</simpara>
<simpara>By tabbing after "tsdr:list", you will see all the supported data categories. For example, "tsdr:list FlowStats" will output the Flow statistics data collected from the switch(es).</simpara>
</section>
</section>
<section xml:id="_troubleshooting_2">
<title>Troubleshooting</title>
<section xml:id="_karaf_logs">
<title>Karaf logs</title>
<simpara>All TSDR features and components write logging information including information messages, warnings, errors and debug messages into karaf.log.</simpara>
</section>
<section xml:id="_hbase_and_cassandra_logs">
<title>HBase and Cassandra logs</title>
<simpara>For HBase and Cassandra data stores, the database level logs are written into HBase log and Cassandra logs.</simpara>
<itemizedlist>
<listitem>
<simpara>HBase log</simpara>
<itemizedlist>
<listitem>
<simpara>HBase log is under &lt;HBase-installation-directory&gt;/logs/.</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Cassandra log</simpara>
<itemizedlist>
<listitem>
<simpara>Cassandra log is under {cassandra.logdir}/system.log. The default {cassandra.logdir} is /var/log/cassandra/.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
</section>
</chapter>
<chapter xml:id="_ttp_cli_tools_user_guide">
<title>TTP CLI Tools User Guide</title>
<section xml:id="_overview_48">
<title>Overview</title>
<simpara>Table Type Patterns are a specification developed by the
<link xlink:href="https://www.opennetworking.org/">Open Networking Foundation</link> to enable
the description and negotiation of subsets of the OpenFlow protocol.
This is particularly useful for hardware switches that support OpenFlow
as it enables the to describe what features they do (and thus also what
features they do not) support. More details can be found in the full
specification listed on the
<link xlink:href="https://www.opennetworking.org/sdn-resources/onf-specifications/openflow">OpenFlow
specifications page</link>.</simpara>
</section>
<section xml:id="_ttp_cli_tools_architecture">
<title>TTP CLI Tools Architecture</title>
<simpara>The TTP CLI Tools use the TTP Model and the YANG Tools/RESTCONF codecs
to translate between the Data Transfer Objects (DTOs) and JSON/XML.</simpara>
</section>
</chapter>
<chapter xml:id="_unified_secure_channel">
<title>Unified Secure Channel</title>
<simpara>This document describes how to use the Unified Secure Channel (USC)
feature in OpenDaylight.  This document contains configuration,
administration, and management sections for the feature.</simpara>
<section xml:id="_overview_49">
<title>Overview</title>
<simpara>In enterprise networks, more and more controller and network
management systems are being deployed remotely, such as in the
cloud. Additionally, enterprise networks are becoming more
heterogeneous - branch, IoT, wireless (including cloud access
control). Enterprise customers want a converged network controller
and management system solution.  This feature is intended for
device and network administrators looking to use unified secure
channels for their systems.</simpara>
</section>
<section xml:id="_usc_channel_architecture">
<title>USC Channel Architecture</title>
<itemizedlist>
<listitem>
<simpara>USC Agent</simpara>
<itemizedlist>
<listitem>
<simpara>The USC Agent provides proxy and agent functionality on top of all standard protocols supported by the device.  It initiates call-home with the controller, maintains live connections with with the controller, acts as a demuxer/muxer for packets with the USC header, and authenticates the controller.</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>USC Plugin</simpara>
<itemizedlist>
<listitem>
<simpara>The USC Plugin is responsible for communication between the controller and the USC agent .  It responds to call-home with the controller, maintains live connections with the devices, acts as a muxer/demuxer for packets with the USC header, and provides support for TLS/DTLS.</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>USC Manager</simpara>
<itemizedlist>
<listitem>
<simpara>The USC Manager handles configurations, high availability, security, monitoring, and clustering support for USC.</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>USC UI</simpara>
<itemizedlist>
<listitem>
<simpara>The USC UI is responsible for displaying a graphical user interface representing the state of USC in the OpenDaylight DLUX UI.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="_installing_usc_channel">
<title>Installing USC Channel</title>
<simpara>To install USC, download OpenDaylight and use the Karaf console
to install the following feature:</simpara>
<simpara>odl-usc-channel-ui</simpara>
</section>
<section xml:id="_configuring_usc_channel">
<title>Configuring USC Channel</title>
<simpara>This section gives details about the configuration settings for various components in USC.</simpara>
<simpara>The USC configuration files for the Karaf distribution are located in distribution/karaf/target/assembly/etc/usc</simpara>
<itemizedlist>
<listitem>
<simpara>certificates</simpara>
<itemizedlist>
<listitem>
<simpara>The certificates folder contains the client key, pem, and rootca files as is necessary for security.</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>akka.conf</simpara>
<itemizedlist>
<listitem>
<simpara>This file contains configuration related to clustering.  Potential configuration properties can be found on the akka website at <link xlink:href="http://doc.akka.io">http://doc.akka.io</link></simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>usc.properties</simpara>
<itemizedlist>
<listitem>
<simpara>This file contains configuration related to USC.  Use this file to set the location of certificates, define the source of additional akka configurations, and assign default settings to the USC behavior.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="_administering_or_managing_usc_channel">
<title>Administering or Managing USC Channel</title>
<simpara>After installing the odl-usc-channel-ui feature from the Karaf console, users can administer and manage USC channels from the the UI or APIDOCS explorer.</simpara>
<simpara>Go to <link xlink:href="http://${ipaddress}:8181/index.html">http://${ipaddress}:8181/index.html</link>, sign in, and click on the USC side menu tab.  From there, users can view the state of USC channels.</simpara>
<simpara>Go to <link xlink:href="http://${ipaddress}:8181/apidoc/explorer/index.html">http://${ipaddress}:8181/apidoc/explorer/index.html</link>, sign in, and expand the usc-channel panel.  From there, users can execute various API calls to test their USC deployment such as add-channel, delete-channel, and view-channel.</simpara>
</section>
<section xml:id="_tutorials_10">
<title>Tutorials</title>
<simpara>Below are tutorials for USC Channel</simpara>
<section xml:id="_viewing_usc_channel">
<title>Viewing USC Channel</title>
<simpara>The purpose of this tutorial is to view USC Channel</simpara>
<section xml:id="_overview_50">
<title>Overview</title>
<simpara>This tutorial walks users through the process of viewing the USC
Channel environment topology including established channels connecting
the controllers and devices in the USC topology.</simpara>
</section>
<section xml:id="_prerequisites_13">
<title>Prerequisites</title>
<simpara>For this tutorial, we assume that a device running a USC agent
is already installed.</simpara>
</section>
<section xml:id="_instructions_17">
<title>Instructions</title>
<itemizedlist>
<listitem>
<simpara>Run the OpenDaylight distribution and install odl-usc-channel-ui from the Karaf console.</simpara>
</listitem>
<listitem>
<simpara>Go to <link xlink:href="http://${ipaddress}:8181/apidoc/explorer/index.html">http://${ipaddress}:8181/apidoc/explorer/index.html</link></simpara>
</listitem>
<listitem>
<simpara>Execute add-channel with the following json data:</simpara>
<itemizedlist>
<listitem>
<simpara>{"input":{"channel":{"hostname":"127.0.0.1","port":1068,"remote":false}}}</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Go to <link xlink:href="http://${ipaddress}:8181/index.html">http://${ipaddress}:8181/index.html</link></simpara>
</listitem>
<listitem>
<simpara>Click on the USC side menu tab.</simpara>
</listitem>
<listitem>
<simpara>The UI should display a table including the added channel from step 3.</simpara>
</listitem>
</itemizedlist>

</section>
</section>
</section>
</chapter>
<chapter xml:id="_virtual_tenant_network_vtn">
<title>Virtual Tenant Network (VTN)</title>
<section xml:id="_vtn_overview">
<title>VTN Overview</title>
<simpara>OpenDaylight Virtual Tenant Network (VTN) is an application that provides multi-tenant virtual network on an SDN controller.</simpara>
<simpara>Conventionally, huge investment in the network systems and operating expenses are needed because the network is configured as a silo for each department and system. So, various network appliances must be installed for each tenant and those boxes cannot be shared with others. It is a heavy work to design, implement and operate the entire complex network.</simpara>
<simpara>The uniqueness of VTN is a logical abstraction plane. This enables the complete separation of logical plane from physical plane. Users can design and deploy any desired network without knowing the physical network topology or bandwidth restrictions.</simpara>
<simpara>VTN allows the users to define the network with a look and feel of conventional L2/L3 network. Once the network is designed on VTN, it will automatically be mapped into underlying physical network, and then configured on the individual switch leveraging SDN control protocol. The definition of logical plane makes it possible not only to hide the complexity of the underlying network but also to better manage network resources. It achieves reducing reconfiguration time of network services and minimizing network configuration errors.</simpara>
<figure>
<title>VTN Overview</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/VTN_Overview.jpg" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>VTN Overview</phrase></textobject>
  </mediaobject>
</figure>

<simpara>It is implemented as two major components</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="_vtn_manager">VTN Manager</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="_vtn_coordinator">VTN Coordinator</link></simpara>
</listitem>
</itemizedlist>

<section xml:id="_vtn_manager">
<title>VTN Manager</title>
<simpara>An OpenDaylight Controller Plugin that interacts with other modules to implement the components of the VTN model. It also provides a REST interface to configure VTN components in ODL controller. VTN Manager is implemented as one plugin to the OpenDaylight controller. This provides a REST interface to create/update/delete VTN components. The user command in VTN Coordinator is translated as REST API to VTN Manager by the ODC Driver component. In addition to the above mentioned role, it also provides an implementation to the OpenStack L2 Network Functions API.</simpara>
<section xml:id="_features_overview">
<title>Features Overview</title>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">odl-vtn-manager</emphasis> provides VTN Manager&#8217;s JAVA API.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">odl-vtn-manager-rest</emphasis> provides VTN Manager&#8217;s REST API.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">odl-vtn-manager-neutron</emphasis> provides the integration with Neutron interface.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_rest_api">
<title>REST API</title>
<simpara>VTN Manager provides REST API for virtual network functions.</simpara>
<simpara>Here is an example of how to create a virtual tenant network.</simpara>
<screen> curl --user "admin":"admin" -H "Accept: application/json" -H \
 "Content-type: application/json" -X POST \
 http://localhost:8282/controller/nb/v2/vtn/default/vtns/Tenant1 \
 -d '{"description": "My First Virtual Tenant Network"}'</screen>

<simpara>You can check the list of all tenants by executing the following command.</simpara>
<screen> curl --user "admin":"admin" -H "Accept: application/json" -H \
 "Content-type: application/json" -X GET \
 http://localhost:8282/controller/nb/v2/vtn/default/vtns</screen>

<simpara>REST API documentation for VTN Manager, please refer: <link xlink:href="https://jenkins.opendaylight.org/releng/view/vtn/job/vtn-merge-master/lastSuccessfulBuild/artifact/manager/northbound/target/site/wsdocs/rest.html">https://jenkins.opendaylight.org/releng/view/vtn/job/vtn-merge-master/lastSuccessfulBuild/artifact/manager/northbound/target/site/wsdocs/rest.html</link></simpara>
</section>
</section>
<section xml:id="_vtn_coordinator">
<title>VTN Coordinator</title>
<simpara>The VTN Coordinator is an external application that provides a REST interface for a user to use the VTN Virtualization. It interacts with VTN Manager plugin to implement the user configuration. It is also capable of multiple controller orchestration. It realizes Virtual Tenant Network (VTN) provisioning in OpenDaylight Controllers (ODC). In the OpenDaylight architecture VTN Coordinator is part of the network application, orchestration and services layer. VTN Coordinator has been implemented as an external application to the OpenDaylight controller. This component is responsible for the VTN virtualization. VTN Coordinator will use the REST interface exposed by the VTN Manger to realize the virtual network using the OpenDaylight controller. It uses OpenDaylight APIs (REST) to construct the virtual network in ODCs. It provides REST APIs for northbound VTN applications and supports virtual networks spanning across multiple ODCs by coordinating across ODCs.</simpara>
<simpara>For VTN Coordinator REST API, please refer: <link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_%28VTN%29:VTN_Coordinator:RestApi">https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_%28VTN%29:VTN_Coordinator:RestApi</link></simpara>
</section>
<section xml:id="_network_virtualization_function">
<title>Network Virtualization Function</title>
<simpara>The user first defines a VTN. Then, the user maps the VTN to a physical network, which enables communication to take place according to the VTN definition. With the VTN definition, L2 and L3 transfer functions and flow-based traffic control functions (filtering and redirect) are possible.</simpara>
</section>
<section xml:id="_virtual_network_construction">
<title>Virtual Network Construction</title>
<simpara>The following table shows the elements which make up the VTN.
In the VTN, a virtual network is constructed using virtual nodes (vBridge, vRouter) and virtual interfaces and links.
It is possible to configure a network which has L2 and L3 transfer function, by connecting the virtual intrefaces made on virtual nodes via virtual links.</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="50*"/>
    
    <colspec colname="col_2" colwidth="50*"/>
    
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>vBridge</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The logical representation of L2 switch function.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>vRouter</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The logical representation of router function.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>vTep</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The logical representation of Tunnel End Point - TEP.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>vTunnel</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The logical representation of Tunnel.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>vBypass</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The logical representation of connectivity between controlled networks.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Virtual interface</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The representation of end point on the virtual node.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Virtual Linkv(vLink)</simpara></entry>
        
        <entry align="left" valign="top"><simpara>The logical representation of L1 connectivity between virtual interfaces.</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<simpara>The following figure shows an example of a constructed virtual network. VRT is defined as the vRouter, BR1 and BR2 are defined as vBridges. interfaces of the vRouter and vBridges are connected using vLinks.</simpara>
<figure>
<title>VTN Construction</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/VTN_Construction.jpg" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>VTN Construction</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_mapping_of_physical_network_resources">
<title>Mapping of Physical Network Resources</title>
<simpara>Map physical network resources to the constructed virtual network. Mapping identifies which virtual network each packet transmitted or received by an OpenFlow switch belongs to, as well as which interface in the OpenFlow switch transmits or receives that packet.
There are two mapping methods. When a packet is received from the OFS, port mapping is first searched for the corresponding mapping definition, then VLAN mapping is searched, and the packet is mapped to the relevant vBridge according to the first matching mapping.</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="50*"/>
    
    <colspec colname="col_2" colwidth="50*"/>
    
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Port mapping</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Maps physical network resources to an interface of vBridge using Switch ID, Port ID and VLAN ID of the incoming L2 frame. Untagged frame mapping is also supported.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>VLAN mapping</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Maps physical network resources to a vBridge using VLAN ID of the incoming L2 frame.Maps physical resources of a particular switch to a vBridge using switch ID and VLAN ID of the incoming L2 frame.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>MAC mapping</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Maps physical resources to an interface of vBridge using MAC address of the incoming L2 frame(The initial contribution does not include this method).</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<simpara>VTN can learn the terminal information from a terminal that is connected to a switch which is mapped to VTN. Further, it is possible to refer that terminal information on the VTN.</simpara>
<itemizedlist>
<listitem>
<simpara>Learning terminal information
VTN learns the information of a terminal that belongs to VTN. It will store the MAC address and VLAN ID of the terminal in relation to the port of the switch.</simpara>
</listitem>
<listitem>
<simpara>Aging of terminal information
Terminal information, learned by the VTN, will be maintained until the packets from terminal keep flowing in VTN. If the terminal gets disconnected from the VTN, then the aging timer will start clicking and the terminal information will be maintained till timeout.</simpara>
</listitem>
</itemizedlist>

<simpara>The following figure shows an example of mapping. An interface of BR1 is mapped to port GBE0/1 of OFS1 using port mapping. Packets received from GBE0/1 of OFS1 are regarded as those from the corresponding interface of BR1.
BR2 is mapped to VLAN 200 using VLAN mapping.
Packets with VLAN tag 200 received from any ports of any OFSs are regarded as those from an interface of BR2.</simpara>
<figure>
<title>VTN Mapping</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/VTN_Mapping.jpg"/>
    </imageobject>
    <textobject><phrase>VTN Mapping</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_vbridge_functions">
<title>vBridge Functions</title>
<simpara>The vBridge provides the bridge function that transfers a packet to the intended virtual port according to the destination MAC address.
The vBridge looks up the MAC address table and transmits the packet to the corresponding virtual interface when the destination MAC address has been learned. When the destination MAC address has not been learned, it transmits the packet to all virtual interfaces other than the receiving port (flooding).
MAC addresses are learned as follows.</simpara>
<itemizedlist>
<listitem>
<simpara>MAC address learning
The vBridge learns the MAC address of the connected host. The source MAC address of each received frame is mapped to the receiving virtual interface, and this MAC address is stored in the MAC address table created on a per-vBridge basis.</simpara>
</listitem>
<listitem>
<simpara>MAC address aging
  The MAC address stored in the MAC address table is retained as long as the host returns the ARP reply. After the host is disconnected, the address is retained until the aging timer times out.
To have the vBridge learn MAC addresses statically, you can register MAC addresses manually.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_vrouter_functions">
<title>vRouter Functions</title>
<simpara>The vRouter transfers IPv4 packets between vBridges. The vRouter supports routing, ARP learning, and ARP aging functions. The following outlines the functions.</simpara>
<itemizedlist>
<listitem>
<simpara>Routing function
When an IP address is registered with a virtual interface of the vRouter, the default routing information for that interface is registered. It is also possible to statically register routing information for a virtual interface.</simpara>
</listitem>
<listitem>
<simpara>ARP learning function
  The vRouter associates a destination IP address, MAC address and a virtual interface, based on an ARP request to its host or a reply packet for an ARP request, and maintains this information in an ARP table prepared for each routing domain. The registered ARP entry is retained until the aging timer, described later, times out. The vRouter transmits an ARP request on an individual aging timer basis and deletes the associated entry from the ARP table if no reply is returned. For static ARP learning, you can register ARP entry information manually.
*DHCP relay agent function
  The vRouter also provides the DHCP relay agent function.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_flow_filter_functions">
<title>Flow Filter Functions</title>
<simpara>Flow Filter function is similar to ACL. It is possible to allow or prohibit communication with only certain kind of packets that meet a particular condition. Also, it can perform a processing called Redirection - WayPoint routing, which is different from the existing ACL.
Flow Filter can be applied to any interface of a vNode within VTN, and it is possible to the control the packets that pass interface.
The match conditions that could be specified in Flow Filter are as follows. It is also possible to specify a combination of multiple conditions.</simpara>
<itemizedlist>
<listitem>
<simpara>Source MAC address</simpara>
</listitem>
<listitem>
<simpara>Destination MAC address</simpara>
</listitem>
<listitem>
<simpara>MAC ether type</simpara>
</listitem>
<listitem>
<simpara>VLAN Priority</simpara>
</listitem>
<listitem>
<simpara>Source IP address</simpara>
</listitem>
<listitem>
<simpara>Destination IP address</simpara>
</listitem>
<listitem>
<simpara>DSCP</simpara>
</listitem>
<listitem>
<simpara>IP Protocol</simpara>
</listitem>
<listitem>
<simpara>TCP/UDP source port</simpara>
</listitem>
<listitem>
<simpara>TCP/UDP destination port</simpara>
</listitem>
<listitem>
<simpara>ICMP type</simpara>
</listitem>
<listitem>
<simpara>ICMP code</simpara>
</listitem>
</itemizedlist>

<simpara>The types of Action that can be applied on packets that match the Flow Filter conditions are given in the following table.
It is possible to make only those packets, which match a particular condition, to pass through a particular server by specifying Redirection in Action. E.g., path of flow can be changed for each packet sent from a particular terminal, depending upon the destination IP address.
VLAN priority control and DSCP marking are also supported.</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="50*"/>
    
    <colspec colname="col_2" colwidth="50*"/>
    
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Pass</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Pass particular packets matching the specified conditions.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Drop</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Discards particular packets matching the specified conditions.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Redirection</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Redirects the packet to a desired virtual interface. Both Transparent Redirection (not changing MAC address) and Router Redirection (changing MAC address) are supported.</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<simpara>The following figure shows an example of how the flow filter function works.</simpara>
<simpara>If there is any matching condition specified by flow filter when a packet being transferred within a virtual network goes through a virtual interface, the function evaluates the matching condition to see whether the packet matches it.
If the packet matches the condition, the function applies the matching action specified by flow filter. In the example shown in the figure, the function evaluates the matching condition at BR1 and discards the packet if it matches the condition.</simpara>
<figure>
<title>VTN FlowFilter</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/VTN_Flow_Filter.jpg" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>VTN Flow Filter</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_multiple_sdn_controller_coordination">
<title>Multiple SDN Controller Coordination</title>
<simpara>With the network abstractions, VTN enables to configure virtual network across multiple SDN controllers. This provides highly scalable network system.</simpara>
<simpara>VTN can be created on each SDN controller. If users would like to manage those multiple VTNs with one policy, those VTNs can be integrated to a single VTN.</simpara>
<simpara>As a use case, this feature is deployed to multi data center environment. Even if those data centers are geographically separated and controlled with different controllers, a single policy virtual network can be realized with VTN.</simpara>
<simpara>Also, one can easily add a new SDN Controller to an existing VTN or delete a particular SDN Controller from VTN.</simpara>
<simpara>In addition to this, one can define a VTN which covers both OpenFlow network and Overlay network at the same time.</simpara>
<simpara>Flow Filter, which is set on the VTN, will be automatically applied on the newly added SDN Controller.</simpara>
</section>
<section xml:id="_coordination_between_openflow_network_and_l2_l3_network">
<title>Coordination between OpenFlow Network and L2/L3 Network</title>
<simpara>It is possible to configure VTN on an environment where there is mix of L2/L3 switches as well. L2/L3 switch will be shown on VTN as vBypass. Flow Filter or policing cannot be configured for a vBypass. However, it is possible to treat it as a virtual node inside VTN.</simpara>
</section>
<section xml:id="_virtual_tenant_network_vtn_api">
<title>Virtual Tenant Network (VTN) API</title>
<simpara>VTN provides Web APIs. They are implemented by REST architecture and provide the access to resources within VTN that are identified by URI.
User can perform the operations like GET/PUT/POST/DELETE against the virtual network resources (e.g. vBridge or vRouter) by sending a message to VTN through HTTPS communication in XML or JSON format.</simpara>
<figure>
<title>VTN API</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/VTN_API.jpg"/>
    </imageobject>
    <textobject><phrase>VTN API</phrase></textobject>
  </mediaobject>
</figure>

<section xml:id="_function_outline">
<title>Function Outline</title>
<simpara>VTN provides following operations for various network resources.</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="5">
    
    <colspec colname="col_1" colwidth="20*"/>
    
    <colspec colname="col_2" colwidth="20*"/>
    
    <colspec colname="col_3" colwidth="20*"/>
    
    <colspec colname="col_4" colwidth="20*"/>
    
    <colspec colname="col_5" colwidth="20*"/>
    
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Resources</simpara></entry>
        
        <entry align="left" valign="top"><simpara>GET</simpara></entry>
        
        <entry align="left" valign="top"><simpara>POST</simpara></entry>
        
        <entry align="left" valign="top"><simpara>PUT</simpara></entry>
        
        <entry align="left" valign="top"><simpara>DELETE</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>VTN</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>vBridge</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>vRouter</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>vTep</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>vTunnel</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>vBypass</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>vLink</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Interface</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Port map</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>No</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Vlan map</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Flowfilter (ACL/redirect)</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Controller information</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Physical topology information</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>No</simpara></entry>
        
        <entry align="left" valign="top"><simpara>No</simpara></entry>
        
        <entry align="left" valign="top"><simpara>No</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Alarm information</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Yes</simpara></entry>
        
        <entry align="left" valign="top"><simpara>No</simpara></entry>
        
        <entry align="left" valign="top"><simpara>No</simpara></entry>
        
        <entry align="left" valign="top"><simpara>No</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

</section>
<section xml:id="_example_usage">
<title>Example usage</title>
<simpara>The following is an example of the usage to construct a virtual network.</simpara>
<itemizedlist>
<listitem>
<simpara>Create VTN</simpara>
</listitem>
</itemizedlist>

<screen>   curl --user admin:adminpass -X POST -H 'content-type: application/json'  \
  -d '{"vtn":{"vtn_name":"VTN1"}}' http://172.1.0.1:8083/vtn-webapi/vtns.json</screen>

<itemizedlist>
<listitem>
<simpara>Create Controller Information</simpara>
</listitem>
</itemizedlist>

<screen>   curl --user admin:adminpass -X POST -H 'content-type: application/json'  \
  -d '{"controller": {"controller_id":"CONTROLLER1","ipaddr":"172.1.0.1","type":"odc","username":"admin", \
  "password":"admin","version":"1.0"}}' http://172.1.0.1:8083/vtn-webapi/controllers.json</screen>

<itemizedlist>
<listitem>
<simpara>Create vBridge under VTN</simpara>
</listitem>
</itemizedlist>

<screen>  curl --user admin:adminpass -X POST -H 'content-type: application/json' \
  -d '{"vbridge":{"vbr_name":"VBR1","controller_id": "CONTROLLER1","domain_id": "(DEFAULT)"}}' \
  http://172.1.0.1:8083/vtn-webapi/vtns/VTN1/vbridges.json</screen>

<itemizedlist>
<listitem>
<simpara>Create the interface under vBridge</simpara>
</listitem>
</itemizedlist>

<screen>  curl --user admin:adminpass -X POST -H 'content-type: application/json' \
  -d '{"interface":{"if_name":"IF1"}}' http://172.1.0.1:8083/vtn-webapi/vtns/VTN1/vbridges/VBR1/interfaces.json</screen>

</section>
</section>
</section>
<section xml:id="_vtn_openstack_configuration">
<title>VTN OpenStack Configuration</title>
<simpara>This guide describes how to set up OpenStack for integration with OpenDaylight Controller.</simpara>
<simpara>While OpenDaylight Controller provides several ways to integrate with OpenStack, this guide focus on the way which uses VTN features available on OpenDaylight controller.In the integration, VTN Manager work as network service provider for OpenStack.</simpara>
<simpara>VTN Manager features, enable OpenStack to work in pure OpenFlow environment in which all switches in data plane are OpenFlow switch.</simpara>
<section xml:id="_requirements">
<title>Requirements</title>
<simpara>To use OpenDaylight as Network Service Provider for OpenStack.</simpara>
</section>
<section xml:id="_components_2">
<title>Components</title>
<itemizedlist>
<listitem>
<simpara>OpenDaylight Controller.</simpara>
</listitem>
<listitem>
<simpara>OpenStack Control Node.</simpara>
</listitem>
<listitem>
<simpara>OpenStack Compute Node.</simpara>
</listitem>
<listitem>
<simpara>OpenFlow Switch like mininet(Not Mandatory).</simpara>
</listitem>
</itemizedlist>

<simpara>The VTN features support multiple OpenStack nodes. You can deploy multiple OpenStack Compute Nodes.
In management plane, OpenDaylight Controller, OpenStack nodes and OpenFlow switches should communicate with each other.
In data plane, Open vSwitches running in OpenStack nodes should communicate with each other through a physical or logical OpenFlow switches. The core OpenFlow switches are not mandatory. Therefore, you can directly connect to the Open vSwitch&#8217;s.</simpara>
<figure>
<title>LAB Setup</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/vtn_devstack_setup.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>LAB Setup</phrase></textobject>
  </mediaobject>
</figure>

<note>
<simpara>Ubuntu 14.04 was used in both the nodes and Vsphere was used for this howto.</simpara>
</note>

</section>
<section xml:id="_configuration_4">
<title>Configuration</title>
<simpara><emphasis role="strong">Server Preparation</emphasis></simpara>
<itemizedlist mark="horizontal">
<listitem>
<simpara>Install Ubuntu 14.04 LTS in two servers (OpenStack Control node and Compute node respectively)</simpara>
</listitem>
<listitem>
<simpara>While installing, Ubuntu mandates creation of a User, we created the user "stack"(We will use the same user for running devstack)
NOTE: You can also have multiple Compute nodes.
TIP: Please do minimal Install to avoid any issues in devstack bringup</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">User Settings</emphasis>
- Login to both servers
- Disable Ubuntu Firewall</simpara>

<literallayout class="monospaced">sudo ufw disable</literallayout>


<itemizedlist>
<listitem>
<simpara>Optionally install these packages</simpara>

<literallayout class="monospaced">sudo apt-get install net-tools</literallayout>


</listitem>
<listitem>
<simpara>Edit sudo vim /etc/sudoers and add an entry as follows</simpara>

<literallayout class="monospaced">stack ALL=(ALL) NOPASSWD: ALL</literallayout>


</listitem>
</itemizedlist>

<simpara><emphasis role="strong">Network Settings</emphasis>
- Checked the output of ifconfig -a, two interfaces were listed eth0 and eth1 as indicated in the image above.
- We had connected eth0 interface to the Network where OpenDaylight is reachable.
- eth1 interface in both servers were connected to a different network to act as data plane for the VM&#8217;s created using the OpenStack.
- Manually edited the file : sudo vim /etc/network/interfaces and made entries as follows</simpara>

<literallayout class="monospaced"> stack@ubuntu-devstack:~/devstack$ cat /etc/network/interfaces
 # This file describes the network interfaces available on your system
 # and how to activate them. For more information, see interfaces(5).
 # The loop-back network interface
 auto lo
 iface lo inet loopback
 # The primary network interface
 auto eth0
 iface eth0 inet static
      address &lt;IP_ADDRESS_TO_REACH_ODL&gt;
      netmask &lt;NET_MASK&gt;
      broadcast &lt;BROADCAST_IP_ADDRESS&gt;
      gateway &lt;GATEWAY_IP_ADDRESS&gt;
auto eth1
iface eth1 inet static
     address &lt;IP_ADDRESS_UNIQ&gt;
     netmask &lt;NETMASK&gt;</literallayout>


<note>
<simpara>Please ensure that the eth0 interface is the default route and it is able to reach the ODL_IP_ADDRESS
NOTE: The entries for eth1 are not mandatory, If not set, we may have to manually do "ifup eth1" after the stacking is complete to activate the interface</simpara>
</note>

<simpara><emphasis role="strong">Finalize</emphasis>
- reboot both nodes after the user and network settings to have the network settings applied to the network
- Login again and check the output of ifconfig to ensure that both interfaces are listed</simpara>
</section>
<section xml:id="_opendaylight_settings_and_execution">
<title>OpenDaylight Settings and Execution</title>
<section xml:id="_vtn_ini">
<title>vtn.ini</title>
<itemizedlist>
<listitem>
<simpara>VTN uses the configuration parameters from  <emphasis>vtn.ini</emphasis> file for the OpenStack integration.</simpara>
</listitem>
<listitem>
<simpara>These values will be set for the OpenvSwitch, in all the participating OpenStack nodes.</simpara>
</listitem>
<listitem>
<simpara>A configuration file <emphasis>vtn.ini</emphasis>'<emphasis>' needs to be created manually in the 'configuration</emphasis> directory.</simpara>
</listitem>
<listitem>
<simpara>The contents of <emphasis>vtn.ini</emphasis> should be as follows:</simpara>
</listitem>
</itemizedlist>

<simpara>bridgename=br-int
portname=eth1
protocols=OpenFlow13
failmode=secure</simpara>
<itemizedlist>
<listitem>
<simpara>The values of the configuration parameters must be changed based on the user environment.</simpara>
</listitem>
<listitem>
<simpara>Especially, "portname" should be carefully configured, because if the value is wrong, OpenDaylight controller fails to forward packets.</simpara>
</listitem>
<listitem>
<simpara>Other parameters works fine as is for general use cases.</simpara>
<itemizedlist>
<listitem>
<simpara>bridgename</simpara>
<itemizedlist>
<listitem>
<simpara>The name of the bridge in Open vSwitch, that will be created by OpenDaylight Controller.</simpara>
</listitem>
<listitem>
<simpara>It must be "br-int".</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>portname</simpara>
<itemizedlist>
<listitem>
<simpara>The name of the port that will be created in the vbridge in Open vSwitch.</simpara>
</listitem>
<listitem>
<simpara>This must be the same name of the interface of OpenStack Nodes which is used for interconnecting OpenStack Nodes in data plane.(in our case:eth1)</simpara>
</listitem>
<listitem>
<simpara>By default, if vtn.ini is not created, VTN uses ens33 as portname.</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>protocols</simpara>
<itemizedlist>
<listitem>
<simpara>OpenFlow protocol through which OpenFlow Switch and Controller communicate.</simpara>
</listitem>
<listitem>
<simpara>The values can be OpenFlow13 or OpenFlow10.</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>failmode</simpara>
<itemizedlist>
<listitem>
<simpara>The value can be "standalone" or "secure".</simpara>
</listitem>
<listitem>
<simpara>Please use "secure" for general use cases.</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_start_opendaylight">
<title>Start OpenDaylight</title>
<itemizedlist>
<listitem>
<simpara>Please install the feature <emphasis role="strong">odl-vtn-manager-neutron</emphasis> that provides the integration with Neutron interface.</simpara>
</listitem>
</itemizedlist>

<simpara>feature:install odl-vtn-manager-neutron</simpara>
<tip>
<simpara>After running OpenDaylight, please ensure OpenDaylight listens to the ports:6633,6653, 6640 and 8080</simpara>
</tip>

<tip>
<simpara>Please allow the ports in firewall for the devstack to be able to communicate with OpenDaylight.</simpara>
</tip>

<note>
<simpara>* 6633/6653 - OpenFlow Ports
* 6640 - Open vSwitch Manager Port
* 8282 - Port for REST API</simpara>
</note>

</section>
<section xml:id="_devstack_setup">
<title>Devstack Setup</title>
<section xml:id="_vtn_devstack_script">
<title>VTN Devstack Script</title>
<itemizedlist>
<listitem>
<simpara>The local.conf is a user-maintained settings file. This allows all custom settings for DevStack to be contained in a single file. This file is processed strictly in sequence.
The following datas are needed to be set in the local.conf file:</simpara>
</listitem>
<listitem>
<simpara>Set the Host_IP as the detection is unreliable.</simpara>
</listitem>
<listitem>
<simpara>Set FLOATING_RANGE to a range not used on the local network, i.e. 192.168.1.224/27. This configures IP addresses ending in 225-254 to be used as floating IPs.</simpara>
</listitem>
<listitem>
<simpara>Set FLAT_INTERFACE to the Ethernet interface that connects the host to your local network. This is the interface that should be configured with the static IP address mentioned above.</simpara>
</listitem>
<listitem>
<simpara>If the *_PASSWORD variables are not set, we will be prompted to enter values during the execution of stack.sh.</simpara>
</listitem>
<listitem>
<simpara>Set ADMIN_PASSWORD . This password is used for the admin and demo accounts set up as OpenStack users. We can login to the OpenStack GUI with this credentials only.</simpara>
</listitem>
<listitem>
<simpara>Set the MYSQL_PASSWORD. The default here is a random hex string which is inconvenient if you need to look at the database directly for anything.</simpara>
</listitem>
<listitem>
<simpara>Set the RABBIT_PASSWORD. This is used by messaging services used by both the nodes.</simpara>
</listitem>
<listitem>
<simpara>Set the service password. This is used by the OpenStack services (Nova, Glance, etc) to authenticate with Keystone.</simpara>
</listitem>
</itemizedlist>

<section xml:id="_devstack_control">
<title>DevStack Control</title>
<simpara>local.conf(control)</simpara>
<screen>#IP Details
HOST_IP=&lt;CONTROL_NODE_MANAGEMENT_IF_IP_ADDRESS&gt;#Please Add The Control Node IP Address in this line
FLAT_INTERFACE=&lt;FLAT_INTERFACE_NAME&gt;
SERVICE_HOST=$HOST_IP
#Instance Details
MULTI_HOST=1
#config Details
RECLONE=yes #Make it "no" after stacking successfully the first time
VERBOSE=True
LOG_COLOR=True
LOGFILE=/opt/stack/logs/stack.sh.log
SCREEN_LOGDIR=/opt/stack/logs
#OFFLINE=True #Uncomment this after stacking successfully the first time
#Passwords
ADMIN_PASSWORD=labstack
MYSQL_PASSWORD=supersecret
RABBIT_PASSWORD=supersecret
SERVICE_PASSWORD=supersecret
SERVICE_TOKEN=supersecrettoken
ENABLE_TENANT_TUNNELS=false
#Services
disable_service rabbit
enable_service qpid
enable_service quantum
enable_service n-cpu
enable_service n-cond
disable_service n-net
enable_service q-svc
enable_service q-dhcp
enable_service q-meta
enable_service horizon
enable_service quantum
enable_service tempest
ENABLED_SERVICES+=,n-api,n-crt,n-obj,n-cpu,n-cond,n-sch,n-novnc,n-cauth,n-cauth,nova
ENABLED_SERVICES+=,cinder,c-api,c-vol,c-sch,c-bak
#ML2 Details
Q_PLUGIN=ml2
Q_ML2_PLUGIN_MECHANISM_DRIVERS=opendaylight
Q_ML2_TENANT_NETWORK_TYPE=local
Q_ML2_PLUGIN_TYPE_DRIVERS=local
disable_service n-net
enable_service q-svc
enable_service q-dhcp
enable_service q-meta
enable_service neutron
enable_service odl-compute
ODL_MGR_IP=&lt;ODL_IP_ADDRESS&gt; #Please Add the ODL IP Address in this line
OVS_PHYSICAL_BRIDGE=br-int
Q_OVS_USE_VETH=True
url=http://&lt;ODL_IP_ADDRESS&gt;:8080/controller/nb/v2/neutron #Please Add the ODL IP Address in this line
username=admin
password=admin</screen>

</section>
<section xml:id="_devstack_compute">
<title>DevStack Compute</title>
<simpara>local.conf(compute)</simpara>
<screen>#IP Details
HOST_IP=&lt;COMPUTE_NODE_MANAGEMENT_IP_ADDRESS&gt; #Add the Compute node Management IP Address
SERVICE_HOST=&lt;CONTROLLEr_NODE_MANAGEMENT_IP_ADDRESS&gt; #Add the cotnrol Node Management IP Address here
#Instance Details
MULTI_HOST=1
#config Details
RECLONE=yes #Make thgis "no" after stacking successfully once
#OFFLINE=True #Uncomment this line after stacking successfuly first time.
VERBOSE=True
LOG_COLOR=True
LOGFILE=/opt/stack/logs/stack.sh.log
SCREEN_LOGDIR=/opt/stack/logs
#Passwords
ADMIN_PASSWORD=labstack
MYSQL_PASSWORD=supersecret
RABBIT_PASSWORD=supersecret
SERVICE_PASSWORD=supersecret
SERVICE_TOKEN=supersecrettoken
#Services
ENABLED_SERVICES=n-cpu,rabbit,neutron
#ML2 Details
Q_PLUGIN=ml2
Q_ML2_PLUGIN_MECHANISM_DRIVERS=opendaylight
Q_ML2_TENANT_NETWORK_TYPE=local
Q_ML2_PLUGIN_TYPE_DRIVERS=local
enable_service odl-compute
ODL_MGR_IP=&lt;ODL_IP_ADDRESS&gt; #ADD ODL IP address here
OVS_PHYSICAL_BRIDGE=br-int
ENABLE_TENANT_TUNNELS=false
Q_OVS_USE_VETH=True
#Details of the Control node for various services
[[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
Q_HOST=$SERVICE_HOST
MYSQL_HOST=$SERVICE_HOST
RABBIT_HOST=$SERVICE_HOST
GLANCE_HOSTPORT=$SERVICE_HOST:9292
KEYSTONE_AUTH_HOST=$SERVICE_HOST
KEYSTONE_SERVICE_HOST=$SERVICE_HOST
NOVA_VNC_ENABLED=True
NOVNCPROXY_URL="http://&lt;CONTROLLER_NODE_IP_ADDRESS&gt;:6080/vnc_auto.html" #Add Controller Node IP address
VNCSERVER_LISTEN=$HOST_IP
VNCSERVER_PROXYCLIENT_ADDRESS=$VNCSERVER_LISTEN</screen>

</section>
<section xml:id="_devstack_kilo_liberty_control_node">
<title>Devstack Kilo_Liberty Control Node</title>
<screen>#IP Details
HOST_IP=&lt;CONTROL_NODE_MANAGEMENT_IF_IP_ADDRESS&gt; #Please Add The Control Node IP Address in this line
SERVICE_HOST=$HOST_IP
LOGFILE=stack.sh.log
SCREEN_LOGDIR=/opt/stack/data/log
LOG_COLOR=False
disable_service n-net
enable_service q-svc
enable_service q-agt
enable_service q-meta
disable_service q-l3
enable_service n-cpu
enable_service q-dhcp
enable_service n-cauth
enable_service neutron
enable_service tempest
ADMIN_PASSWORD=labstack
MYSQL_PASSWORD=supersecret
RABBIT_PASSWORD=supersecret
SERVICE_PASSWORD=supersecret
SERVICE_TOKEN=supersecrettoken
ENABLE_TENANT_TUNNELS=True
NEUTRON_CREATE_INITIAL_NETWORKS=False
#enable_plugin networking-odl http://git.openstack.org/openstack/networking-odl stable/kilo # Please uncomment this line if you
want to use stable/kilo branch
#enable_plugin networking-odl http://git.openstack.org/openstack/networking-odl stable/liberty # Please uncomment this line if you
want to use stable/liberty branch
ODL_MODE=externalodl
ODL_MGR_IP=&lt;ODL_IP_ADDRESS&gt; # Please Add the ODL IP Address in this line
ODL_PORT=8080
ODL_USERNAME=admin
ODL_PASSWORD=admin
OVS_PHYSICAL_BRIDGE=br-int
Q_OVS_USE_VETH=True
Q_ML2_TENANT_NETWORK_TYPE=local
VNCSERVER_PROXYCLIENT_ADDRESS=$SERVICE_HOST
VNCSERVER_LISTEN=0.0.0.0
MYSQL_HOST=$SERVICE_HOST
RABBIT_HOST=$SERVICE_HOST
GLANCE_HOSTPORT=$SERVICE_HOST:9292
KEYSTONE_AUTH_HOST=$SERVICE_HOST
KEYSTONE_SERVICE_HOST=$SERVICE_HOST
[[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
[agent]
minimize_polling=True</screen>

</section>
<section xml:id="_devstack_kilo_liberty_compute_node">
<title>Devstack Kilo_Liberty Compute Node</title>
<screen>#IP Details
HOST_IP=&lt;COMPUTE_NODE_IP_ADDRESS&gt;
SERVICE_HOST=&lt;CONTROL_NODE_IP_ADDRESS&gt;
LOGFILE=stack.sh.log
SCREEN_LOGDIR=/opt/stack/data/log
LOG_COLOR=False
RECLONE=yes # Make it "no" after stacking successfully the first time
#OFFLINE=True # Uncomment this after stacking successfully the first time
disable_all_services
enable_service n-cpu
NOVA_VNC_ENABLED=True
ADMIN_PASSWORD=labstack
MYSQL_PASSWORD=supersecret
RABBIT_PASSWORD=supersecret
SERVICE_PASSWORD=supersecret
SERVICE_TOKEN=supersecrettoken
ENABLE_TENANT_TUNNELS=True
NEUTRON_CREATE_INITIAL_NETWORKS=False
#enable_plugin networking-odl http://git.openstack.org/openstack/networking-odl stable/kilo # Please uncomment this line if you
want to use stable/kilo branch
#enable_plugin networking-odl http://git.openstack.org/openstack/networking-odl stable/liberty # Please uncomment this line if you
want to use stable/liberty branch
ODL_MODE=compute
ODL_MGR_IP=&lt;ODL_IP_ADDRESS&gt; # Please Add the ODL IP Address in this line
ODL_PORT=8080
ODL_USERNAME=admin
ODL_PASSWORD=admin
OVS_PHYSICAL_BRIDGE=br-int
VNCSERVER_PROXYCLIENT_ADDRESS=$HOST_IP
VNCSERVER_LISTEN=0.0.0.0
MYSQL_HOST=$SERVICE_HOST
RABBIT_HOST=$SERVICE_HOST
GLANCE_HOSTPORT=$SERVICE_HOST:9292
KEYSTONE_AUTH_HOST=$SERVICE_HOST
KEYSTONE_SERVICE_HOST=$SERVICE_HOST
[[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
[agent]
minimize_polling=True</screen>

<note>
<simpara>   We have to comment OFFLINE=TRUE in local.conf files, this will make all the installations to happen automatically.
   RECLONE=yes only when we set up the DevStack environment from scratch.</simpara>
</note>

</section>
</section>
<section xml:id="_get_devstack_all_nodes">
<title>Get Devstack (All nodes)</title>
<itemizedlist>
<listitem>
<simpara>Install git application using</simpara>
<itemizedlist>
<listitem>
<simpara>sudo apt-get install git</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Get devstack</simpara>
<itemizedlist>
<listitem>
<simpara>git clone <link xlink:href="https://git.openstack.org/openstack-dev/devstack;">https://git.openstack.org/openstack-dev/devstack;</link></simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara>Switch to stable/Juno Version branch</simpara>
<itemizedlist>
<listitem>
<simpara>cd devstack</simpara>
</listitem>
<listitem>
<simpara>git checkout stable/juno</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<note>
<simpara>   If you want to use stable/kilo Version branch, Please execute the below command in devstack folder</simpara>
</note>


<literallayout class="monospaced">git checkout stable/kilo</literallayout>


<note>
<simpara>   If you want to use stable/liberty Version branch, Please execute the below command in devstack folder</simpara>
</note>


<literallayout class="monospaced">git checkout stable/liberty</literallayout>


</section>
<section xml:id="_stack_control_node">
<title>Stack Control Node</title>

<formalpara>
<title>local.conf: <link linkend="_devstack_control">DevStack Control</link></title>
  <para>
    <literallayout class="monospaced">cd devstack in the controller node</literallayout>
  </para>
</formalpara>


<itemizedlist>
<listitem>
<simpara>Copy the contents of local.conf for juno (devstack control node) from <link linkend="_devstack_control">DevStack Control</link>  and save it as "local.conf" in the "devstack".</simpara>
</listitem>
<listitem>
<simpara>Copy the contents of local.conf for kilo and liberty (devstack control node) from <link linkend="_devstack_kilo_liberty_control_node">Devstack Kilo_Liberty Control Node</link> and save it as "local.conf" in the "devstack".</simpara>
</listitem>
<listitem>
<simpara>Please modify the IP Address values as required.</simpara>
</listitem>
<listitem>
<simpara>Stack the node</simpara>

<literallayout class="monospaced">./stack.sh</literallayout>


</listitem>
</itemizedlist>

<section xml:id="_verify_control_node_stacking">
<title>Verify Control Node stacking</title>
<itemizedlist>
<listitem>
<simpara>stack.sh prints out Horizon is now available at <link xlink:href="http://&lt;CONTROL_NODE_IP_ADDRESS&gt;:8080/">http://&lt;CONTROL_NODE_IP_ADDRESS&gt;:8080/</link></simpara>
</listitem>
<listitem>
<simpara>Execute the command <emphasis>sudo ovs-vsctl show</emphasis> in the control node terminal and verify if the bridge <emphasis>br-int</emphasis>  is created.</simpara>
</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_stack_compute_node">
<title>Stack Compute Node</title>

<formalpara>
<title>local.conf: <link linkend="_devstack_compute">DevStack Compute</link></title>
  <para>
    <literallayout class="monospaced">cd devstack in the controller node</literallayout>
  </para>
</formalpara>


<itemizedlist>
<listitem>
<simpara>Copy the contents of local.conf for juno (devstack compute node) from <link linkend="_devstack_compute">DevStack Compute</link> and save it as "local.conf" in the "devstack".</simpara>
</listitem>
<listitem>
<simpara>Copy the contents of local.conf file for kilo and liberty (devstack compute node) from <link linkend="_devstack_kilo_liberty_compute_node">Devstack Kilo_Liberty Compute Node</link> and save it as "local.conf" in the "devstack".</simpara>
</listitem>
<listitem>
<simpara>Please modify the IP Address values as required.</simpara>
</listitem>
<listitem>
<simpara>Stack the node</simpara>

<literallayout class="monospaced">./stack.sh</literallayout>


</listitem>
</itemizedlist>

<section xml:id="_verify_compute_node_stacking">
<title>Verify Compute Node Stacking</title>
<itemizedlist>
<listitem>
<simpara>stack.sh prints out This is your host ip: &lt;COMPUTE_NODE_IP_ADDRESS&gt;</simpara>
</listitem>
<listitem>
<simpara>Execute the command <emphasis>sudo ovs-vsctl show</emphasis> in the control node terminal and verify if the bridge <emphasis>br-int</emphasis>  is created.</simpara>
</listitem>
<listitem>
<simpara>The output of the ovs-vsctl show will be similar to the one seen in control node.</simpara>
</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_additional_verifications">
<title>Additional Verifications</title>
<itemizedlist>
<listitem>
<simpara>Please visit the OpenDaylight DLUX GUI after stacking all the nodes, <link xlink:href="http://&lt;ODL_IP_ADDRESS&gt;:8181/dlux/index.html">http://&lt;ODL_IP_ADDRESS&gt;:8181/dlux/index.html</link>. The switches, topology and the ports that are currently read can be validated.</simpara>
</listitem>
</itemizedlist>

<tip>
<simpara>If the interconnected between the Open vSwitch is not seen, Please bring up the interface for the dataplane manually using the below comamnd</simpara>
</tip>


<literallayout class="monospaced">ifup &lt;interface_name&gt;</literallayout>


<tip>
<simpara>Some versions of Open vSwitch, drop packets when there is a table-miss, So please add the below flow to all the nodes with Open vSwitch version (&gt;=2.1)</simpara>
</tip>


<literallayout class="monospaced">ovs-ofctl --protocols=OpenFlow13 add-flow br-int priority=0,actions=output:CONTROLLER</literallayout>


<tip>
<simpara>Please Accept Promiscuous mode in the networks involving the interconnect.</simpara>
</tip>

</section>
<section xml:id="_create_vm_from_devstack_horizon_gui">
<title>Create VM from Devstack Horizon GUI</title>
<itemizedlist>
<listitem>
<simpara>Login to <link xlink:href="http://&lt;CONTROL_NODE_IP&gt;:8080/">http://&lt;CONTROL_NODE_IP&gt;:8080/</link> to check the horizon GUI.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Horizon GUI</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/OpenStackGui.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>Horizon</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Enter the value for User Name as admin and enter the value for Password as labstack.</simpara>
<itemizedlist>
<listitem>
<simpara>We should first ensure both the hypervisors(control node and compute node) are mapped under hypervisors by clicking on Hpervisors tab.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Hypervisors</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Hypervisors.png" contentwidth="512"/>
    </imageobject>
    <textobject><phrase>Hypervisors</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>Create a new Network from Horizon GUI.</simpara>
</listitem>
<listitem>
<simpara>Click on Networks Tab.</simpara>
</listitem>
<listitem>
<simpara>click on the Create Network button.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Create Network</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Create_Network.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>Create Network</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>A popup screen will appear.</simpara>
</listitem>
<listitem>
<simpara>Enter network name and click Next button.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Step 1</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Creare_Network_Step_1.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>Step 1</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>Create a sub network by giving Network Address and click Next button .</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Step 2</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Create_Network_Step_2.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>Step 2</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>Specify the additional details for subnetwork (please refer the image for your reference).</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Step 3</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Create_Network_Step_3.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>Step 3</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>Click Create button</simpara>
</listitem>
<listitem>
<simpara>Create VM Instance</simpara>
</listitem>
<listitem>
<simpara>Navigate to Instances tab in the GUI.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Instance Creation</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Instance_Creation.png" contentwidth="512"/>
    </imageobject>
    <textobject><phrase>Instance Creation</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>Click on Launch Instances button.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Launch Instance</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Launch_Instance.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>Launch Instance</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>Click on Details tab to enter the VM details.For this demo we are creating Ten VM&#8217;s(instances).</simpara>
</listitem>
<listitem>
<simpara>In the Networking tab, we must select the network,for this we need to drag and drop the Available networks to Selected Networks (i.e.,) Drag vtn1 we created from Available networks to Selected Networks and click Launch to create the instances.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Launch Network</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Launch_Instance_network.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>Launch Network</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>Ten VM&#8217;s will be created.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Load All Instances</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Load_All_Instances.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>Load All Instances</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>Click on any VM displayed in the Instances tab and click the Console tab.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Instance Console</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Instance_Console.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>Instance Console</phrase></textobject>
  </mediaobject>
</figure>

<itemizedlist>
<listitem>
<simpara>Login to the VM console and verify with a ping command.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>Ping</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Instance_ping.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>Ping</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_verification_of_control_and_compute_node_after_vm_creation">
<title>Verification of Control and Compute Node after VM creation</title>
<itemizedlist>
<listitem>
<simpara>Every time a new VM is created, more interfaces are added to the br-int bridge in Open vSwitch.</simpara>
</listitem>
<listitem>
<simpara>Use <emphasis role="strong">sudo ovs-vsctl show</emphasis> to list the number of interfaces added.</simpara>
</listitem>
<listitem>
<simpara>Please visit the DLUX GUI to list the new nodes in every switch.</simpara>
</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_using_the_dlux_gui">
<title>Using the DLUX GUI</title>
<simpara>For more information see <link linkend="_using_the_opendaylight_user_interface_dlux">the chapter on DLUX</link> above.</simpara>
<section xml:id="_references">
<title>References</title>
<itemizedlist>
<listitem>
<simpara><link xlink:href="http://devstack.org/guides/multinode-lab.html">http://devstack.org/guides/multinode-lab.html</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://wiki.opendaylight.org/view/File:Vtn_demo_hackfest_2014_march.pdf">https://wiki.opendaylight.org/view/File:Vtn_demo_hackfest_2014_march.pdf</link></simpara>
</listitem>
</itemizedlist>

</section>
</section>
</section>
<section xml:id="_vtn_usage_examples">
<title>VTN Usage Examples</title>
<section xml:id="_how_to_configure_l2_network_with_single_controller">
<title>How to configure L2 Network with Single Controller</title>
<section xml:id="_overview_51">
<title>Overview</title>
<simpara>This example provides the procedure to demonstrate configuration of VTN Coordinator with L2 network using VTN Virtualization(single controller). Here is the Example for vBridge Interface Mapping with Single Controller using mininet. mininet details and set-up can be referred at below URL:
<link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Controller:Installation#Using_Mininet">https://wiki.opendaylight.org/view/OpenDaylight_Controller:Installation#Using_Mininet</link></simpara>
<figure>
<title>EXAMPLE DEMONSTRATING SINGLE CONTROLLER</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/vtn-single-controller-topology-example.png"/>
    </imageobject>
    <textobject><phrase>EXAMPLE DEMONSTRATING SINGLE CONTROLLER</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_requirements_2">
<title>Requirements</title>
<itemizedlist>
<listitem>
<simpara>Configure mininet and create a topology:</simpara>
</listitem>
</itemizedlist>

<screen>mininet@mininet-vm:~$ sudo mn --controller=remote,ip=&lt;controller-ip&gt; --topo tree,2</screen>

<itemizedlist>
<listitem>
<simpara>mininet&gt; net</simpara>
</listitem>
</itemizedlist>

<screen> s1 lo:  s1-eth1:h1-eth0 s1-eth2:s2-eth1
 s2 lo:  s2-eth1:s1-eth2 s2-eth2:h2-eth0
 h1 h1-eth0:s1-eth1
 h2 h2-eth0:s2-eth2</screen>

</section>
<section xml:id="_configuration_5">
<title>Configuration</title>
<itemizedlist>
<listitem>
<simpara>Create a Controller</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"controller": {"controller_id": "controllerone", "ipaddr":"10.0.0.2", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8083/vtn-webapi/controllers.json</screen>

<itemizedlist>
<listitem>
<simpara>Create a VTN</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"vtn" : {"vtn_name":"vtn1","description":"test VTN" }}' http://127.0.0.1:8083/vtn-webapi/vtns.json</screen>

<itemizedlist>
<listitem>
<simpara>Create a vBridge in the VTN</simpara>
</listitem>
</itemizedlist>

<screen> curl --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"vbridge" : {"vbr_name":"vBridge1","controller_id":"controllerone","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges.json</screen>

<itemizedlist>
<listitem>
<simpara>Create two Interfaces into the vBridge</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"interface": {"if_name": "if1","description": "if_desc1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json</screen>

<screen>curl --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"interface": {"if_name": "if2","description": "if_desc2"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json</screen>

<itemizedlist>
<listitem>
<simpara>Get the list of logical ports configured</simpara>
</listitem>
</itemizedlist>

<screen>Curl --user admin:adminpass -H 'content-type: application/json' -X GET http://127.0.0.1:8083/vtn-webapi/controllers/controllerone/domains/\(DEFAULT\)/logical_ports.json</screen>

<itemizedlist>
<listitem>
<simpara>Configure two mappings on the interfaces</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json' -X PUT -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:03-s3-eth1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if1/portmap.json
curl --user admin:adminpass -H 'content-type: application/json' -X PUT -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:02-s2-eth1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if2/portmap.json</screen>

</section>
<section xml:id="_verification_3">
<title>Verification</title>
<simpara>Please verify whether the Host1 and Host3 are pinging.
* Send packets from Host1 to Host3</simpara>
<screen>|mininet&gt; h1 ping h3</screen>

</section>
</section>
<section xml:id="_how_to_configure_l2_network_with_multiple_controllers">
<title>How to configure L2 Network with Multiple Controllers</title>
<itemizedlist>
<listitem>
<simpara>This example provides the procedure to demonstrate configuration of VTN Coordinator with L2 network using VTN Virtualization
Here is the Example for vBridge Interface Mapping with Multi-controller using mininet.</simpara>
</listitem>
</itemizedlist>

<figure>
<title>EXAMPLE DEMONSTRATING MULTIPLE CONTROLLERS</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/MutiController_Example_diagram.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>EXAMPLE DEMONSTRATING MULTIPLE CONTROLLERS</phrase></textobject>
  </mediaobject>
</figure>

<section xml:id="_requirements_3">
<title>Requirements</title>
<itemizedlist>
<listitem>
<simpara>Configure multiple controllers using the mininet script given below: <link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_%28VTN%29:Scripts:Mininet#Network_with_Multiple_Paths_for_delivering_packets">https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_%28VTN%29:Scripts:Mininet#Network_with_Multiple_Paths_for_delivering_packets</link></simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_configuration_6">
<title>Configuration</title>
<itemizedlist>
<listitem>
<simpara>Create a VTN</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"vtn" : {"vtn_name":"vtn3"}}' http://127.0.0.1:8083/vtn-webapi/vtns.json</screen>

<itemizedlist>
<listitem>
<simpara>Create two Controllers</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"controller": {"controller_id": "odc1", "ipaddr":"10.100.9.52", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8083/vtn-webapi/controllers.json</screen>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"controller": {"controller_id": "odc2", "ipaddr":"10.100.9.61", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8083/vtn-webapi/controllers.json</screen>

<itemizedlist>
<listitem>
<simpara>Create two vBridges in the VTN like, vBridge1 in Controller1 and vBridge2 in Controller2</simpara>
</listitem>
</itemizedlist>

<screen> curl --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"vbridge" : {"vbr_name":"vbr1","controller_id":"odc1","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn3/vbridges.json</screen>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"vbridge" : {"vbr_name":"vbr2","controller_id":"odc2","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn3/vbridges.json</screen>

<itemizedlist>
<listitem>
<simpara>Create vBridge Interfaces</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"interface": {"if_name": "if1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn3/vbridges/vbr1/interfaces.json</screen>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"interface": {"if_name": "if2"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn3/vbridges/vbr1/interfaces.json</screen>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"interface": {"if_name": "if1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn3/vbridges/vbr2/interfaces.json</screen>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"interface": {"if_name": "if2"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn3/vbridges/vbr2/interfaces.json</screen>

<itemizedlist>
<listitem>
<simpara>Get the list of logical ports configured</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json' -X GET http://127.0.0.1:8083/vtn-webapi/controllers/odc1/domains/\(DEFAULT\)/logical_ports/detail.json</screen>

<itemizedlist>
<listitem>
<simpara>Create boundary and vLink</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json'   -X POST -d '{"boundary": {"boundary_id": "b1", "link": {"controller1_id": "odc1", "domain1_id": "(DEFAULT)", "logical_port1_id": "PP-OF:00:00:00:00:00:00:00:01-s1-eth3", "controller2_id": "odc2", "domain2_id": "(DEFAULT)", "logical_port2_id": "PP-OF:00:00:00:00:00:00:00:04-s4-eth3"}}}' http://127.0.0.1:8083/vtn-webapi/boundaries.json</screen>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"vlink": {"vlk_name": "vlink1" , "vnode1_name": "vbr1", "if1_name":"if2", "vnode2_name": "vbr2", "if2_name": "if2", "boundary_map": {"boundary_id":"b1","vlan_id": "50"}}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn3/vlinks.json</screen>

<itemizedlist>
<listitem>
<simpara>Configure port-map on the interfaces</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json' -X PUT -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:02-s2-eth2"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn3/vbridges/vbr1/interfaces/if1/portmap.json</screen>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X PUT -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:05-s5-eth2"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn3/vbridges/vbr2/interfaces/if1/portmap.json</screen>

</section>
<section xml:id="_verification_4">
<title>Verification</title>
<simpara>Please verify whether Host h2 and Host h6 are pinging.
* Send packets from h2 to h6</simpara>
<screen>mininet&gt; h2 ping h6</screen>

</section>
</section>
<section xml:id="_how_to_test_vlan_map_in_mininet_environment">
<title>How To Test Vlan-Map In Mininet Environment</title>
<section xml:id="_overview_52">
<title>Overview</title>
<simpara>This example explains how to test vlan-map in a multi host scenario.</simpara>
<figure>
<title>Example that demonstrates vlanmap testing in Mininet Environment</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/vlanmap_using_mininet.png"/>
    </imageobject>
    <textobject><phrase>Example that demonstrates vlanmap testing in Mininet Environment</phrase></textobject>
  </mediaobject>
</figure>

</section>
<section xml:id="_requirements_4">
<title>Requirements</title>
<itemizedlist>
<listitem>
<simpara>Save the mininet script given below as vlan_vtn_test.py and run the mininet script in the mininet environment where Mininet is installed.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_mininet_script">
<title>Mininet Script</title>
<simpara><link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Scripts:Mininet#Network_with_hosts_in_different_vlan">https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Scripts:Mininet#Network_with_hosts_in_different_vlan</link></simpara>
<itemizedlist>
<listitem>
<simpara>Run the mininet script</simpara>
</listitem>
</itemizedlist>

<screen>sudo mn --controller=remote,ip=192.168.64.13 --custom vlan_vtn_test.py --topo mytopo</screen>

</section>
<section xml:id="_configuration_7">
<title>Configuration</title>
<simpara>Please follow the below steps to test a vlan map using mininet:
* Create a controller</simpara>
<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"controller": {"controller_id": "controllerone", "ipaddr":"10.0.0.2", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8083/vtn-webapi/controllers</screen>

<itemizedlist>
<listitem>
<simpara>Create a VTN</simpara>
</listitem>
</itemizedlist>

<screen>curl -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -d '{"vtn" : {"vtn_name":"vtn1","description":"test VTN" }}' http://127.0.0.1:8083/vtn-webapi/vtns.json</screen>

<itemizedlist>
<listitem>
<simpara>Create a vBridge(vBridge1)</simpara>
</listitem>
</itemizedlist>

<screen>curl -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -d '{"vbridge" : {"vbr_name":"vBridge1","controller_id":"controllerone","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges.json</screen>

<itemizedlist>
<listitem>
<simpara>Create a vlan map with vlanid 200 for vBridge vBridge1</simpara>
</listitem>
</itemizedlist>

<screen>curl -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -d '{"vlanmap" : {"vlan_id": 200 }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/vlanmaps.json</screen>

<itemizedlist>
<listitem>
<simpara>Create a vBridge (vBridge2)</simpara>
</listitem>
</itemizedlist>

<screen>curl -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -d '{"vbridge" : {"vbr_name":"vBridge2","controller_id":"controllerone","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges.json</screen>

<itemizedlist>
<listitem>
<simpara>Create a vlan map with vlanid 300 for vBridge vBridge2</simpara>
</listitem>
</itemizedlist>

<screen>curl -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -d '{"vlanmap" : {"vlan_id": 300 }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge2/vlanmaps.json</screen>

</section>
<section xml:id="_verification_5">
<title>Verification</title>
<simpara>Ping all in mininet environment to view the host reachability.</simpara>
<screen>mininet&gt; pingall
Ping: testing ping reachability
h1 -&gt; X h3 X h5 X
h2 -&gt; X X h4 X h6
h3 -&gt; h1 X X h5 X
h4 -&gt; X h2 X X h6
h5 -&gt; h1 X h3 X X
h6 -&gt; X h2 X h4 X</screen>

</section>
</section>
<section xml:id="_how_to_view_specific_vtn_station_information">
<title>How To View Specific VTN Station Information.</title>
<simpara>This example demonstrates on how to view a specific VTN Station information.</simpara>
<figure>
<title>EXAMPLE DEMONSTRATING VTN STATIONS</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/vtn_stations.png"/>
    </imageobject>
    <textobject><phrase>EXAMPLE DEMONSTRATING VTN STATIONS</phrase></textobject>
  </mediaobject>
</figure>

<section xml:id="_requirement_2">
<title>Requirement</title>
<itemizedlist>
<listitem>
<simpara>Configure mininet and create a topology:</simpara>
</listitem>
</itemizedlist>

<screen> $ sudo mn --custom /home/mininet/mininet/custom/topo-2sw-2host.py --controller=remote,ip=10.100.9.61 --topo mytopo
mininet&gt; net

 s1 lo:  s1-eth1:h1-eth0 s1-eth2:s2-eth1
 s2 lo:  s2-eth1:s1-eth2 s2-eth2:h2-eth0
 h1 h1-eth0:s1-eth1
 h2 h2-eth0:s2-eth2</screen>

<itemizedlist>
<listitem>
<simpara>Generate traffic by pinging between hosts h1 and h2 after configuring the portmaps respectively</simpara>
</listitem>
</itemizedlist>

<screen> mininet&gt; h1 ping h2
 PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.
 64 bytes from 10.0.0.2: icmp_req=1 ttl=64 time=16.7 ms
 64 bytes from 10.0.0.2: icmp_req=2 ttl=64 time=13.2 ms</screen>

</section>
<section xml:id="_configuration_8">
<title>Configuration</title>
<formalpara>
<title>Create Controller</title>
<para>
<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"controller": {"controller_id": "controllerone", "ipaddr":"10.100.9.61", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8083/vtn-webapi/controllers.json</screen>
</para>
</formalpara>

<formalpara>
<title>Create a VTN</title>
<para>
<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"vtn" : {"vtn_name":"vtn1","description":"test VTN" }}' http://127.0.0.1:8083/vtn-webapi/vtns.json</screen>
</para>
</formalpara>

<formalpara>
<title>Create a vBridge in the VTN</title>
<para>
<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"vbridge" : {"vbr_name":"vBridge1","controller_id":"controllerone","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges.json</screen>
</para>
</formalpara>

<formalpara>
<title>Create two Interfaces into the vBridge</title>
<para>
<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"interface": {"if_name": "if1","description": "if_desc1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json
curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"interface": {"if_name": "if2","description": "if_desc2"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json</screen>
</para>
</formalpara>

<formalpara>
<title>Configure two mappings on the interfaces</title>
<para>
<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X PUT -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:01-s1-eth1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if1/portmap.json
curl -v --user admin:adminpass -H 'content-type: application/json' -X PUT -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:02-s2-eth2"}}' http://17.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if2/portmap.json</screen>
</para>
</formalpara>

<formalpara>
<title>Get the VTN stations information</title>
<para>
<screen>curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' "http://127.0.0.1:8083/vtn-webapi/vtnstations?controller_id=controllerone&amp;vtn_name=vtn1"</screen>
</para>
</formalpara>

</section>
<section xml:id="_verification_6">
<title>Verification</title>
<screen>curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' "http://127.0.0.1:8083/vtn-webapi/vtnstations?controller_id=controllerone&amp;vtn_name=vtn1"
{
   "vtnstations": [
       {
           "domain_id": "(DEFAULT)",
           "interface": {},
           "ipaddrs": [
               "10.0.0.2"
           ],
           "macaddr": "b2c3.06b8.2dac",
           "no_vlan_id": "true",
           "port_name": "s2-eth2",
           "station_id": "178195618445172",
           "switch_id": "00:00:00:00:00:00:00:02",
           "vnode_name": "vBridge1",
           "vnode_type": "vbridge",
           "vtn_name": "vtn1"
       },
       {
           "domain_id": "(DEFAULT)",
           "interface": {},
           "ipaddrs": [
               "10.0.0.1"
           ],
           "macaddr": "ce82.1b08.90cf",
           "no_vlan_id": "true",
           "port_name": "s1-eth1",
           "station_id": "206130278144207",
           "switch_id": "00:00:00:00:00:00:00:01",
           "vnode_name": "vBridge1",
           "vnode_type": "vbridge",
           "vtn_name": "vtn1"
       }
   ]
}</screen>

</section>
</section>
<section xml:id="_how_to_view_dataflows_in_vtn">
<title>How To View Dataflows in VTN</title>
<simpara>This example demonstrates on how to view a specific VTN Dataflow information.</simpara>
<section xml:id="_configuration_9">
<title>Configuration</title>
<simpara>The same Configuration as Vlan Mapping Example(<link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Coordinator:RestApi:How_to_test_vlan-map_in_Mininet_environment">https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Coordinator:RestApi:How_to_test_vlan-map_in_Mininet_environment</link>)</simpara>
</section>
<section xml:id="_verification_7">
<title>Verification</title>
<simpara>Get the VTN Dataflows information</simpara>
<screen>curl -v -X GET -H 'content-type: application/json' --user 'admin:adminpass' "http://127.0.0.1:8083/vtn-webapi/dataflows?controller_id=controllerone&amp;srcmacaddr=924c.e4a3.a743&amp;vlan_id=300&amp;switch_id=00:00:00:00:00:00:00:02&amp;port_name=s2-eth1"</screen>

<screen>{
   "dataflows": [
       {
           "controller_dataflows": [
               {
                   "controller_id": "controllerone",
                   "controller_type": "odc",
                   "egress_domain_id": "(DEFAULT)",
                   "egress_port_name": "s3-eth3",
                   "egress_station_id": "3",
                   "egress_switch_id": "00:00:00:00:00:00:00:03",
                   "flow_id": "29",
                   "ingress_domain_id": "(DEFAULT)",
                   "ingress_port_name": "s2-eth2",
                   "ingress_station_id": "2",
                   "ingress_switch_id": "00:00:00:00:00:00:00:02",
                   "match": {
                       "macdstaddr": [
                           "4298.0959.0e0b"
                       ],
                       "macsrcaddr": [
                           "924c.e4a3.a743"
                       ],
                       "vlan_id": [
                           "300"
                       ]
                   },
                   "pathinfos": [
                       {
                           "in_port_name": "s2-eth2",
                           "out_port_name": "s2-eth1",
                           "switch_id": "00:00:00:00:00:00:00:02"
                       },
                       {
                           "in_port_name": "s1-eth2",
                           "out_port_name": "s1-eth3",
                           "switch_id": "00:00:00:00:00:00:00:01"
                       },
                       {
                           "in_port_name": "s3-eth1",
                           "out_port_name": "s3-eth3",
                           "switch_id": "00:00:00:00:00:00:00:03"
                       }
                   ]
               }
           ],
           "reason": "success"
       }
   ]
}</screen>

</section>
</section>
<section xml:id="_how_to_configure_flow_filters_using_vtn">
<title>How To Configure Flow Filters Using VTN</title>
<section xml:id="_overview_53">
<title>Overview</title>
<simpara>The flow-filter function discards, permits, or redirects packets of the traffic within a VTN, according to specified flow conditions The table below lists the actions to be applied when a packet matches the condition:</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="50*"/>
    
    <colspec colname="col_2" colwidth="50*"/>
    
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Action</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Function</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Pass</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Permits the packet to pass.
As options, packet transfer priority (set priority) and DSCP change (se t ip-dscp) is specified.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Drop</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Discards the packet.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Redirect</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Redirects the packet to a desired virtual interface.
As an option, it is possible to change the MAC address when the packet is transferred.</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<figure>
<title>Flow Filter</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/flow_filter_example.png" contentwidth="600"/>
    </imageobject>
    <textobject><phrase>Example demonstrating flow filters</phrase></textobject>
  </mediaobject>
</figure>

<simpara>Following steps explain flow-filter function:</simpara>
<itemizedlist>
<listitem>
<simpara>When a packet is transferred to an interface within a virtual network, the flow-filter function
evaluates whether the transferred packet matches the condition specified in the flow-list.</simpara>
</listitem>
<listitem>
<simpara>If the packet matches the condition, the flow-filter applies the flow-list matching action
specified in the flow-filter.</simpara>
</listitem>
</itemizedlist>

</section>
<section xml:id="_requirements_5">
<title>Requirements</title>
<simpara>To apply the packet filter, configure the following:</simpara>
<itemizedlist>
<listitem>
<simpara>Create a flow-list and flow-listentry.</simpara>
</listitem>
<listitem>
<simpara>Specify where to apply the flow-filter, for example VTN, vBridge, or interface of vBridge.</simpara>
</listitem>
</itemizedlist>

<simpara>Configure mininet and create a topology:</simpara>
<screen>$  mininet@mininet-vm:~$ sudo mn --controller=remote,ip=&lt;controller-ip&gt; --topo tree</screen>

<simpara>Please generate the following topology</simpara>
<screen>$  mininet@mininet-vm:~$ sudo mn --controller=remote,ip=&lt;controller-ip&gt; --topo tree,2
mininet&gt; net
c0
s1 lo:  s1-eth1:s2-eth3 s1-eth2:s3-eth3
s2 lo:  s2-eth1:h1-eth0 s2-eth2:h2-eth0 s2-eth3:s1-eth1
s3 lo:  s3-eth1:h3-eth0 s3-eth2:h4-eth0 s3-eth3:s1-eth2
h1 h1-eth0:s2-eth1
h2 h2-eth0:s2-eth2
h3 h3-eth0:s3-eth1
h4 h4-eth0:s3-eth2</screen>

</section>
<section xml:id="_configuration_10">
<title>Configuration</title>
<itemizedlist>
<listitem>
<simpara>.Create a controller</simpara>
</listitem>
</itemizedlist>

<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"controller": {"controller_id": "controller1", "ipaddr":"10.100.9.61", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8083/vtn-webapi/controllers</screen>

<itemizedlist>
<listitem>
<simpara>Create a VTN</simpara>
</listitem>
</itemizedlist>

<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"vtn" : {"vtn_name":"vtn_one","description":"test VTN" }}' http://127.0.0.1:8083/vtn-webapi/vtns.json</screen>

<itemizedlist>
<listitem>
<simpara>Create two vBridges</simpara>
</listitem>
</itemizedlist>

<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"vbridge" : {"vbr_name":"vbr_one^C"controller_id":"controller1","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn_one/vbridges.json
curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"vbridge" :
{"vbr_name":"vbr_two","controller_id":"controller1","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn_one/vbridges.json</screen>

<itemizedlist>
<listitem>
<simpara>Create vBridge interfaces</simpara>
</listitem>
</itemizedlist>

<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"interface": {"if_name": "if1","description": "if_desc1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn_one/vbridges/vbr_two/interfaces.json
curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"interface": {"if_name": "if1","description": "if_desc1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn_one/vbridges/vbr_two/interfaces.json</screen>

<itemizedlist>
<listitem>
<simpara>Configure two mappings on the interfaces</simpara>
</listitem>
</itemizedlist>

<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X PUT -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:03-s3-eth1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn_one/vbridges/vbr_two/interfaces/if1/portmap.json
curl -v --user admin:adminpass -H 'content-type: application/json' -X PUT -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:02-s2-eth1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn_one/vbridges/vbr_two/interfaces/if2/portmap.json</screen>

<itemizedlist>
<listitem>
<simpara>Create Flowlist</simpara>
</listitem>
</itemizedlist>

<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"flowlist": {"fl_name": "flowlist1", "ip_version":"IP"}}' http://127.0.0.1:8083/vtn-webapi/flowlists.json</screen>

<itemizedlist>
<listitem>
<simpara>Create Flowlistentry</simpara>
</listitem>
</itemizedlist>

<screen>curl -v --user admin:adminpass -H 'content-type: application/json' -X POST -d '{"flowlistentry": {"seqnum": "233","macethertype": "0x8000","ipdstaddr": "10.0.0.3","ipdstaddrprefix": "2","ipsrcaddr": "10.0.0.2","ipsrcaddrprefix": "2","ipproto": "17","ipdscp": "55","icmptypenum":"232","icmpcodenum": "232"}}' http://127.0.0.1:8083/vtn-webapi/flowlists/flowlist1/flowlistentries.json</screen>

<itemizedlist>
<listitem>
<simpara>Create vBridge Interface Flowfilter</simpara>
</listitem>
</itemizedlist>

<screen>curl -v --user admin:adminpass -X POST -H 'content-type: application/json' -d '{"flowfilter" : {"ff_type": "in"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn_one/vbridges/vbr_two/interfaces/if1/flowfilters.json</screen>

</section>
<section xml:id="_flow_filter_demonstration_with_drop_action_type">
<title>Flow filter demonstration with DROP action-type</title>
<screen>curl -v --user admin:adminpass -X POST -H 'content-type: application/json' -d '{"flowfilterentry": {"seqnum": "233", "fl_name": "flowlist1", "action_type":"drop", "priority":"3", "dscp":"55" }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn_one/vbridges/vbr_two/interfaces/if1/flowfilters/in/flowfilterentries.json</screen>

</section>
<section xml:id="_verification_8">
<title>Verification</title>
<simpara>As we have applied the action type "drop" , ping should fail.</simpara>
<screen>mininet&gt; h1 ping h3
PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.
From 10.0.0.1 icmp_seq=1 Destination Host Unreachable
From 10.0.0.1 icmp_seq=2 Destination Host Unreachable</screen>

<simpara>In controller you can see the DROP action type information as below, here action as DROP.
osgi&gt; readflows 0000000000000003</simpara>
<screen>[FlowOnNode[flow =Flow[match = Match [fields={DL_VLAN=DL_VLAN(0), IN_PORT=IN_PORT(OF|1@OF|00:00:00:00:00:00:00:03), DL_DST=DL_DST(4e:08:1d:a6:05:08), DL_SRC=DL_SRC(be:15:00:a4:96:13)}, matches=15], actions = [DROP], priority = 10, id = 0, idleTimeout = 0, hardTimeout = 300], tableId = 0, sec = 18, nsec = 475000000, pkt = 20, byte = 1232], FlowOnNode[flow =Flow[match = Match [fields={DL_VLAN=DL_VLAN(0), IN_PORT=IN_PORT(OF|3@OF|00:00:00:00:00:00:00:03), DL_DST=DL_DST(be:15:00:a4:96:13), DL_SRC=DL_SRC(4e:08:1d:a6:05:08)}, matches=15], actions = [OUTPUT[OF|1@OF|00:00:00:00:00:00:00:03]], priority = 10, id = 0, idleTimeout = 0, hardTimeout = 0], tableId = 0, sec = 18, nsec = 489000000, pkt = 10, byte = 812]]</screen>

</section>
<section xml:id="_flow_filter_demonstration_with_pass_action_type">
<title>Flow filter demonstration with PASS action-type</title>
<screen>curl -v --user admin:adminpass -X PUT -H 'content-type: application/json' -d '{"flowfilterentry": {"seqnum": "233", "fl_name": "flowlist1", "action_type":"pass", "priority":"3", "dscp":"55" }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn_one/vbridges/vbr_two/interfaces/if1/flowfilters/in/flowfilterentries/233.json</screen>

</section>
<section xml:id="_verification_9">
<title>Verification</title>
<screen>mininet&gt; h1 ping h3
PING 10.0.0.3 (10.0.0.3) 56(84) bytes of data.
64 bytes from 10.0.0.3: icmp_req=1 ttl=64 time=0.984 ms
64 bytes from 10.0.0.3: icmp_req=2 ttl=64 time=0.110 ms
64 bytes from 10.0.0.3: icmp_req=3 ttl=64 time=0.098 ms</screen>

<simpara>In controller you can see the PASS action type information by executing the following command:</simpara>
<screen> osgi&gt; readflows 0000000000000003</screen>

</section>
</section>
<section xml:id="_how_to_use_vtn_to_make_packets_take_different_paths">
<title>How To Use VTN To Make Packets Take Different Paths</title>
<simpara>This example demonstrates on how to create a specific VTN Path Map information.</simpara>
<figure>
<title>PathMap</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/Pathmap.png"/>
    </imageobject>
    <textobject><phrase>pathmap</phrase></textobject>
  </mediaobject>
</figure>

<section xml:id="_requirement_3">
<title>Requirement</title>
<itemizedlist>
<listitem>
<simpara>Save the mininet script given below as pathmap_test.py and run the mininet script in the mininet environment where Mininet is installed.</simpara>
</listitem>
<listitem>
<simpara>Create topology using the below mininet script:</simpara>
</listitem>
</itemizedlist>

<screen>from mininet.topo import Topo
  class MyTopo( Topo ):
    "Simple topology example."
    def __init__( self ):
        "Create custom topo."
        # Initialize topology
        Topo.__init__( self )
        # Add hosts and switches
        leftHost = self.addHost( 'h1' )
        rightHost = self.addHost( 'h2' )
        leftSwitch = self.addSwitch( 's1' )
        middleSwitch = self.addSwitch( 's2' )
        middleSwitch2 = self.addSwitch( 's4' )
        rightSwitch = self.addSwitch( 's3' )
        # Add links
        self.addLink( leftHost, leftSwitch )
        self.addLink( leftSwitch, middleSwitch )
        self.addLink( leftSwitch, middleSwitch2 )
        self.addLink( middleSwitch, rightSwitch )
        self.addLink( middleSwitch2, rightSwitch )
        self.addLink( rightSwitch, rightHost )
 topos = { 'mytopo': ( lambda: MyTopo() ) }</screen>

<screen> mininet&gt; net
 c0
 s1 lo:  s1-eth1:h1-eth0 s1-eth2:s2-eth1 s1-eth3:s4-eth1
 s2 lo:  s2-eth1:s1-eth2 s2-eth2:s3-eth1
 s3 lo:  s3-eth1:s2-eth2 s3-eth2:s4-eth2 s3-eth3:h2-eth0
 s4 lo:  s4-eth1:s1-eth3 s4-eth2:s3-eth2
 h1 h1-eth0:s1-eth1
 h2 h2-eth0:s3-eth3</screen>

<itemizedlist>
<listitem>
<simpara>Generate traffic by pinging between hosts h1 and h2 before creating the portmaps respectively</simpara>
</listitem>
</itemizedlist>

<screen>  mininet&gt; h1 ping h2
  PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.
  From 10.0.0.1 icmp_seq=1 Destination Host Unreachable
  From 10.0.0.1 icmp_seq=2 Destination Host Unreachable
  From 10.0.0.1 icmp_seq=3 Destination Host Unreachable
  From 10.0.0.1 icmp_seq=4 Destination Host Unreachable</screen>

</section>
<section xml:id="_configuration_11">
<title>Configuration</title>
<itemizedlist>
<listitem>
<simpara>Create Controller</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"controller": {"controller_id": "odc", "ipaddr":"10.100.9.42", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8083/vtn-webapi/controllers.json</screen>

<itemizedlist>
<listitem>
<simpara>Create a VTN</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"vtn" : {"vtn_name":"vtn1","description":"test VTN" }}' http://127.0.0.1:8083/vtn-webapi/vtns.json</screen>

<itemizedlist>
<listitem>
<simpara>Create a vBridge in the VTN</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"vbridge" : {"vbr_name":"vBridge1","controller_id":"odc","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges.json</screen>

<itemizedlist>
<listitem>
<simpara>Create two Interfaces into the vBridge</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"interface": {"if_name": "if1","description": "if_desc1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json
curl --user admin:adminpass -H 'content-type: application/json'  -X POST -d '{"interface": {"if_name": "if2","description": "if_desc2"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json</screen>

<itemizedlist>
<listitem>
<simpara>Configure two mappings on the interfaces</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:adminpass -H 'content-type: application/json'  -X PUT -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:01-s1-eth1"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if1/portmap.json
curl --user admin:adminpass -H 'content-type: application/json'  -X PUT -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:03-s3-eth3"}}' http://127.0.0.1:8083/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if2/portmap.json</screen>

<itemizedlist>
<listitem>
<simpara>Generate traffic by pinging between hosts h1 and h2 after creating the portmaps respectively</simpara>
</listitem>
</itemizedlist>

<screen>  mininet&gt; h1 ping h2
  PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.
  64 bytes from 10.0.0.2: icmp_req=1 ttl=64 time=36.4 ms
  64 bytes from 10.0.0.2: icmp_req=2 ttl=64 time=0.880 ms
  64 bytes from 10.0.0.2: icmp_req=3 ttl=64 time=0.073 ms
  64 bytes from 10.0.0.2: icmp_req=4 ttl=64 time=0.081 ms</screen>

<itemizedlist>
<listitem>
<simpara>Get the VTN Dataflows information</simpara>
</listitem>
</itemizedlist>

<screen>curl -X GET -H 'content-type: application/json' --user 'admin:adminpass' "http://127.0.0.1:8083/vtn-webapi/dataflows?&amp;switch_id=00:00:00:00:00:00:00:01&amp;port_name=s1-eth1&amp;controller_id=odc&amp;srcmacaddr=de3d.7dec.e4d2&amp;no_vlan_id=true"</screen>

<itemizedlist>
<listitem>
<simpara>Create a Flowcondition in the VTN</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:admin -H 'content-type: application/json' -X PUT -d '{"name": "flowcond_1","match": [{"index": 1,"ethernet": {"src": "ca:9e:58:0c:1e:f0","dst": "ba:bd:0f:e3:a8:c8","type": 2048},"inetMatch": {"inet4": {"src": "10.0.0.1","dst": "10.0.0.2","protocol": 1}}}]}' http://10.100.9.42:8282/controller/nb/v2/vtn/default/flowconditions/flowcond_1</screen>

<itemizedlist>
<listitem>
<simpara>Create a Pathmap in the VTN</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:admin -H 'content-type: application/json' -X PUT -d '{"index": 10, "condition":"flowcond_1", "policy":1, "idleTimeout": 300, "hardTimeout": 0}' http://10.100.9.42:8282/controller/nb/v2/vtn/default/pathmaps/1</screen>

<itemizedlist>
<listitem>
<simpara>Get the Path policy information</simpara>
</listitem>
</itemizedlist>

<screen>curl --user admin:admin -H 'content-type: application/json' -X GET -d '{"id": 1,"default": 100000,"cost": [{"location": {"node": {"type": "OF","id": "00:00:00:00:00:00:00:01"},"port": {"type": "OF","id": "3","name": "s1-eth3"}},"cost": 1000},{"location": {"node": {"type": "OF","id": "00:00:00:00:00:00:00:04"},"port": {"type": "OF","id": "2","name": "s4-eth2"}},"cost": 1000},{"location": {"node": {"type": "OF", "id": "00:00:00:00:00:00:00:03"},"port": {"type": "OF","id": "3","name": "s3-eth3"}},"cost": 100000}]}' http://10.100.9.42:8282/controller/nb/v2/vtn/default/pathpolicies/1</screen>

</section>
<section xml:id="_verification_10">
<title>Verification</title>
<itemizedlist>
<listitem>
<simpara>Before applying Path policy information in the VTN</simpara>
</listitem>
</itemizedlist>

<screen>{
        "pathinfos": [
            {
              "in_port_name": "s1-eth1",
              "out_port_name": "s1-eth2",
              "switch_id": "00:00:00:00:00:00:00:01"
            },
            {
              "in_port_name": "s2-eth1",
              "out_port_name": "s2-eth2",
              "switch_id": "00:00:00:00:00:00:00:02"
            },
            {
               "in_port_name": "s3-eth1",
               "out_port_name": "s3-eth3",
               "switch_id": "00:00:00:00:00:00:00:03"
            }
                     ]
}</screen>

<itemizedlist>
<listitem>
<simpara>After applying Path policy information in the VTN</simpara>
</listitem>
</itemizedlist>

<screen>{
    "pathinfos": [
            {
              "in_port_name": "s1-eth1",
              "out_port_name": "s1-eth3",
              "switch_id": "00:00:00:00:00:00:00:01"
            },
            {
              "in_port_name": "s4-eth1",
              "out_port_name": "s4-eth2",
              "switch_id": "00:00:00:00:00:00:00:04"
            },
            {
               "in_port_name": "s3-eth2",
               "out_port_name": "s3-eth3",
               "switch_id": "00:00:00:00:00:00:00:03"
            }
                     ]
}</screen>

</section>
</section>
<section xml:id="_vtn_coordinator_troubleshooting_howto">
<title>VTN Coordinator(Troubleshooting HowTo)</title>
<section xml:id="_overview_54">
<title>Overview</title>
<simpara>This page demonstrates Installation troubleshooting steps of VTN Coordinator.
OpenDaylight VTN provides multi-tenant virtual network functions on OpenDaylight controllers. OpenDaylight VTN consists of two parts:</simpara>
<itemizedlist>
<listitem>
<simpara>VTN Coordinator.</simpara>
</listitem>
<listitem>
<simpara>VTN Manager.</simpara>
</listitem>
</itemizedlist>

<simpara>VTN Coordinator orchestrates multiple VTN Managers running in OpenDaylight Controllers, and provides VTN Applications with VTN API.
VTN Manager is OSGi bundles running in OpenDaylight Controller. Current VTN Manager supports only OpenFlow switches. It handles PACKET_IN messages, sends PACKET_OUT messages, manages host information, and installs flow entries into OpenFlow switches to provide VTN Coordinator with virtual network functions.
The requirements for installing these two are different.Therefore, we recommend that you install VTN Manager and VTN Coordinator in different machines.</simpara>
</section>
<section xml:id="_list_of_installation_troubleshooting_how_to_s">
<title>List of installation Troubleshooting How to&#8217;s</title>
<itemizedlist>
<title>How to install VTN Coordinator?</title>
<listitem>
<simpara><link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Installation:VTN_Coordinator">https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Installation:VTN_Coordinator</link></simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">After executing db_setup, you have encountered the error "Failed to setup database"?</emphasis></simpara>
<simpara>The error could be due to the below reasons
* Access Restriction</simpara>
<simpara>The user who owns /usr/local/vtn/ directory and installs VTN Coordinator, can only start db_setup.
Example :</simpara>
<screen>  The directory should appear as below (assuming the user as "vtn"):
  # ls -l /usr/local/
    drwxr-xr-x. 12 vtn  vtn  4096 Mar 14 21:53 vtn
  If the user doesnot own /usr/local/vtn/ then, please run the below command (assuming the username as vtn),
              chown -R vtn:vtn /usr/local/vtn</screen>

<itemizedlist>
<listitem>
<simpara>Postgres not Present</simpara>
</listitem>
</itemizedlist>

<screen>1. In case of Fedora/CentOS/RHEL, please check if /usr/pgsql/&lt;version&gt; directory is present and also ensure the commands initdb, createdb,pg_ctl,psql are working. If, not please re-install postgres packages
2. In case of Ubuntu, check if /usr/lib/postgres/&lt;version&gt; directory is present and check for the commands as in the previous step.</screen>

<itemizedlist>
<listitem>
<simpara>Not enough space to create tables</simpara>
</listitem>
</itemizedlist>

<screen>Please check df -k and ensure enough free space is available.</screen>

<itemizedlist>
<listitem>
<simpara>If the above steps do not solve the problem, please refer to the log file for the exact problem</simpara>
</listitem>
</itemizedlist>

<screen>/usr/local/vtn/var/dbm/unc_setup_db.log for the exact error.</screen>

<itemizedlist>
<title>What are the things to check after vtn_start?</title>
<listitem>
<simpara>list of VTN Coordinator processes</simpara>
</listitem>
<listitem>
<simpara>Run the below command ensure the Coordinator daemons are running.</simpara>
</listitem>
</itemizedlist>

<screen>       Command:     /usr/local/vtn/bin/unc_dmctl status
       Name              Type           IPC Channel       PID
    -----------       -----------      --------------     ------
        drvodcd         DRIVER           drvodcd           15972
        lgcnwd         LOGICAL           lgcnwd            16010
        phynwd         PHYSICAL          phynwd            15996</screen>

<itemizedlist>
<listitem>
<simpara>Issue the curl command to fetch version and ensure the process is able to respond.</simpara>
</listitem>
</itemizedlist>

<formalpara>
<title>How to debug a startup failure?</title>
<para>The following activities take place in order during startup</para>
</formalpara>
<itemizedlist>
<listitem>
<simpara>Database server is started after setting virtual memory to required value,Any database startup errors will be reflected in any of the below logs.</simpara>
</listitem>
</itemizedlist>

<screen>         /usr/local/vtn/var/dbm/unc_db_script.log.
         /usr/local/vtn/var/db/pg_log/postgresql-*.log (the pattern will have the date)</screen>

<itemizedlist>
<listitem>
<simpara>uncd daemon is kicked off, The daemon in turn kicks off the rest of the daemons.</simpara>
</listitem>
</itemizedlist>

<screen>  Any  uncd startup failures will be reflected in /usr/local/vtn/var/uncd/uncd_start.err.</screen>

<section xml:id="_after_setting_up_the_apache_tomcat_server_what_are_the_aspects_that_should_be_checked">
<title>After setting up the apache tomcat server, what are the aspects that should be checked.</title>
<formalpara>
<title>Please check if catalina is running.</title>
<para>
<screen>    The command ps -ef | grep catalina | grep -v grep should list a catalina process</screen>
</para>
</formalpara>

<formalpara>
<title>If you encounter an erroneous situation where the REST API is always failing.</title>
<para>
<screen>  Please ensure the firewall settings for port:8282(Lithium release) or port:8083(Post Lithium release) and enable the same.</screen>
</para>
</formalpara>

<formalpara>
<title>How to debug a REST API returning a failure message?</title>
<para>Please check the /usr/share/java/apache-tomcat-7.0.39/logs/core/core.log for failure details.</para>
</formalpara>
<formalpara>
<title>REST API for VTN configuration fails, how to debug?</title>
<para>The default log level for all daemons is "INFO", to debug the situation TRACE or DEBUG logs may be needed. To increase the log level for individual daemons, please use the commands suggested below</para>
</formalpara>
<screen>  /usr/local/vtn/bin/lgcnw_control loglevel trace -- upll daemon log
   /usr/local/vtn/bin/phynw_control loglevel trace -- uppl daemon log
   /usr/local/vtn/bin/unc_control loglevel trace -- uncd daemon log
   /usr/local/vtn/bin/drvodc_control loglevel trace -- Driver daemon log</screen>

<simpara>After setting the log levels, the operation can be repeated and the log files can be referred for debugging.</simpara>
<formalpara>
<title>Problems while Installing PostgreSQL due to openssl</title>
<para>Errors may occur when trying to install postgreSQL rpms. Recently PostgreSQL has upgraded all their binaries to use the latest openssl versions with fix for <link xlink:href="http://en.wikipedia.org/wiki/Heartbleed">http://en.wikipedia.org/wiki/Heartbleed</link> Please upgrade the openssl package to the latest version and re-install.
For RHEL 6.1/6.4 : If you have subscription, Please use the same and update the rpms. The details are available in the following link
<link xlink:href="https://access.redhat.com/site/solutions/781793">https://access.redhat.com/site/solutions/781793</link> ACCESS-REDHAT</para>
</formalpara>
<screen>  rpm -Uvh http://mirrors.kernel.org/centos/6/os/x86_64/Packages/openssl-1.0.1e-15.el6.x86_64.rpm
  rpm -ivh http://mirrors.kernel.org/centos/6/os/x86_64/Packages/openssl-devel-1.0.1e-15.el6.x86_64.rpm</screen>

<simpara>For other linux platforms, Please do yum update, the public respositroes will have the latest openssl, please install the same.</simpara>
</section>
</section>
</section>
<section xml:id="_support_for_microsoft_scvmm_2012_r2_with_odl_vtn">
<title>Support for Microsoft SCVMM 2012 R2 with ODL VTN</title>
<section xml:id="_introduction_3">
<title>Introduction</title>
<simpara>System Center Virtual Machine Manager (SCVMM) is Microsoft&#8217;s virtual machine support center for window&#8217;s based emulations. SCVMM is a management solution for the virtualized data center. You can use it to configure and manage your virtualization host, networking, and storage resources in order to create and deploy virtual machines and services to private clouds that you have created.</simpara>
<simpara>The VSEM Provider is a plug-in to bridge between SCVMM and OpenDaylight.</simpara>
<simpara>Microsoft Hyper-V is a server virtualization developed by Microsoft, which provides virtualization services through hypervisor-based emulations.</simpara>
<figure>
<title>Set-Up Diagram</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="./images/vtn/setup_diagram_SCVMM.png" contentwidth="500"/>
    </imageobject>
    <textobject><phrase>Setup</phrase></textobject>
  </mediaobject>
</figure>

<simpara><emphasis role="strong">The topology used in this set-up is:</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>A SCVMM with VSEM Provider installed and a running VTN Coordinator and OpenDaylight with VTN Feature installed.</simpara>
</listitem>
<listitem>
<simpara>PF1000 virtual switch extension has been installed in the two Hyper-V servers as it implements the OpenFlow capability in Hyper-V.</simpara>
</listitem>
<listitem>
<simpara>Three OpenFlow switches simulated using mininet and connected to Hyper-V.</simpara>
</listitem>
<listitem>
<simpara>Four VM&#8217;s hosted using SCVMM.</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">It is implemented as two major components:</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>SCVMM</simpara>
</listitem>
<listitem>
<simpara>OpenDaylight (VTN Feature)</simpara>
<itemizedlist>
<listitem>
<simpara>VTN Coordinator</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
<section xml:id="_vtn_coordinator_2">
<title>VTN Coordinator</title>
<simpara>OpenDaylight VTN as Network Service provider for SCVMM where VSEM provider is added in the Network Service which will handle all requests from SCVMM and communicate with the VTN Coordinator. It is used to manage the network virtualization provided by OpenDaylight.</simpara>
<section xml:id="_installing_https_in_vtn_coordinator">
<title>Installing HTTPS in VTN Coordinator</title>
<itemizedlist>
<listitem>
<simpara>System Center Virtual Machine Manager (SCVMM) supports only https protocol.</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">Apache Portable Runtime (APR) Installation Steps</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>Enter the command "yum install <emphasis role="strong">apr</emphasis>" in VTN Coordinator installed machine.</simpara>
</listitem>
<listitem>
<simpara>In /usr/bin, create a soft link as "ln –s /usr/bin/apr-1-config /usr/bin/apr-config".</simpara>
</listitem>
<listitem>
<simpara>Extract tomcat under "/usr/share/java" by using the below command "tar -xvf apache-tomcat-7.0.56.tar.gz –C /usr/share/java".</simpara>
</listitem>
</itemizedlist>

<note>
<simpara>Please go through the bleow link to download apache-tomcat-7.0.56.tar.gz file,
<link xlink:href="https://archive.apache.org/dist/tomcat/tomcat-7/v7.0.56/bin/">https://archive.apache.org/dist/tomcat/tomcat-7/v7.0.56/bin/</link></simpara>
</note>

<itemizedlist>
<listitem>
<simpara>Please go to the directory "cd /usr/share/java/apache-tomcat-7.0.56/bin and unzip tomcat-native.gz using this command "tar -xvf tomcat-native.gz".</simpara>
</listitem>
<listitem>
<simpara>Go to the directory "cd /usr/share/java/apache-tomcat-7.0.56/bin/tomcat-native-1.1.27-src/jni/native".</simpara>
</listitem>
<listitem>
<simpara>Enter the command "./configure --with-apr=/usr/bin/apr-config".</simpara>
</listitem>
<listitem>
<simpara>Enter the command "make" and "make install".</simpara>
</listitem>
<listitem>
<simpara>Apr libraries are successfully installed in "/usr/local/apr/lib".</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">Enable HTTP/HTTPS in VTN Coordinator</emphasis></simpara>
<simpara>Enter the command "system-config-firewall-tui" to enable firewall settings in server.</simpara>
<simpara><emphasis role="strong">Create a CA&#8217;s private key and a self-signed certificate in server</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>Execute the following command "openssl req -x509 -days 365 -extensions v3_ca -newkey rsa:2048 –out /etc/pki/CA/cacert.pem –keyout /etc/pki/CA/private/cakey.pem" in a single line.</simpara>
</listitem>
</itemizedlist>

<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="30*"/>
    
    <colspec colname="col_2" colwidth="70*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Argument</entry>
        
        <entry align="left" valign="top">Description</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Country Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the country code.<?asciidoc-br?>
For example, JP</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>State or Province Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the state or province.<?asciidoc-br?>
For example, Tokyo</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Locality Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Locality Name<?asciidoc-br?>
For example, Chuo-Ku</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Organization Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the company.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Organizational Unit Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the department, division, or the like.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Common Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the host name.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Email Address</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the e-mail address.</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<itemizedlist>
<listitem>
<simpara>Execute the following commands: "touch /etc/pki/CA/index.txt" and "echo 00 &gt; /etc/pki/CA/serial" in server after setting your CA&#8217;s private key.</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">Create a private key and a CSR for web server</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>Execute the following command "openssl req -new -newkey rsa:2048 -out csr.pem –keyout /usr/local/vtn/tomcat/conf/key.pem" in a single line.</simpara>
</listitem>
<listitem>
<simpara>Enter the PEM pass phrase: Same password you have given in CA&#8217;s private key PEM pass phrase.</simpara>
</listitem>
</itemizedlist>

<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="2">
    
    <colspec colname="col_1" colwidth="30*"/>
    
    <colspec colname="col_2" colwidth="70*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">Argument</entry>
        
        <entry align="left" valign="top">Description</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Country Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the country code.<?asciidoc-br?>
For example, JP</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>State or Province Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the state or province.<?asciidoc-br?>
For example, Tokyo</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Locality Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Locality Name<?asciidoc-br?>
For example, Chuo-Ku</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Organization Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the company.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Organizational Unit Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the department, division, or the like.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Common Name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the host name.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Email Address</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the e-mail address.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>A challenge password</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify the challenge password.</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>An optional company name</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Specify an optional company name.</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>

<simpara><emphasis role="strong">Create a certificate for web server</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>Execute the following command "openssl ca –in csr.pem –out /usr/local/vtn/tomcat/conf/cert.pem –days 365 –batch" in a single line.</simpara>
</listitem>
<listitem>
<simpara>Enter pass phrase for /etc/pki/CA/private/cakey.pem: Same password you have given in CA&#8217;s private key PEM pass phrase.</simpara>
</listitem>
<listitem>
<simpara>Open the tomcat file using "vim /usr/local/vtn/tomcat/bin/tomcat".</simpara>
</listitem>
<listitem>
<simpara>Include the line " TOMCAT_PROPS="$TOMCAT_PROPS -Djava.library.path=\"/usr/local/apr/lib\"" " in 131th line and save the file.</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">Edit server.xml file and restart the server</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>Open the server.xml file using "vim /usr/local/vtn/tomcat/conf/server.xml" and add the below lines.</simpara>
<screen>&lt;Connector port="${vtn.port}" protocol="HTTP/1.1" SSLEnabled="true"
maxThreads="150" scheme="https" secure="true"
SSLCertificateFile="/usr/local/vtn/tomcat/conf/cert.pem"
SSLCertificateKeyFile="/usr/local/vtn/tomcat/conf/key.pem"
SSLPassword=same password you have given in CA's private key PEM pass phrase
connectionTimeout="20000" /&gt;</screen>

</listitem>
<listitem>
<simpara>Save the file and restart the server.</simpara>
</listitem>
<listitem>
<simpara>To stop vtn use the following command.</simpara>
<screen>/usr/local/vtn/bin/vtn_stop</screen>

</listitem>
<listitem>
<simpara>To start vtn use the following command.</simpara>
<screen>/usr/local/vtn/bin/vtn_start</screen>

</listitem>
<listitem>
<simpara>Copy the created CA certificate from cacert.pem to cacert.crt by using the following command,</simpara>
<screen>openssl x509 –in /etc/pki/CA/cacert.pem –out cacert.crt</screen>

<simpara><emphasis role="strong">Checking the HTTP and HTTPS connection from client</emphasis></simpara>
</listitem>
<listitem>
<simpara>You can check the HTTP connection by using the following command:</simpara>
<screen>curl -X GET -H 'contenttype:application/json' -H 'username:admin' -H 'password:adminpass' http://&lt;server IP address&gt;:8083/vtn-webapi/api_version.json</screen>

</listitem>
<listitem>
<simpara>You can check the HTTPS connection by using the following command:</simpara>
<screen>curl -X GET -H 'contenttype:application/json' -H 'username:admin' -H 'password:adminpass' https://&lt;server IP address&gt;:8083/vtn-webapi/api_version.json --cacert /etc/pki/CA/cacert.pem</screen>

</listitem>
<listitem>
<simpara>The response should be like this for both HTTP and HTTPS:</simpara>
<screen>{"api_version":{"version":"V1.2"}}</screen>

</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_prerequisites_to_create_network_service_in_scvmm_machine_please_follow_the_below_steps">
<title>Prerequisites to create Network Service in SCVMM machine, Please follow the below steps</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>Please go through the below link to download VSEM Provider zip file,
<link xlink:href="https://nexus.opendaylight.org/content/groups/public/org/opendaylight/vtn/application/vtnmanager-vsemprovider/1.0.0-Lithium/vtnmanager-vsemprovider-1.0.0-Lithium-bin.zip">https://nexus.opendaylight.org/content/groups/public/org/opendaylight/vtn/application/vtnmanager-vsemprovider/1.0.0-Lithium/vtnmanager-vsemprovider-1.0.0-Lithium-bin.zip</link></simpara>
</listitem>
<listitem>
<simpara>Unzip the vtnmanager-vsemprovider-1.0.0-Lithium-bin.zip file anywhere in your SCVMM machine.</simpara>
</listitem>
<listitem>
<simpara>Stop SCVMM service from <emphasis role="strong">"service manager&#8594;tools&#8594;servers&#8594;select system center virtual machine manager"</emphasis> and click stop.</simpara>
</listitem>
<listitem>
<simpara>Go to <emphasis role="strong">"C:/Program Files"</emphasis> in your SCVMM machine. Inside <emphasis role="strong">"C:/Program Files"</emphasis>, create a folder named as *"ODLProvider".</simpara>
</listitem>
<listitem>
<simpara>Inside <emphasis role="strong">"C:/Program Files/ODLProvider"</emphasis>, create a folder named as "Module" in your SCVMM machine.</simpara>
</listitem>
<listitem>
<simpara>Inside "C:/Program Files/ODLProvider/Module", Create two folders named as <emphasis role="strong">"Odl.VSEMProvider"</emphasis> and <emphasis role="strong">"VSEMOdlUI"</emphasis> in your SCVMM machine.</simpara>
</listitem>
<listitem>
<simpara>Copy the <emphasis role="strong">"VSEMOdl.dll"</emphasis> file from <emphasis role="strong">"ODL_SCVMM_PROVIDER/ODL_VSEM_PROVIDER"</emphasis> to <emphasis role="strong">"C:/Program Files/ODLProvider/Module/Odl.VSEMProvider"</emphasis> in your SCVMM machine.</simpara>
</listitem>
<listitem>
<simpara>Copy the <emphasis role="strong">"VSEMOdlProvider.psd1"</emphasis> file from <emphasis role="strong">"application/vsemprovider/VSEMOdlProvider/VSEMOdlProvider.psd1"</emphasis> to <emphasis role="strong">"C:/Program Files/ODLProvider/Module/Odl.VSEMProvider"</emphasis> in your SCVMM machine.</simpara>
</listitem>
<listitem>
<simpara>Copy the <emphasis role="strong">"VSEMOdlUI.dll"</emphasis> file from <emphasis role="strong">"ODL_SCVMM_PROVIDER/ODL_VSEM_PROVIDER_UI"</emphasis> to <emphasis role="strong">"C:/Program Files/ODLProvider/Module/VSEMOdlUI"</emphasis> in your SCVMM machine.</simpara>
</listitem>
<listitem>
<simpara>Copy the <emphasis role="strong">"VSEMOdlUI.psd1"</emphasis> file from <emphasis role="strong">"application/vsemprovider/VSEMOdlUI"</emphasis> to <emphasis role="strong">"C:/Program Files/ODLProvider/Module/VSEMOdlUI"</emphasis> in your SCVMM machine.</simpara>
</listitem>
<listitem>
<simpara>Copy the <emphasis role="strong">"reg_entry.reg"</emphasis> file from <emphasis role="strong">"ODL_SCVMM_PROVIDER/Register_settings"</emphasis> to your SCVMM desktop and double click the <emphasis role="strong">"reg_entry.reg"</emphasis> file to install registry entry in your SCVMM machine.</simpara>
</listitem>
<listitem>
<simpara>Download <emphasis role="strong">"PF1000.msi"</emphasis> from this link, <link xlink:href="https://www.pf-info.com/License/en/index.php?url=index/index_non_buyer">https://www.pf-info.com/License/en/index.php?url=index/index_non_buyer</link> and place into <emphasis role="strong">"C:/Program Files/Switch Extension Drivers"</emphasis> in your SCVMM machine.</simpara>
</listitem>
<listitem>
<simpara>Start SCVMM service from <emphasis role="strong">"service manager&#8594;tools&#8594;servers&#8594;select system center virtual machine manager"</emphasis> and click start.</simpara>
</listitem>
</orderedlist>

</section>
<section xml:id="_system_center_virtual_machine_manager_scvmm">
<title>System Center Virtual Machine Manager (SCVMM)</title>
<simpara>It supports two major features:</simpara>
<itemizedlist>
<listitem>
<simpara>Failover Clustering</simpara>
</listitem>
<listitem>
<simpara>Live Migration</simpara>
</listitem>
</itemizedlist>

<section xml:id="_failover_clustering">
<title>Failover Clustering</title>
<simpara>A single Hyper-V can host a number of virtual machines. If the host were to fail then all of the virtual machines that are running on it will also fail, thereby resulting in a major outage. Failover clustering treats individual virtual machines as clustered resources. If a host were to fail then clustered virtual machines are able to fail over to a different Hyper-V server where they can continue to run.</simpara>
</section>
<section xml:id="_live_migration">
<title>Live Migration</title>
<simpara>Live Migration is used to migrate the running virtual machines from one Hyper-V server to another Hyper-V server without any interruptions.
Please go through the below video for more details,</simpara>
<itemizedlist>
<listitem>
<simpara><link xlink:href="https://youtu.be/34YMOTzbNJM">https://youtu.be/34YMOTzbNJM</link></simpara>
</listitem>
</itemizedlist>

</section>
</section>
<section xml:id="_scvmm_user_guide">
<title>SCVMM User Guide</title>
<itemizedlist>
<listitem>
<simpara>Please go through the below link for SCVMM user guide: <link xlink:href="https://wiki.opendaylight.org/images/c/ca/ODL_SCVMM_USER_GUIDE_final.pdf">https://wiki.opendaylight.org/images/c/ca/ODL_SCVMM_USER_GUIDE_final.pdf</link></simpara>
</listitem>
<listitem>
<simpara>Please go through the below links for more details</simpara>
<itemizedlist>
<listitem>
<simpara>OpenDaylight SCVMM VTN Integration: <link xlink:href="https://youtu.be/iRt4dxtiz94">https://youtu.be/iRt4dxtiz94</link></simpara>
</listitem>
<listitem>
<simpara>OpenDaylight Congestion Control with SCVMM VTN: <link xlink:href="https://youtu.be/34YMOTzbNJM">https://youtu.be/34YMOTzbNJM</link></simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>
</section>
</section>
</chapter>
<chapter xml:id="_netconf_user_guide">
<title>NETCONF User Guide</title>
<section xml:id="_overview_55">
<title>Overview</title>
<simpara>NETCONF is an XML based protocol used for configuration and monitoring
of devices in the network. The base NETCONF protocol is described in
<link xlink:href="http://tools.ietf.org/html/rfc6241">RFC-6241</link>.</simpara>
<formalpara>
<title>NETCONF in OpenDaylight:</title>
<para>OpenDaylight controller supports NETCONF protocol as a northbound server
as well as a southbound plugin.</para>
</formalpara>
</section>
<section xml:id="_southbound_netconf_connector">
<title>Southbound (netconf-connector)</title>
<simpara>NETCONF southbound plugin is capable of connecting to remote NETCONF
devices and expose their configuration/operational datastores, rpcs and
notifications as MD-SAL mount points. These mount points allow
applications and remote users (over RESTCONF) to interact with the
mounted devices.</simpara>
<simpara>In terms of RFCs, the connector supports:</simpara>
<itemizedlist>
<listitem>
<simpara><link xlink:href="http://tools.ietf.org/html/rfc6241">RFC-6241</link>,</simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://tools.ietf.org/html/rfc5277">RFC-5277</link>,</simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://tools.ietf.org/html/rfc6022">RFC-6022</link>,</simpara>
</listitem>
</itemizedlist>

<simpara><emphasis role="strong">Netconf-connector is fully model driven (utilising YANG modeling language) so in addition to
the above RFCs, it supports any data/RPC/notifications described by a
YANG model that is implemented by the device.</emphasis></simpara>
<tip>
<simpara>NETCONF southbound can be activated by installing
<literal>odl-netconf-connector-all</literal> Karaf feature.</simpara>
</tip>

<section xml:id="_netconf_connector_configuration">
<title>Netconf-connector configuration</title>
<simpara>There are 2 ways for configuring netconf-connector (as is for any
other module) NETCONF or RESTCONF. This guide focuses on using RESTCONF.</simpara>
<section xml:id="_default_configuration">
<title>Default configuration</title>
<simpara>The default configuration contains all the necessary dependencies
(file: 01-netconf.xml) and a single instance of netconf-connector
(file: 99-netconf-connector.xml) called <emphasis role="strong">controller-config</emphasis> which
connects itself to the NETCONF northbound in OpenDaylight in a loopback
fashion. The connector mounts the NETCONF server for config-subsystem
in order to enable RESTCONF protocol for config-subsystem. This
RESTCONF still goes via NETCONF, but using RESTCONF is much more user
friendly than using NETCONF.</simpara>
</section>
<section xml:id="_spawning_additional_netconf_connectors_while_the_controller_is_running">
<title>Spawning additional netconf-connectors while the controller is running</title>
<simpara>Preconditions:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>OpenDaylight is running</simpara>
</listitem>
<listitem>
<simpara>In Karaf, you must have the netconf-connector installed (at the
Karaf prompt, type: feature:install odl-netconf-connector-all); the
loopback NETCONF mountpoint will be automatically configured and
activated</simpara>
</listitem>
<listitem>
<simpara>Wait until log displays following entry:
RemoteDevice{controller-config}: NETCONF connector initialized
successfully</simpara>
</listitem>
</orderedlist>

<simpara>To configure a new netconf-connector you need to send following
request to RESTCONF:</simpara>
<simpara>POST <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules</link></simpara>
<simpara><emphasis role="strong">Headers</emphasis>:
Accept application/xml
Content-Type application/xml</simpara>
<screen>&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
  &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;prefix:sal-netconf-connector&lt;/type&gt;
  &lt;name&gt;new-netconf-device&lt;/name&gt;
  &lt;address xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;127.0.0.1&lt;/address&gt;
  &lt;port xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;830&lt;/port&gt;
  &lt;username xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;admin&lt;/username&gt;
  &lt;password xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;admin&lt;/password&gt;
  &lt;tcp-only xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;false&lt;/tcp-only&gt;
  &lt;event-executor xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:netty"&gt;prefix:netty-event-executor&lt;/type&gt;
    &lt;name&gt;global-event-executor&lt;/name&gt;
  &lt;/event-executor&gt;
  &lt;binding-registry xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:binding"&gt;prefix:binding-broker-osgi-registry&lt;/type&gt;
    &lt;name&gt;binding-osgi-broker&lt;/name&gt;
  &lt;/binding-registry&gt;
  &lt;dom-registry xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:dom"&gt;prefix:dom-broker-osgi-registry&lt;/type&gt;
    &lt;name&gt;dom-broker&lt;/name&gt;
  &lt;/dom-registry&gt;
  &lt;client-dispatcher xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:config:netconf"&gt;prefix:netconf-client-dispatcher&lt;/type&gt;
    &lt;name&gt;global-netconf-dispatcher&lt;/name&gt;
  &lt;/client-dispatcher&gt;
  &lt;processing-executor xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:threadpool"&gt;prefix:threadpool&lt;/type&gt;
    &lt;name&gt;global-netconf-processing-executor&lt;/name&gt;
  &lt;/processing-executor&gt;
  &lt;keepalive-executor xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:threadpool"&gt;prefix:scheduled-threadpool&lt;/type&gt;
    &lt;name&gt;global-netconf-ssh-scheduled-executor&lt;/name&gt;
  &lt;/keepalive-executor&gt;
&lt;/module&gt;</screen>

<simpara>This spawns a new netconf-connector which tries to
connect to (or mount) a NETCONF device at 127.0.0.1 and port 830. You
can check the configuration of config-subsystem&#8217;s configuration datastore.
The new netconf-connector will now be present there. Just invoke:</simpara>
<simpara>GET <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules</link></simpara>
<simpara>The response will contain the module for new-netconf-device.</simpara>
<simpara>Right after the new netconf-connector is created, it writes some
useful metadata into the datastore of MD-SAL under the network-topology
subtree. This metadata can be found at:</simpara>
<simpara>GET <link xlink:href="http://localhost:8181/restconf/operational/network-topology:network-topology/">http://localhost:8181/restconf/operational/network-topology:network-topology/</link></simpara>
<simpara>Information about connection status, device capabilities etc. can be
found there.</simpara>
</section>
<section xml:id="_connecting_to_a_device_not_supporting_netconf_monitoring">
<title>Connecting to a device not supporting NETCONF monitoring</title>
<simpara>The netconf-connector in OpenDaylight relies on ietf-netconf-monitoring support
when connecting to remote NETCONF device. The ietf-netconf-monitoring
support allows netconf-connector to list and download all YANG schemas
that are used by the device. NETCONF connector can only communicate
with a device if it knows the set of used schemas (or at least a
subset). However, some devices use YANG models internally but do not
support NETCONF monitoring. Netconf-connector can also communicate
with these devices, but you have to side load the necessary yang
models into OpenDaylight&#8217;s YANG model cache for netconf-connector. In general
there are 2 situations you might encounter:</simpara>
<simpara><emphasis role="strong">1. NETCONF device does not support ietf-netconf-monitoring but it
   does list all its YANG models as capabilities in HELLO message</emphasis></simpara>
<simpara>This could be a device that internally uses only ietf-inet-types
YANG model with revision 2010-09-24. In the HELLO message that is sent
from this device there is this capability reported:</simpara>
<screen>urn:ietf:params:xml:ns:yang:ietf-inet-types?module=ietf-inet-types&amp;revision=2010-09-24</screen>

<simpara><emphasis role="strong">For such devices you only need to put the schema into folder
cache/schema inside your Karaf distribution.</emphasis></simpara>
<important>
<simpara>The file with YANG schema for ietf-inet-types has to be
called <link xlink:href="mailto:ietf-inet-types@2010-09-24.yang">ietf-inet-types@2010-09-24.yang</link>. It is the required naming format
of the cache.</simpara>
</important>

<simpara><emphasis role="strong">2. NETCONF device does not support ietf-netconf-monitoring and it
   does NOT list its YANG models as capabilities in HELLO message</emphasis></simpara>
<simpara>Compared to device that lists its YANG models in HELLO message, in
this case there would be no capability with ietf-inet-types in the
HELLO message. This type of device basically provides no information
about the YANG schemas it uses so its up to the user of OpenDaylight to
properly configure netconf-connector for this device.</simpara>
<simpara>Netconf-connector has an optional configuration attribute called
yang-module-capabilities and this attribute can contain a list of
"YANG module based" capabilities. So by setting this configuration
attribute, it is possible to override the "yang-module-based"
capabilities reported in HELLO message of the device. To do this, we
need to modify the configuration of netconf-connector by adding this
xml (It needs to be added next to the address, port, username etc.
configuration elements):</simpara>
<screen>&lt;yang-module-capabilities xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
  &lt;capability xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    urn:ietf:params:xml:ns:yang:ietf-inet-types?module=ietf-inet-types&amp;amp;revision=2010-09-24
  &lt;/capability&gt;
&lt;/yang-module-capabilities&gt;</screen>

<simpara><emphasis role="strong">Remember to also put the YANG schemas into the cache folder.</emphasis></simpara>
<note>
<simpara>For putting multiple capabilities, you just need to replicate
the capability xml element inside yang-module-capability element.
Capability element is modeled as a leaf-list.
With this configuration, we would make the remote device report usage
of ietf-inet-types in the eyes of netconf-connector.</simpara>
</note>

</section>
<section xml:id="_reconfiguring_netconf_connector_while_the_controller_is_running">
<title>Reconfiguring Netconf-Connector While the Controller is Running</title>
<simpara>It is possible to change the configuration of a running module while
the whole controller is running. This example will continue where the last left off and
will change the configuration for the brand new netconf-connector
after it was spawned. Using one RESTCONF request, we will change both
username and password for the netconf-connector.</simpara>
<simpara>To update an existing netconf-connector you need to send following
request to RESTCONF:</simpara>
<simpara>PUT
<link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/module/odl-sal-netconf-connector-cfg:sal-netconf-connector/new-netconf-device">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/module/odl-sal-netconf-connector-cfg:sal-netconf-connector/new-netconf-device</link></simpara>
<screen>&lt;module xmlns="urn:opendaylight:params:xml:ns:yang:controller:config"&gt;
  &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;prefix:sal-netconf-connector&lt;/type&gt;
  &lt;name&gt;new-netconf-device&lt;/name&gt;
  &lt;username xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;bob&lt;/username&gt;
  &lt;password xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;passwd&lt;/password&gt;
  &lt;tcp-only xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;false&lt;/tcp-only&gt;
  &lt;event-executor xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:netty"&gt;prefix:netty-event-executor&lt;/type&gt;
    &lt;name&gt;global-event-executor&lt;/name&gt;
  &lt;/event-executor&gt;
  &lt;binding-registry xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:binding"&gt;prefix:binding-broker-osgi-registry&lt;/type&gt;
    &lt;name&gt;binding-osgi-broker&lt;/name&gt;
  &lt;/binding-registry&gt;
  &lt;dom-registry xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:dom"&gt;prefix:dom-broker-osgi-registry&lt;/type&gt;
    &lt;name&gt;dom-broker&lt;/name&gt;
  &lt;/dom-registry&gt;
  &lt;client-dispatcher xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:config:netconf"&gt;prefix:netconf-client-dispatcher&lt;/type&gt;
    &lt;name&gt;global-netconf-dispatcher&lt;/name&gt;
  &lt;/client-dispatcher&gt;
  &lt;processing-executor xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:threadpool"&gt;prefix:threadpool&lt;/type&gt;
    &lt;name&gt;global-netconf-processing-executor&lt;/name&gt;
  &lt;/processing-executor&gt;
  &lt;keepalive-executor xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf"&gt;
    &lt;type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:threadpool"&gt;prefix:scheduled-threadpool&lt;/type&gt;
    &lt;name&gt;global-netconf-ssh-scheduled-executor&lt;/name&gt;
  &lt;/keepalive-executor&gt;
&lt;/module&gt;</screen>

<simpara>Since a PUT is a replace operation, the whole configuration must be
specified along with the new values for username and password. This
should result in a 2xx response and the instance of netconf-connector
called new-netconf-device will be reconfigured to use username bob and
password passwd. New configuration can be verified by executing:</simpara>
<simpara>GET <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/module/odl-sal-netconf-connector-cfg:sal-netconf-connector/new-netconf-device">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/module/odl-sal-netconf-connector-cfg:sal-netconf-connector/new-netconf-device</link></simpara>
<simpara>With new configuration, the old connection will be closed and a new
one established.</simpara>
</section>
<section xml:id="_destroying_netconf_connector_while_the_controller_is_running">
<title>Destroying Netconf-Connector While the Controller is Running</title>
<simpara>Using RESTCONF one can also destroy an instance of a module. In case
of netconf-connector, the module will be destroyed, NETCONF connection
dropped and all resources will be cleaned. To do this, simply issue a
request to following URL:</simpara>
<simpara>DELETE <link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/module/odl-sal-netconf-connector-cfg:sal-netconf-connector/new-netconf-device">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/module/odl-sal-netconf-connector-cfg:sal-netconf-connector/new-netconf-device</link></simpara>
<simpara>The last element of the URL is the name of the instance and its
predecessor is the type of that module (In our case the type is
<emphasis role="strong">sal-netconf-connector</emphasis> and name <emphasis role="strong">new-netconf-device</emphasis>). The type and name
are actually the keys of the module list.</simpara>
</section>
</section>
<section xml:id="_netconf_connector_utilisation">
<title>Netconf-connector utilisation</title>
<simpara>Once the connector is up and running, users can utilize the new Mount
point instance. By using RESTCONF or from their application code. This
chapter deals with using RESTCONF and more information for app
developers can be found in the developers guide or in the official
tutorial application <emphasis role="strong">ncmount</emphasis> that can be found in the coretutorials project:</simpara>
<itemizedlist>
<listitem>
<simpara><link xlink:href="https://github.com/opendaylight/coretutorials/tree/stable/lithium/ncmount">https://github.com/opendaylight/coretutorials/tree/stable/lithium/ncmount</link></simpara>
</listitem>
</itemizedlist>

<section xml:id="_reading_data_from_the_device">
<title>Reading data from the device</title>
<simpara>Just invoke (no body needed):</simpara>
<simpara>GET <link xlink:href="http://localhost:8080/restconf/operational/network-topology:network-topology/topology/topology-netconf/node/new-netconf-device/yang-ext:mount/">http://localhost:8080/restconf/operational/network-topology:network-topology/topology/topology-netconf/node/new-netconf-device/yang-ext:mount/</link></simpara>
<simpara>This will return the entire content of operation datastore from the
device. To view just the configuration datastore, change <emphasis role="strong">operational</emphasis> in
this URL to <emphasis role="strong">config</emphasis>.</simpara>
</section>
<section xml:id="_writing_configuration_data_to_the_device">
<title>Writing configuration data to the device</title>
<simpara>In general, you cannot simply write any data you want to the device.
The data have to conform to the YANG models implemented by the device.
In this example we are adding a new interface-configuration to the
mounted device (assuming the device supports Cisco-IOS-XR-ifmgr-cfg
YANG model). In fact this request comes from the tutorial dedicated to
the <emphasis role="strong">ncmount</emphasis> tutorial app.</simpara>
<simpara>POST
<link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/new-netconf-device/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/new-netconf-device/yang-ext:mount/Cisco-IOS-XR-ifmgr-cfg:interface-configurations</link></simpara>
<screen>&lt;interface-configuration xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg"&gt;
    &lt;active&gt;act&lt;/active&gt;
    &lt;interface-name&gt;mpls&lt;/interface-name&gt;
    &lt;description&gt;Interface description&lt;/description&gt;
    &lt;bandwidth&gt;32&lt;/bandwidth&gt;
    &lt;link-status&gt;&lt;/link-status&gt;
&lt;/interface-configuration&gt;</screen>

<simpara>Should return 200 response code with no body.</simpara>
<tip>
<simpara>This call is transformed into a couple of NETCONF RPCs. Resulting
NETCONF RPCs that go directly to the device can be found in the OpenDaylight
logs after invoking <literal>log:set TRACE
org.opendaylight.controller.sal.connect.netconf</literal> in the Karaf shell.
Seeing the NETCONF RPCs might help with debugging.</simpara>
</tip>

<simpara>This request is very similar to the one where we spawned a new netconf
device. That&#8217;s because we used the loopback netconf-connector to write
configuration data into config-subsystem datastore and config-subsystem
picked it up from there.</simpara>
</section>
<section xml:id="_invoking_custom_rpc">
<title>Invoking custom RPC</title>
<simpara>Devices can implement any additional RPC and as long as it provides
YANG models for it, it can be invoked from OpenDaylight. Following example shows how
to invoke the get-schema RPC (get-schema is quite common among netconf
devices). Invoke:</simpara>
<simpara>POST
<link xlink:href="http://localhost:8181/restconf/operations/network-topology:network-topology/topology/topology-netconf/node/new-netconf-device/yang-ext:mount/ietf-netconf-monitoring:get-schema">http://localhost:8181/restconf/operations/network-topology:network-topology/topology/topology-netconf/node/new-netconf-device/yang-ext:mount/ietf-netconf-monitoring:get-schema</link></simpara>
<screen>&lt;input xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"&gt;
  &lt;identifier&gt;ietf-yang-types&lt;/identifier&gt;
  &lt;version&gt;2013-07-15&lt;/version&gt;
&lt;/input&gt;</screen>

<simpara>This call should fetch the source for ietf-yang-types YANG model from
the mounted device.</simpara>
</section>
</section>
<section xml:id="_netconf_connector_netopeer">
<title>Netconf-connector + Netopeer</title>
<simpara><link xlink:href="https://github.com/cesnet/netopeer">Netopeer</link> (an open-source NETCONF server) can be used for
testing/exploring NETCONF southbound in OpenDaylight.</simpara>
<section xml:id="_netopeer_installation">
<title>Netopeer installation</title>
<simpara><link xlink:href="https://www.docker.com/">Docker</link> container with netopeer will be used
in this guid. To install docker and start the
<link xlink:href="https://index.docker.io/u/dockeruser/netopeer/">netopeer image</link> perform
following steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Install docker <link xlink:href="http://docs.docker.com/linux/step_one/">http://docs.docker.com/linux/step_one/</link></simpara>
</listitem>
<listitem>
<simpara>Start the netopeer image:</simpara>
<screen>docker run -rm -t -p 1831:830 dockeruser/netopeer</screen>

</listitem>
<listitem>
<simpara>Verify netopeer is running by invoking (netopeer should send its
HELLO message right away:</simpara>
<screen>ssh root@localhost -p 1831 -s netconf
(password root)</screen>

</listitem>
</orderedlist>

</section>
<section xml:id="_mounting_netopeer_netconf_server">
<title>Mounting netopeer NETCONF server</title>
<simpara>Preconditions:</simpara>
<itemizedlist>
<listitem>
<simpara>OpenDaylight is started with features <literal>odl-restconf-all</literal> and
<literal>odl-netconf-connector-all</literal>.</simpara>
</listitem>
<listitem>
<simpara>Netopeer is up and running in docker</simpara>
</listitem>
</itemizedlist>

<simpara>Now just follow the chapter:
<link linkend="_spawning_additional_netconf_connectors_while_the_controller_is_running">Spawning netconf-connector</link>. In the payload change the:</simpara>
<itemizedlist>
<listitem>
<simpara>name to e.g. netopeer</simpara>
</listitem>
<listitem>
<simpara>usernam/password to your system credentials</simpara>
</listitem>
<listitem>
<simpara>ip to localhost</simpara>
</listitem>
<listitem>
<simpara>port to 1831.</simpara>
</listitem>
</itemizedlist>

<simpara>After netopeer is mounted successfully, its configuration can be read
using RESTCONF by invoking:</simpara>
<simpara>GET
<link xlink:href="http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/netopeer/yang-ext:mount/">http://localhost:8181/restconf/config/network-topology:network-topology/topology/topology-netconf/node/netopeer/yang-ext:mount/</link></simpara>
</section>
</section>
</section>
<section xml:id="_northbound_netconf_servers">
<title>Northbound (NETCONF servers)</title>
<simpara>OpenDaylight provides 2 types of NETCONF servers:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">NETCONF server for config-subsystem(listening by default on port
1830)</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>Serves as a default interface for config-subsystem and allows
users to spawn/reconfigure/destroy modules(or applications) in OpenDaylight</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara><emphasis role="strong">NETCONF server for MD-SAL(listening by default on port 2830)</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>Serves as an alternative interface for MD-SAL (besides RESTCONF)
and allows users to read/write data from MD-SAL&#8217;s datastore and to
invoke its rpcs (NETCONF notifications are not available in the
Lithium release of OpenDaylight)</simpara>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

<note>
<simpara>The reason for having 2 NETCONF servers is that config-subsystem and
MD-SAL are 2 different components of OpenDaylight and require different
approach for NETCONF message handling and data translation. These 2
components will probably merge in the future.</simpara>
</note>

<section xml:id="_netconf_server_for_config_subsystem">
<title>NETCONF server for config-subsystem</title>
<simpara>This NETCONF server is the primary interface for config-subsystem. It
allows the users to interact with config-subsystem in a standardized
NETCONF manner.</simpara>
<simpara>In terms of RFCs, these are supported:</simpara>
<itemizedlist>
<listitem>
<simpara><link xlink:href="http://tools.ietf.org/html/rfc6241">RFC-6241</link>,</simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://tools.ietf.org/html/rfc5277">RFC-5277</link>,</simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://tools.ietf.org/html/rfc6470">RFC-6470</link></simpara>
<itemizedlist>
<listitem>
<simpara>(partially, only the
schema-change notification is available in Lithium release)</simpara>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<simpara><link xlink:href="https://tools.ietf.org/html/rfc6022">RFC-6022</link>,</simpara>
</listitem>
</itemizedlist>

<simpara>For regular users it is recommended to use RESTCONF + the
controller-config loopback mountpoint instead of using pure NETCONF.
How to do that is spesific for each component/module/application
in OpenDaylight and can be found in their dedicated user guides</simpara>
</section>
<section xml:id="_netconf_server_for_md_sal">
<title>NETCONF server for MD-SAL</title>
<simpara>This NETCONF server is just a generic interface to MD-SAL in OpenDaylight.
It uses the stadard MD-SAL APIs and serves as an alternative to
RESTCONF. It is
fully model driven and supports any data and rpcs that are supported
by MD-SAL.</simpara>
<simpara>In terms of RFCs, these are supported:</simpara>
<itemizedlist>
<listitem>
<simpara><link xlink:href="http://tools.ietf.org/html/rfc6241">RFC-6241</link>,</simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://tools.ietf.org/html/rfc6022">RFC-6022</link>,</simpara>
</listitem>
</itemizedlist>

<simpara>Notifications over NETCONF are not supported in the Lithium release.</simpara>
<tip>
<simpara>Install NETCONF northbound for MD-SAL by installing feature:
<literal>odl-netconf-mdsal</literal> in karaf. Default binding port is <emphasis role="strong">2830</emphasis>.</simpara>
</tip>

<section xml:id="_configuration_12">
<title>Configuration</title>
<simpara>The default configuration can be found in file:
<emphasis>08-netconf-mdsal.xml</emphasis>. The file contains the configuration for all
necessary dependencies and a single SSH endpoint starting on port 2830.
There is also a (by default disabled) TCP endpoint. It is possible
to start multiple endpoints at the same time either in the initial
configuration file or while OpenDaylight is running.</simpara>
<simpara>The credentials for SSH endpoint can also be configured here, the
defaults are admin/admin. Credentials in the SSH endpoint are not yet
managed by the centralized AAA component and have to be configured
separately.</simpara>
</section>
<section xml:id="_verifying_md_sal_s_netconf_server">
<title>Verifying MD-SAL&#8217;s NETCONF server</title>
<simpara>After the NETCONF server is available it can be examined by e.g. a
command line ssh tool:</simpara>
<screen>ssh admin@localhost -p 2830 -s netconf</screen>

<simpara>The server will respond by sending its HELLO message and can be used
as a regular NETCONF server from now on.</simpara>
</section>
<section xml:id="_mounting_the_md_sal_s_netconf_server">
<title>Mounting the MD-SAL&#8217;s NETCONF server</title>
<simpara>To perform this operation, just spawn a new netconf-connector as described in
<link linkend="_spawning_additional_netconf_connectors_while_the_controller_is_running">Spawning netconf-connector</link>.
Just change the ip to "127.0.0.1" port to "2830" and its name to "controller-mdsal".</simpara>
<simpara>Now the MD-SAL&#8217;s datastore can be read over RESTCONF via NETCONF by invoking:</simpara>
<simpara>GET <link xlink:href="http://localhost:8181/restconf/operational/network-topology:network-topology/topology/topology-netconf/node/controller-mdsal/yang-ext:mount">http://localhost:8181/restconf/operational/network-topology:network-topology/topology/topology-netconf/node/controller-mdsal/yang-ext:mount</link></simpara>
<note>
<simpara>This might not seem very useful, since MD-SAL can be accessed
directly from RESTCONF or from Application code, but the same method can be used to
mount and control other OpenDaylight instances by the "master OpenDaylight".</simpara>
</note>

</section>
</section>
</section>
<section xml:id="_netconf_testtool">
<title>NETCONF testtool</title>
<simpara><emphasis role="strong">NETCONF testtool is a set of standalone runnable jars that can:</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>Simulate NETCONF devices(suitable for scale testing)</simpara>
</listitem>
<listitem>
<simpara>Stress/Performance test NETCONF devices</simpara>
</listitem>
<listitem>
<simpara>Stress/Performance test RESTCONF devices</simpara>
</listitem>
</itemizedlist>

<simpara>These jars are part of OpenDaylight&#8217;s controller project and are built from the
NETCONF codebase in OpenDaylight.</simpara>
<tip>
<simpara>Download testtool from OpenDaylight Nexus at: <link xlink:href="http://nexus.opendaylight.org/#nexus-search;quick~netconf-testtool">http://nexus.opendaylight.org/#nexus-search;quick~netconf-testtool</link></simpara>
</tip>

<simpara><emphasis role="strong">Nexus contains 3 executable tools:</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara>executable.jar - device simulator</simpara>
</listitem>
<listitem>
<simpara>stress.client.tar.gz - NETCONF stress/performance measuring tool</simpara>
</listitem>
<listitem>
<simpara>perf-client.jar - RESTCONF stress/performance measuring tool</simpara>
</listitem>
</itemizedlist>

<tip>
<simpara>Each executable tool provides help. Just invoke <literal>java -jar
&lt;name-of-the-tool.jar&gt; --help</literal></simpara>
</tip>

<section xml:id="_netconf_device_simulator">
<title>NETCONF device simulator</title>
<simpara>Detailed information for NETCONF device simulator can be found at: <link xlink:href="https://wiki.opendaylight.org/view/OpenDaylight_Controller:Netconf:Testtool">https://wiki.opendaylight.org/view/OpenDaylight_Controller:Netconf:Testtool</link></simpara>
</section>
<section xml:id="_netconf_stress_performance_measuring_tool">
<title>NETCONF stress/performance measuring tool</title>
<simpara>This is basically a NETCONF client that puts NETCONF servers under
heavy load of NETCONF RPCs and measures the time until a configurable
amount of them is processed.</simpara>
</section>
<section xml:id="_restconf_stress_performance_measuring_tool">
<title>RESTCONF stress-performance measuring tool</title>
<simpara>Very similar to NETCONF stress tool with the difference of using
RESTCONF protocol instead of NETCONF.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_yang_push">
<title>YANG-PUSH</title>
<simpara>This section describes how to use the YANG-PUSH feature in OpenDaylight
and contains contains configuration, administration, and management
sections for the feature.</simpara>
<section xml:id="_overview_56">
<title>Overview</title>
<simpara>YANG PUBSUB project allows applications to place subscriptions upon targeted subtrees of YANG datastores residing on remote devices. Changes in YANG objects within the remote subtree can be pushed to an OpenDaylight MD-SAL and to the application as specified without a requiring the controller to make a continuous set of fetch requests.</simpara>
<section xml:id="_yang_push_capabilities_available">
<title>YANG-PUSH capabilities available</title>
<simpara>This module contains the base code which embodies the intent of YANG-PUSH requirements for subscription as defined in {i2rs-pub-sub-requirements} [<link xlink:href="https://datatracker.ietf.org/doc/draft-ietf-i2rs-pub-sub-requirements/">https://datatracker.ietf.org/doc/draft-ietf-i2rs-pub-sub-requirements/</link>].   The mechanism for delivering on these YANG-PUSH requirements over Netconf transport is defined in {netconf-yang-push} [netconf-yang-push: <link xlink:href="https://tools.ietf.org/html/draft-ietf-netconf-yang-push-00">https://tools.ietf.org/html/draft-ietf-netconf-yang-push-00</link>].</simpara>
<simpara>Note that in the current release, not all capabilities of draft-ietf-netconf-yang-push are realized.   Currently only implemented is <emphasis role="strong">create-subscription</emphasis> RPC support from <link xlink:href="mailto:ietf-datastore-push@2015-10-15.yang">ietf-datastore-push@2015-10-15.yang</link>; and this will be for periodic subscriptions only.  There of course is intent to provide much additional functionality in future OpenDaylight releases.</simpara>
</section>
<section xml:id="_future_yang_push_capabilities">
<title>Future YANG-PUSH capabilities</title>
<simpara>Over time, the intent is to flesh out more robust capabilities which will allow OpenDaylight applications to subscribe to YANG-PUSH compliant devices.  Capabilities for future releases will include:</simpara>
<simpara>Support for subscription change/delete:
<emphasis role="strong">modify-subscription</emphasis> rpc support for all mountpoint devices or particular mountpoint device
<emphasis role="strong">delete-subscription</emphasis> rpc support for all mountpoint devices or particular mountpoint device</simpara>
<simpara>Support for static subscriptions:
This will enable the receipt of subscription updates pushed from publishing devices where no signaling from the controller has been used to establish the subscriptions.</simpara>
<simpara>Support for additional transports:
NETCONF is not the only transport of interest to OpenDaylight or the subscribed devices.  Over time this code will support Restconf and HTTP/2 transport requirements defined in {netconf-restconf-yang-push} [<link xlink:href="https://tools.ietf.org/html/draft-voit-netconf-restconf-yang-push-01">https://tools.ietf.org/html/draft-voit-netconf-restconf-yang-push-01</link>]</simpara>
</section>
</section>
<section xml:id="_yang_push_architecture">
<title>YANG-PUSH Architecture</title>
<simpara>The code architecture of Yang push consists of two main elements</simpara>
<simpara>YANGPUSH Provider
YANGPUSH Listener</simpara>
<simpara>YANGPUSH Provider receives create-subscription requests from applications and then establishes/registers the corresponding listener which will receive information pushed by a publisher.  In addition, YANGPUSH Provider also invokes an augmented OpenDaylight create-subscription RPC which enables applications to register for notification as per rfc5277. This augmentation adds periodic time period (duration) and subscription-id values to the existing RPC parameters. The Java package supporting this capability is “org.opendaylight.yangpush.impl”. YangpushDomProvider is the class which supports this YANGPUSH Provider capability.</simpara>
<simpara>The YANGPUSH Listener accepts update notifications from a device after they have been de-encapsulated from the NETCONF transport.  The YANGPUSH Listener then passes these updates to MD-SAL.  This function is implemented via the YangpushDOMNotificationListener class within the “org.opendaylight.yangpush.listner” Java package.  Applications should monitor MD-SAL for the availability of newly pushed subscription updates.</simpara>
</section>
<section xml:id="_yang_push_catalog">
<title>YANG-PUSH Catalog</title>
<simpara>The NF Catalog contains metadata describing a NF.</simpara>
<section xml:id="_configuring_yang_push_catalog">
<title>Configuring YANG-PUSH Catalog</title>
<simpara>TBD: Describe how to configure YANG-PUSH Catalog after installation.</simpara>
</section>
<section xml:id="_administering_yang_push_catalog">
<title>Administering YANG-PUSH Catalog</title>
<simpara>TBD: Include related command reference or operations
for using YANG-PUSH Catalog.</simpara>
</section>
</section>
<section xml:id="_yang_push_workload_manager">
<title>YANG-PUSH Workload Manager</title>
<simpara>The Workload Manager defines RPCs to manage instances.</simpara>
</section>
<section xml:id="_configuring_yang_push_workload_manager">
<title>Configuring YANG-PUSH Workload Manager</title>
<simpara>TBD: Describe how to configure YANG-PUSH Workload Manager after installation.</simpara>
</section>
<section xml:id="_administering_yang_push_workload_manager">
<title>Administering YANG-PUSH Workload Manager</title>
<simpara>TBD: Include related command reference or operations
for using YANG-PUSH Workload Manager.</simpara>
</section>
<section xml:id="_tutorials_11">
<title>Tutorials</title>
<simpara>Below are tutorials for YANG-PUSH.</simpara>
<section xml:id="_using_yang_push_catalog">
<title>Using YANG-PUSH Catalog</title>
<simpara>TBD: State the purpose of tutorial</simpara>
<section xml:id="_overview_57">
<title>Overview</title>
<simpara>TBD: An overview of the YANG-PUSH Catalog tutorial</simpara>
</section>
<section xml:id="_prerequisites_14">
<title>Prerequisites</title>
<simpara>TBD: Provide any prerequisite information, assumed knowledge, or environment
required to execute the use case.</simpara>
</section>
<section xml:id="_target_environment_10">
<title>Target Environment</title>
<simpara>There are no topology requirement for using YANG-PUSH.  A single node able interact as per <link xlink:href="https://tools.ietf.org/html/draft-ietf-netconf-yang-push-00">https://tools.ietf.org/html/draft-ietf-netconf-yang-push-00</link> is sufficient to use this capability.</simpara>
</section>
<section xml:id="_instructions_18">
<title>Instructions</title>
<simpara>TBD: Step by step procedure for using YANG-PUSH Catalog.</simpara>
</section>
</section>
<section xml:id="_using_yang_push_workload_manager">
<title>Using YANG-PUSH Workload Manager</title>
<simpara>TBD: State the purpose of tutorial</simpara>
<section xml:id="_overview_58">
<title>Overview</title>
<simpara>TBD: An overview of the YANG-PUSH Workload Manager tutorial</simpara>
</section>
<section xml:id="_prerequisites_15">
<title>Prerequisites</title>
<simpara>TBD: Provide any prerequisite information, assumed knowledge, or environment
required to execute the use case.</simpara>
</section>
<section xml:id="_target_environment_11">
<title>Target Environment</title>
<simpara>TBD: Include any topology requirement for the use case.</simpara>
</section>
<section xml:id="_instructions_19">
<title>Instructions</title>
<simpara>TBD: Step by step procedure for using YANG-PUSH Workload Manager.</simpara>
</section>
</section>
</section>
</chapter>
</part>
</book>